%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            true def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 41 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Times-BoldItalic FMFONTDEFINE
3 0 /Times-Italic FMFONTDEFINE
4 1 /Symbol FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
6 1 /ZapfDingbats FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 1 0.6 0 0 0 0.4 1]
[ 0 0.2 0.2 0.8 0.2 0 0]
[ 0.5 0 0 0 0.5 1 1]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
63.65 770.95 531.65 780.95 R
7 X
0 0 0 1 0 0 0 K
V
63.65 57.62 531.65 67.62 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 618.95 540.65 749.45 R
V
0 18 Q
0 X
(The X-) 253.08 737.45 T
(tr) 306.58 737.45 T
(ee:) 320.24 737.45 T
(An Index Structur) 116.29 715.45 T
(e f) 257.97 715.45 T
(or High-Dimensional Data) 276 715.45 T
0 12 Q
(Stefan Ber) 254.59 689.58 T
(chtold) 308.7 689.58 T
(Daniel A. K) 258.3 673.7 T
(eim) 318.34 673.7 T
(Hans-P) 248.28 657.83 T
(eter Kriegel) 286.04 657.83 T
1 F
(Institute for Computer Science, Uni) 58 636.95 T
(v) 229.35 636.95 T
(ersity of Munich, Oettingenstr) 235.17 636.95 T
(. 67, D-80538 Munich, German) 379.83 636.95 T
(y) 531.29 636.95 T
({berchtol, k) 163.87 622.95 T
(eim, krie) 220.83 622.95 T
(gel}@informatik.uni-muenchen.de) 263.31 622.95 T
54.65 218.45 288.65 578.45 R
7 X
V
0 14 Q
0 X
(Abstract) 145.6 569.12 T
1 10 Q
-0.2 -0.02 (In this paper) 72.65 548.79 B
-0.2 -0.02 (, we propose a ne) 121.57 548.79 B
-0.2 -0.02 (w method for inde) 189.86 548.79 B
-0.2 -0.02 (x-) 262.36 548.79 B
-0.55 -0.02 (ing lar) 72.65 537.79 B
-0.55 -0.02 (ge amounts of point and spatial data in high-) 97.61 537.79 B
0.68 -0.02 (dimensional space. An analysis sho) 72.65 526.79 B
0.68 -0.02 (ws that inde) 216.37 526.79 B
0.68 -0.02 (x) 265.67 526.79 B
-0.12 -0.02 (structures such as the R*-) 72.65 515.79 B
-0.12 -0.02 (tree are not adequate for) 174.43 515.79 B
1.71 -0.02 (inde) 72.65 504.79 B
1.71 -0.02 (xing high-dimensional data sets. The major) 89.64 504.79 B
1.89 -0.02 (problem of R-) 72.65 493.79 B
1.89 -0.02 (tree-based inde) 132.83 493.79 B
1.89 -0.02 (x structures is the) 195.08 493.79 B
1.76 -0.02 (o) 72.65 482.79 B
1.76 -0.02 (v) 77.48 482.79 B
1.76 -0.02 (erlap of the bounding box) 82.31 482.79 B
1.76 -0.02 (es in the directory) 192 482.79 B
1.76 -0.02 (,) 268.17 482.79 B
-0.71 -0.02 (which increases with gro) 72.65 471.79 B
-0.71 -0.02 (wing dimension. T) 169.47 471.79 B
-0.71 -0.02 (o a) 242.18 471.79 B
-0.71 -0.02 (v) 253.15 471.79 B
-0.71 -0.02 (oid) 257.93 471.79 B
0.4 -0.02 (this problem, we introduce a ne) 72.65 460.79 B
0.4 -0.02 (w or) 199.88 460.79 B
0.4 -0.02 (g) 218.07 460.79 B
0.4 -0.02 (anization of) 223 460.79 B
-0.81 -0.02 (the directory which uses a split algorithm minimiz-) 72.65 449.79 B
-0.53 -0.02 (ing o) 72.65 438.79 B
-0.53 -0.02 (v) 92.15 438.79 B
-0.53 -0.02 (erlap and additionally utilizes the concept of) 96.98 438.79 B
-0.25 -0.02 (supernodes. The basic idea of o) 72.65 427.79 B
-0.25 -0.02 (v) 196.7 427.79 B
-0.25 -0.02 (erlap-minimizing) 201.53 427.79 B
-0.12 -0.02 (split and supernodes is to k) 72.65 416.79 B
-0.12 -0.02 (eep the directory as hi-) 179.98 416.79 B
-0.92 -0.02 (erarchical as possible, and at the same time to a) 72.65 405.79 B
-0.92 -0.02 (v) 253.15 405.79 B
-0.92 -0.02 (oid) 257.93 405.79 B
-1.01 -0.02 (splits in the directory that w) 72.65 394.79 B
-1.01 -0.02 (ould result in high o) 178.83 394.79 B
-1.01 -0.02 (v) 254.78 394.79 B
-1.01 -0.02 (er-) 259.61 394.79 B
1.33 -0.02 (lap. Our e) 72.65 383.79 B
1.33 -0.02 (xperiments sho) 114.66 383.79 B
1.33 -0.02 (w that for high-dimen-) 176.29 383.79 B
-0.9 -0.02 (sional data, the X-) 72.65 372.79 B
-0.9 -0.02 (tree outperforms the well-kno) 142.87 372.79 B
-0.9 -0.02 (wn) 258.47 372.79 B
1.35 -0.02 (R*-) 72.65 361.79 B
1.35 -0.02 (tree and the TV-) 87.59 361.79 B
1.35 -0.02 (tree by up to tw) 157.12 361.79 B
1.35 -0.02 (o orders of) 224.85 361.79 B
-0.02 (mag) 72.65 350.79 S
-0.02 (nitude.) 89.81 350.79 S
0 12 Q
(1.) 54.65 317.45 T
(Introduction) 72.65 317.45 T
1 10 Q
1.96 -0.02 (In many applications, indexing of high-dimensional) 72.65 298.79 B
-0.05 -0.02 (data has become increasingly important. In multimedia da-) 54.65 287.79 B
1.57 -0.02 (tabases, for example, the multimedia objects are usually) 54.65 276.79 B
0.06 -0.02 (mapped to feature vectors in some high-dimensional space) 54.65 265.79 B
-0.74 -0.02 (and queries are processed against a database of those feature) 54.65 254.79 B
-0.87 -0.02 (vectors [Fal) 54.65 243.79 B
-0.87 -0.02 (94]. Similar approaches are taken in many other) 103.51 243.79 B
0.38 -0.02 (areas including CAD [MG) 54.65 232.79 B
0.38 -0.02 (93], molecular biology \050for the) 164.17 232.79 B
0.85 -0.02 (docking of molecules\051 [SBK) 54.65 221.79 B
0.85 -0.02 (92], string matching and se-) 173.87 221.79 B
306.65 105.95 540.65 578.45 R
7 X
V
0 X
1.36 -0.02 (quence alignment [AGMM) 306.65 571.79 B
1.36 -0.02 (90], etc. Examples of feature) 420.27 571.79 B
2.25 -0.02 (vectors are color histograms [SH) 306.65 560.79 B
2.25 -0.02 (94], shape descriptors) 449.11 560.79 B
-0.61 -0.02 ([Jag) 306.65 549.79 B
-0.61 -0.02 (91, MG) 325.71 549.79 B
-0.61 -0.02 (95], Fourier vectors [WW) 358.57 549.79 B
-0.61 -0.02 (80], text descriptors) 462.58 549.79 B
1.01 -0.02 ([Kuk) 306.65 538.79 B
1.01 -0.02 (92], etc. In some applications, the mapping process) 329.6 538.79 B
-0.1 -0.02 (does not yield point objects, but extended spatial objects in) 306.65 527.79 B
-0.81 -0.02 (high-dimensional space [MN) 306.65 516.79 B
-0.81 -0.02 (95]. In many of the mentioned) 423.64 516.79 B
-0.65 -0.02 (applications, the databases are very large and consist of mil-) 306.65 505.79 B
0.05 -0.02 (lions of data objects with several tens to a few hundreds of) 306.65 494.79 B
0.23 -0.02 (dimensions. For querying these databases, it is essential to) 306.65 483.79 B
-0.09 -0.02 (use appropriate indexing techniques which provide an effi-) 306.65 472.79 B
-0.77 -0.02 (cient access to high-dimensional data. The goal of this paper) 306.65 461.79 B
1.76 -0.02 (is to demonstrate the limits of currently available index) 306.65 450.79 B
-0.21 -0.02 (structures, and present a new index structure which consid-) 306.65 439.79 B
5.19 -0.02 (erably improves the performance in indexing high-) 306.65 428.79 B
-0.5 -0.02 (dimen) 306.65 417.79 B
-0.5 -0.02 (sional data.) 331.55 417.79 B
-0.92 -0.02 (Our approach is motivated by an examination of R-) 324.65 401.04 B
-0.92 -0.02 (tree-) 522.43 401.04 B
0.13 -0.02 (based index structures. One major reason for using R-) 306.65 390.04 B
0.13 -0.02 (tree-) 522.43 390.04 B
-0.86 -0.02 (based index structures is that we have to index not only point) 306.65 379.04 B
0.06 -0.02 (data but also extended spatial data, and R-) 306.65 368.04 B
0.06 -0.02 (tree-based index) 475.09 368.04 B
-0.93 -0.02 (structures are well suited for both types of data. In contrast to) 306.65 357.04 B
1.33 -0.02 (most other index structures \050such as kdB-) 306.65 346.04 B
1.33 -0.02 (trees [Rob) 479.91 346.04 B
1.33 -0.02 (81],) 524.9 346.04 B
1.35 -0.02 (grid files [NHS) 306.65 335.04 B
1.35 -0.02 (84], and their variants [see e.g. SK) 373.18 335.04 B
1.35 -0.02 (90]\051,) 521.59 335.04 B
-0.48 -0.02 (R-) 306.65 324.04 B
-0.48 -0.02 (tree-based index structures do not need point transforma-) 316.61 324.04 B
1.66 -0.02 (tions to store spatial data and therefore provide a better) 306.65 313.04 B
-0.5 -0.02 (spa) 306.65 302.04 B
-0.5 -0.02 (tial clustering.) 319.92 302.04 B
2.33 -0.02 (Some previous work on indexing high-dimensional) 324.65 285.29 B
0.39 -0.02 (data has been done, mainly focussing on two different ap-) 306.65 274.29 B
-0.77 -0.02 (proaches. The first approach is based on the observation that) 306.65 263.29 B
1.18 -0.02 (real data in high-dimensional space are highly correlated) 306.65 252.29 B
-0.53 -0.02 (and clustered, and therefore the data occupy only some sub-) 306.65 241.29 B
1.13 -0.02 (space of the high-dimensional space. Algorithms such as) 306.65 230.29 B
-0.14 -0.02 (Fastmap [FL) 306.65 219.29 B
-0.14 -0.02 (95], multidimensional scaling [KW) 360.16 219.29 B
-0.14 -0.02 (78], prin-) 503.22 219.29 B
3.16 -0.02 (cipal component analysis [DE) 306.65 208.29 B
3.16 -0.02 (82], and factor analysis) 438.32 208.29 B
0.03 -0.02 ([Har) 306.65 197.29 B
0.03 -0.02 (67] take advantage of this fact and transform data ob-) 327.37 197.29 B
-0.13 -0.02 (jects into some lower dimensional space which can be effi-) 306.65 186.29 B
1.75 -0.02 (ciently indexed using traditional multidimensional index) 306.65 175.29 B
1.17 -0.02 (structures. A similar approach is proposed in the SS-tree) 306.65 164.29 B
0.16 -0.02 ([WJ) 306.65 153.29 B
0.16 -0.02 (96] which is an R-) 325.73 153.29 B
0.16 -0.02 (tree-based index structure. The SS-) 399.9 153.29 B
-0.32 -0.02 (tree uses ellipsoid bounding regions in a lower dimensional) 306.65 142.29 B
0 -0.02 (space applying a different transformation in each of the di-) 306.65 131.29 B
-0.84 -0.02 (rectory nodes. The second approach is based on the observa-) 306.65 120.29 B
-0.66 -0.02 (tion that in most high-dimensional data sets, a small number) 306.65 109.29 B
54.65 105.92 288.65 200.45 R
7 X
V
1 9 Q
0 X
-0.68 -0.02 (Permission to cop) 54.65 194.45 B
-0.68 -0.02 (y without fee all or part of this material is granted) 117.4 194.45 B
-0.56 -0.02 (pro) 54.65 185.45 B
-0.56 -0.02 (vided that the copies are not made or distrib) 66.46 185.45 B
-0.56 -0.02 (uted for direct com-) 218.96 185.45 B
-0.12 -0.02 (mercial adv) 54.65 176.45 B
-0.12 -0.02 (antage, the VLDB cop) 96.34 176.45 B
-0.12 -0.02 (yright notice and the title of the) 176.5 176.45 B
-0.13 -0.02 (publication and its date appear) 54.65 167.45 B
-0.13 -0.02 (, and notice is gi) 163.19 167.45 B
-0.13 -0.02 (v) 221.36 167.45 B
-0.13 -0.02 (en that cop) 225.71 167.45 B
-0.13 -0.02 (ying is) 264.65 167.45 B
0.11 -0.02 (by permission of the V) 54.65 158.45 B
0.11 -0.02 (ery Lar) 136.18 158.45 B
0.11 -0.02 (ge Data Base Endo) 162.23 158.45 B
0.11 -0.02 (wment. T) 230.75 158.45 B
0.11 -0.02 (o cop) 264.49 158.45 B
0.11 -0.02 (y) 284.17 158.45 B
-0.44 -0.02 (otherwise, or to republish, requires a fee and/or special permission) 54.65 149.45 B
-0.02 (from the Endo) 54.65 140.45 S
-0.02 (wment.) 106.18 140.45 S
-0.02 (Proceedings ot the 22nd VLDB Conference) 54.65 119.43 S
-0.02 (Mumbai \050Bombay\051, India, 1996) 54.65 108.92 S
54.65 203.45 288.65 203.45 2 L
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 1 0.6 0 0 0 0.4 1]
[ 0 0.2 0.2 0.8 0.2 0 0]
[ 0.5 0 0 0 0.5 1 1]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54.65 770.95 540.65 780.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 96.95 540.65 744.95 R
V
1 10 Q
0 X
2.82 -0.02 (of the dimensions bears most of the information. The) 54.65 738.29 B
-0.07 -0.02 (TV-) 54.65 727.29 B
-0.07 -0.02 (tree [LJF) 71.25 727.29 B
-0.07 -0.02 (94], for example, organizes the directory in a) 109.85 727.29 B
-0.88 -0.02 (way that only the information needed to distinguish between) 54.65 716.29 B
-0.28 -0.02 (data objects is stored in the directory. This leads to a higher) 54.65 705.29 B
0.83 -0.02 (fanout and a smaller directory, resulting in a better query) 54.65 694.29 B
-0.02 (performance.) 54.65 683.29 S
1.4 -0.02 (For high-dimensional data sets, reducing the dimen-) 72.65 665.94 B
-0.05 -0.02 (sionality is an obvious and important possibility for dimin-) 54.65 654.94 B
-0.57 -0.02 (ishing the dimensionality problem and should be performed) 54.65 643.94 B
1 -0.02 (whenever possible. In many cases, the data sets resulting) 54.65 632.94 B
-0.81 -0.02 (from reducing the dimensionality will still have a quite large) 54.65 621.94 B
-0.57 -0.02 (dimensionality. The remaining dimensions are all relatively) 54.65 610.94 B
0.14 -0.02 (important which means that any efficient indexing method) 54.65 599.94 B
0.26 -0.02 (must guarantee a good selectivity on all those dimensions.) 54.65 588.94 B
0.37 -0.02 (Unfortunately, as we will see in section 2, currently avail-) 54.65 577.94 B
-0.48 -0.02 (able index structures for spatial data such as the R*-) 54.65 566.94 B
-0.48 -0.02 (tree) 257.8 566.94 B
1 8 Q
-0.39 -0.02 (1) 272.71 570.94 B
1 10 Q
-0.48 -0.02 ( do) 276.69 566.94 B
0.44 -0.02 (not adequately support an effective indexing of more than) 54.65 555.94 B
1.92 -0.02 (five dimensions. Our experiments show that the perfor-) 54.65 544.94 B
-0.25 -0.02 (mance of the R*-) 54.65 533.94 B
-0.25 -0.02 (tree is rapidly deteriorating when going to) 122.72 533.94 B
-0.42 -0.02 (higher dimensions. To understand the reason for the perfor-) 54.65 522.94 B
0.39 -0.02 (mance problems, we carry out a detailed evaluation of the) 54.65 511.94 B
2.69 -0.02 (overlap of the bounding boxes in the directory of the) 54.65 500.94 B
2.41 -0.02 (R*-) 54.65 489.94 B
2.41 -0.02 (tree. Our experiments show that the overlap of the) 69.59 489.94 B
1.75 -0.02 (bounding boxes in the directory is rapidly increasing to) 54.65 478.94 B
-0.35 -0.02 (about 90% when increasing the dimensionality to 5. In sub-) 54.65 467.94 B
-0.86 -0.02 (section 3.3, we provide a detailed explanation of the increas-) 54.65 456.94 B
0.04 -0.02 (ing overlap and show that the high overlap is not an R-) 54.65 445.94 B
0.04 -0.02 (tree) 273.74 445.94 B
-0.84 -0.02 (specific problem, but a general problem in indexing high-di-) 54.65 434.94 B
-0.5 -0.02 (mensional data.) 54.65 423.94 B
1.54 -0.02 (Based on our observations, we then develop an im-) 72.65 406.6 B
-0.84 -0.02 (proved index structure for high-dimensional data, the X-) 54.65 395.6 B
-0.84 -0.02 (tree) 273.74 395.6 B
-0.33 -0.02 (\050cf. section) 54.65 384.6 B
-0.33 -0.02 (3\051. The main idea of the X-) 100.99 384.6 B
-0.33 -0.02 (tree is to avoid over-) 207.63 384.6 B
-0.36 -0.02 (lap of bounding boxes in the directory by using a new orga-) 54.65 373.6 B
2.79 -0.02 (nization of the directory which is optimized for high-) 54.65 362.6 B
-0.91 -0.02 (dimensional space. The X-) 54.65 351.6 B
-0.91 -0.02 (tree avoids splits which would re-) 158.62 351.6 B
0.23 -0.02 (sult in a high degree of overlap in the directory. Instead of) 54.65 340.6 B
-0.68 -0.02 (allowing splits that introduce high overlaps, directory nodes) 54.65 329.6 B
-0.65 -0.02 (are extended over the usual block size, resulting in so-called) 54.65 318.6 B
-0.22 -0.02 (supernodes. The supernodes may become large and the lin-) 54.65 307.6 B
-0.84 -0.02 (ear scan of the large supernodes might seem to be a problem.) 54.65 296.6 B
-0.11 -0.02 (The alternative, however, would be to introduce high over-) 54.65 285.6 B
-0.4 -0.02 (lap in the directory which leads to a fast degeneration of the) 54.65 274.6 B
-0.62 -0.02 (filtering selectivity and also makes a sequential search of all) 54.65 263.6 B
-0.88 -0.02 (subnodes necessary with the additional penalty of many ran-) 54.65 252.6 B
-0.4 -0.02 (dom page accesses instead of a much faster sequential read.) 54.65 241.6 B
-0.75 -0.02 (The concept of supernodes has some similarity to the idea of) 54.65 230.6 B
-0.06 -0.02 (oversize shelves) 54.65 219.6 B
-0.06 -0.01 ([GN) 121.95 219.6 B
-0.06 -0.01 (91]. In contrast to supernodes, over-) 144.62 219.6 B
0.73 -0.01 (size shelves are data nodes which are attached to internal) 54.65 208.6 B
-0.04 -0.01 (nodes in order to avoid excessive clipping of large objects.) 54.65 197.6 B
1.06 -0.01 (Additionally, oversize shelves are organized as chains of) 54.65 186.6 B
-0.5 -0.01 (disk pages which cannot be read sequentially.) 54.65 175.6 B
1.13 -0.02 (We implemented the X-) 72.65 158.26 B
1.13 -0.02 (tree index structure and per-) 171.98 158.26 B
0.15 -0.02 (formed a detailed performance evaluation using very large) 54.65 147.26 B
54.65 128.95 288.65 143.93 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 128.95 288.65 143.93 R
7 X
0 0 0 1 0 0 0 K
V
63.65 141.91 207.65 141.91 2 L
V
0.5 H
2 Z
0 X
N
-8.35 24.95 603.65 816.95 C
1 8 Q
0 X
0 0 0 1 0 0 0 K
(1.) 54.65 123.62 T
0.19 (According to [BKSS) 72.65 123.62 P
0.19 (90], the R*-) 141.68 123.62 P
0.19 (tree pro) 180.49 123.62 P
0.19 (vides a consistently better) 205.21 123.62 P
0.4 (performance than the R-) 72.65 115.62 P
0.4 (tree [Gut) 151.81 115.62 P
0.4 (84] and R) 182.86 115.62 P
0.4 (+) 215.21 119.62 P
0.4 (-tree [SRF) 219.72 115.62 P
0.4 (87] o) 255.66 115.62 P
0.4 (v) 272.6 115.62 P
0.4 (er a) 276.48 115.62 P
-0.07 (wide range of data sets and query types. In the rest of this paper) 72.65 107.62 P
-0.07 (, we) 275.39 107.62 P
(therefore restrict ourselv) 72.65 99.62 T
(es to the R*-) 151.17 99.62 T
(tree.) 191.83 99.62 T
1 10 Q
-0.43 -0.02 (amounts \050up to 100) 306.65 517.79 B
-0.43 -0.02 (MBytes\051 of randomly generated as well) 384.97 517.79 B
0.22 -0.02 (as real data \050point data and extended spatial data\051. Our ex-) 306.65 506.79 B
0.74 -0.02 (periments show that on high-dimensional data, the X-) 306.65 495.79 B
0.74 -0.02 (tree) 525.74 495.79 B
-0.07 -0.02 (outperforms the TV-) 306.65 484.79 B
-0.07 -0.02 (tree and the R*-) 388.89 484.79 B
-0.07 -0.02 (tree by orders of mag-) 452.51 484.79 B
0.19 -0.02 (nitude \050cf.) 306.65 473.79 B
0.19 -0.02 (section) 350.2 473.79 B
0.19 -0.02 (4\051. For dimensionality larger than 2, the) 380.87 473.79 B
-0.76 -0.02 (X-) 306.65 462.79 B
-0.76 -0.02 (tree is up to 450 times faster than the R*-) 317.16 462.79 B
-0.76 -0.02 (tree and between) 474.73 462.79 B
-0.28 -0.02 (4 and 12 times faster than the TV-) 306.65 451.79 B
-0.28 -0.02 (tree. The X-) 440.93 451.79 B
-0.28 -0.02 (tree also pro-) 488.73 451.79 B
-0.13 -0.02 (vides much faster insertion times \050about 8 times faster than) 306.65 440.79 B
-0.5 -0.02 (the R*-) 306.65 429.79 B
-0.5 -0.02 (tree and about 30 times faster than the TV-) 335.73 429.79 B
-0.5 -0.02 (tree\051.) 502.53 429.79 B
0 12 Q
(2.) 306.65 396.53 T
(Problems of \050R-) 324.65 396.53 T
(tree-based\051 Index) 405.96 396.53 T
(Structures in High-Dimensional Space) 324.65 380.93 T
1 10 Q
2.92 (In our performance e) 324.65 356.74 P
2.92 (v) 417.29 356.74 P
2.92 (aluation of the R*-) 422.04 356.74 P
2.92 (tree, we) 506.08 356.74 P
-0.57 (found that the performance deteriorates rapidly when going) 306.65 345.74 P
-0.21 (to higher dimensions \050cf.) 306.65 334.74 P
-0.21 (Figure 1) 408.29 334.74 P
-0.21 (\051. Ef) 441.69 334.74 P
-0.21 (fects such as a lo) 459 334.74 P
-0.21 (wer) 525.66 334.74 P
-0.2 (f) 306.65 323.74 P
-0.2 (anout in higher dimensions do not e) 309.88 323.74 P
-0.2 (xplain this f) 451.85 323.74 P
-0.2 (act. In try-) 499.12 323.74 P
0.69 (ing to understand the ef) 306.65 312.74 P
0.69 (fects that lead to the performance) 403.61 312.74 P
-0.14 (problems, we performed a detailed e) 306.65 301.74 P
-0.14 (v) 451.75 301.74 P
-0.14 (aluation of important) 456.5 301.74 P
0.14 (characteristics of the R*-) 306.65 290.74 P
0.14 (tree and found that the o) 407.33 290.74 P
0.14 (v) 505.38 290.74 P
0.14 (erlap in) 510.23 290.74 P
1.25 (the directory is increasing v) 306.65 279.74 P
1.25 (ery rapidly with gro) 422.58 279.74 P
1.25 (wing di-) 505.79 279.74 P
0.49 (mensionality of the data. Ov) 306.65 268.74 P
0.49 (erlap in the directory directly) 422.05 268.74 P
-0.62 (corresponds to the query performance since e) 306.65 257.74 P
-0.62 (v) 484.27 257.74 P
-0.62 (en for simple) 489.12 257.74 P
0.56 (point queries multiple paths ha) 306.65 246.74 P
0.56 (v) 432.03 246.74 P
0.56 (e to be follo) 436.88 246.74 P
0.56 (wed. Ov) 486.36 246.74 P
0.56 (erlap) 520.66 246.74 P
0.61 (in the directory is a relati) 306.65 235.74 P
0.61 (v) 409.71 235.74 P
0.61 (ely imprecise term and there is) 414.56 235.74 P
-0.02 (no generally accepted de\336nition especially for the high-di-) 306.65 224.74 P
-0.34 (mensional case. In the follo) 306.65 213.74 P
-0.34 (wing, we therefore pro) 415.28 213.74 P
-0.34 (vide def-) 505.17 213.74 P
(initions of o) 306.65 202.74 T
(v) 354.84 202.74 T
(erlap.) 359.69 202.74 T
0 11.6 Q
(2.1) 306.65 175.74 T
(Definition of Overlap) 328.65 175.74 T
1 10 Q
-0.6 -0.02 (Intuitively, overlap is the percentage of the volume that) 324.65 155.29 B
-0.15 -0.02 (is covered by more than one directory hyperrectangle. This) 306.65 144.29 B
0.93 -0.02 (intuitive definition of overlap is directly correlated to the) 306.65 133.29 B
0.51 -0.02 (query performance since in processing queries, overlap of) 306.65 122.29 B
0.72 -0.02 (directory nodes results in the necessity to follow multiple) 306.65 111.29 B
-0.5 -0.02 (paths, even for point queries.) 306.65 100.29 B
306.65 96.95 540.65 744.95 C
308.02 524.45 539.28 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
308.02 542.45 540.25 569.45 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Figure 1: Performance of the R-) 347.36 561.32 T
(tree) 484.26 561.32 T
(Depending on the Dimension \050Real Data\051) 336.77 549.32 T
0 0 0 496 350 227.01 160.19 311.36 581.98 FMBEGINEPSF
%%BeginDocument: /nfs/malaka/users1/wiss/berchtol/final/rtree_performance.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: Informix Wingz Version 1.1b
%%CreationDate: Wed Feb 21 14:22:02 1996
%%For: Daniel Keim (daniel)
%%BoundingBox: 0 0 496 350
%%Pages: (atend)
%%EndComments


%%BeginProlog
/AC /arc load def
/AN /arcn load def
/AT /arcto load def
/CL /clip load def
/CN /concat load def
/CP /closepath load def
/CR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP CL NP } bind def
/DL { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y2 LT SP } bind def
/DR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP } bind def
/DS { scrfreq scrang scrproc cvx setscreen } bind def
/EC /eoclip load def
/EF /eofill load def
/FL /fill load def
/GS /gsave load def
/GR /grestore load def
/LT /lineto load def
/LW /setlinewidth load def
/MOF { /uid exch def /sw exch def /nfn exch def /bfn exch def /bfd bfn findfont def /nent bfd maxlength 1 add def bfd
/UniqueID known not { /nent nent 1 add def } if /ofd nent dict def bfd { exch dup /FID ne { exch ofd 3 1 roll put } { pop pop } ifelse } forall
ofd /FontName nfn put ofd /PaintType get 0 eq { ofd /PaintType 2 put } if ofd /StrokeWidth sw put ofd /UniqueID uid put nfn ofd definefont pop } bind def
/MT /moveto load def
/NP /newpath load def
/RE { /nfn exch def /bfn exch def /bfd bfn findfont def /nf bfd maxlength dict def bfd { exch dup /FID ne {dup /Encoding eq {exch dup length array copy
nf 3 1 roll put } {exch nf 3 1 roll put} ifelse } {pop pop} ifelse } forall bfn (Symbol) ne { nf /FontName nfn put vect aload pop vect length 2 idiv {nf /Encoding get 3 1 roll put} repeat }
if nfn nf definefont pop } bind def
/RL /rlineto load def
/RM /rmoveto load def
/RO /rotate load def
/SF { /s exch def /f exch def f findfont [s 0 0 s neg 0 0 ] makefont setfont } bind def
/SG /setgray load def
/SH /show load def
/SL /scale load def
/SK /stroke load def
/SP /strokepath load def
/SC /setrgbcolor load def
/SD { /stl exch def /hud exch def /sz exch def /udof exch def /sof exch def /uw exch def /str exch def /len str stringwidth pop def
currentrgbcolor /blue exch def /green exch def /red exch def 0.333 SG GS sof 0 RM str SH hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW sof udof RM len 0
RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def sof yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if
SK GR } if red green blue SC str stringwidth pop /x exch def /xoff sof x add def /yoff sof neg def xoff neg yoff RM str SH
hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW 0 udof RM len 0 RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof
off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if GR str stringwidth pop sof RM } bind def
/CF { /cliptype exch def /pndex exch def /bgb exch def /bgg exch def /bgr exch def /fgb exch def /fgg exch def /fgr exch def GS 4.000 4.000 SL pathbbox 
/ury exch cvi def /urx exch cvi def /lly exch cvi def /llx exch cvi def /yoff lly 8 mod def /xoff llx 8 mod def /iy lly yoff sub def /ix llx xoff sub def /width urx llx sub 1 add xoff add def
 /height ury lly sub 1 add yoff add def /pdata pats pndex get def /imatrix [1 0 0 1 0 0] def /NullProc {} bind def cliptype cvx exec bgr bgg bgb SC FL fgr fgg fgb SC ix iy TR 0 64
height { /yoff exch def 0 64 width { /xoff exch def GS xoff yoff TR 64 64 true imatrix pdata NullProc imagemask GR } for } for GR } bind def
/ST { /stl exch def /hud exch def /sz exch def /udof exch def /uw exch def /str exch def /len str stringwidth pop def hud 1 eq { GS stl 0 eq { uw LW 0 udof RM len 0 RL } if stl
4 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if str SH } bind def
/TR /translate load def
/vect [ 8#260  /Adieresis 8#265  /Aring 8#276  /Ccedilla 8#300  /Eacute 8#311 /Ntilde 8#314  /Odieresis 8#321  /Udieresis 8#322  /aacute 8#323 /agrave  8#324  /acircumflex 8#325  /adieresis 8#326  /atilde
8#327  /aring 8#330  /ccedilla  8#331  /eacute 8#332  /egrave 8#333  /ecircumflex 8#334  /edieresis 8#335  /iacute  8#336  /igrave 8#337  /icircumflex 8#340  /idieresis 8#342  /ntilde 8#344  /oacute
8#345  /ograve 8#346  /ocircumflex 8#347  /odieresis 8#354  /otilde 8#355  /uacute  8#356  /ugrave 8#357  /ucircumflex 8#360  /udieresis 8#362  /Agrave 8#363  /Atilde  8#364  /Otilde 8#366  /ydieresis
8#367  /Ydieresis 8#374  /Acircumflex  8#375  /Ecircumflex 8#376  /Aacute 8#377  /Edieresis 8#177  /Egrave 8#200  /Iacute  8#201  /Icircumflex 8#202  /Idieresis 8#203  /Igrave 8#204  /Oacute 8#205  /Ocircumflex
8#206  /Ograve 8#207  /Uacute 8#210  /Ucircumflex 8#211  /Ugrave 8#365  /dotlessi ]def
/pats [<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFFDDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777>
<AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555>
<5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF>
<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>
<EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777>
<88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888>
<B1B1B1B1B1B1B1B1303030303030303003030303030303031B1B1B1B1B1B1B1BD8D8D8D8D8D8D8D8C0C0C0C0C0C0C0C00C0C0C0C0C0C0C0C8D8D8D8D8D8D8D8D>
<80808080808080801010101010101010020202020202020220202020202020200101010101010101080808080808080840404040404040400404040404040404>
<FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888>
<FFFFFFFFFFFFFFFF808080808080808080808080808080808080808080808080FFFFFFFFFFFFFFFF080808080808080808080808080808080808080808080808>
<80808080808080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080804040404040404040202020202020202000000000000000000202020202020202040404040404040408080808080808080000000000000000>
<82828282828282824444444444444444393939393939393944444444444444448282828282828282010101010101010101010101010101010101010101010101>
<F8F8F8F8F8F8F8F87474747474747474222222222222222247474747474747478F8F8F8F8F8F8F8F171717171717171722222222222222227171717171717171>
<5555555555555555A0A0A0A0A0A0A0A04040404040404040404040404040404055555555555555550A0A0A0A0A0A0A0A04040404040404040404040404040404>
<20202020202020205050505050505050888888888888888888888888888888888888888888888888888888888888888805050505050505050202020202020202>
<BFBFBFBFBFBFBFBF0000000000000000BFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0>
<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080800000000000000000080808080808080800000000000000008080808080808080000000000000000008080808080808080000000000000000>
<88888888888888880000000000000000222222222222222200000000000000008888888888888888000000000000000022222222222222220000000000000000>
<88888888888888882222222222222222888888888888888822222222222222228888888888888888222222222222222288888888888888882222222222222222>
<AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000>
<11111111111111112222222222222222444444444444444488888888888888881111111111111111222222222222222244444444444444448888888888888888>
<FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000>
<01010101010101010202020202020202040404040404040408080808080808081010101010101010202020202020202040404040404040408080808080808080>
<AAAAAAAAAAAAAAAA0000000000000000808080808080808000000000000000008888888888888888000000000000000080808080808080800000000000000000>
<FFFFFFFFFFFFFFFF8080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080>
<08080808080808081C1C1C1C1C1C1C1C2222222222222222C1C1C1C1C1C1C1C18080808080808080010101010101010102020202020202020404040404040404>
<888888888888888814141414141414142222222222222222414141414141414188888888888888880000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<4040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000004040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000>
<03030303030303038484848484848484484848484848484830303030303030300C0C0C0C0C0C0C0C020202020202020201010101010101010101010101010101>
<8080808080808080808080808080808041414141414141413E3E3E3E3E3E3E3E080808080808080808080808080808081414141414141414E3E3E3E3E3E3E3E3>
<101010101010101020202020202020205454545454545454AAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFF020202020202020204040404040404040808080808080808>
<777777777777777789898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F77777777777777779898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8>
<0000000000000000080808080808080814141414141414142A2A2A2A2A2A2A2A55555555555555552A2A2A2A2A2A2A2A14141414141414140808080808080808> ] def
/BEPSF { /IS save def /dcnt countdictstack def /opcnt count 1 sub def userdict begin /showpage {} def 0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit [] 0 setdash newpath } bind def
/EEPSF { count opcnt sub {pop} repeat countdictstack dcnt sub {end} repeat IS restore } bind def
%%EndProlog

%%Page: 1 1
save
currentscreen /scrproc exch cvlit def /scrang exch def /scrfreq exch def
2 setlinecap
0 350 TR
[1 0 0 -1 0 0] CN
0.250 0.250 SL
1.0 LW
GS
0 0 1985 1400 CR
GS
0 0 1985 1400 CR
GS
0 0 1985 1400 CR
/Helvetica /Helvetica-Wingz RE
/Helvetica-Wingz 48.000 SF
1.000 1.000 1.000 SC
0 0 1984 1399 DR
FL
0.000 0.000 0.000 SC
8.00 LW
4 4 1980 1395 DR
SP
FL
1.000 1.000 1.000 SC
56 56 1928 1343 DR
FL
364 128 1852 1043 DR
FL
972 1199 1244 1295 DR
FL
0.000 0.000 0.000 SC
996 1271 MT
(dimension) SH
470 1043 MT
1.00 LW
470 1043 470 1061 DL
FL
364 1043 MT
364 1043 364 1079 DL
FL
350 1151 MT
(2) SH
683 1043 MT
683 1043 683 1061 DL
FL
577 1043 MT
0.000 0.000 1.000 SC
577 1043 577 128 DL
FL
577 1043 MT
0.000 0.000 0.000 SC
577 1043 577 1079 DL
FL
563 1151 MT
(4) SH
895 1043 MT
895 1043 895 1061 DL
FL
789 1043 MT
0.000 0.000 1.000 SC
789 1043 789 128 DL
FL
789 1043 MT
0.000 0.000 0.000 SC
789 1043 789 1079 DL
FL
775 1151 MT
(6) SH
1108 1043 MT
1108 1043 1108 1061 DL
FL
1002 1043 MT
0.000 0.000 1.000 SC
1002 1043 1002 128 DL
FL
1002 1043 MT
0.000 0.000 0.000 SC
1002 1043 1002 1079 DL
FL
988 1151 MT
(8) SH
1321 1043 MT
1321 1043 1321 1061 DL
FL
1214 1043 MT
0.000 0.000 1.000 SC
1214 1043 1214 128 DL
FL
1214 1043 MT
0.000 0.000 0.000 SC
1214 1043 1214 1079 DL
FL
1186 1151 MT
(10) SH
1533 1043 MT
1533 1043 1533 1061 DL
FL
1427 1043 MT
0.000 0.000 1.000 SC
1427 1043 1427 128 DL
FL
1427 1043 MT
0.000 0.000 0.000 SC
1427 1043 1427 1079 DL
FL
1399 1151 MT
(12) SH
1746 1043 MT
1746 1043 1746 1061 DL
FL
1639 1043 MT
0.000 0.000 1.000 SC
1639 1043 1639 128 DL
FL
1639 1043 MT
0.000 0.000 0.000 SC
1639 1043 1639 1079 DL
FL
1611 1151 MT
(14) SH
1852 1043 MT
1852 1043 1852 1079 DL
FL
1824 1151 MT
(16) SH
1.000 1.000 1.000 SC
104 294 200 878 DR
FL
0.000 0.000 0.000 SC
GS
176 854 MT
270 RO
(Total Search Time \050sec\051) SH
GR
364 1023 MT
364 1023 346 1023 DL
FL
364 1002 MT
364 1002 346 1002 DL
FL
364 982 MT
364 982 346 982 DL
FL
364 962 MT
364 962 346 962 DL
FL
364 1043 MT
364 1043 328 1043 DL
FL
276 1067 MT
(0) SH
364 921 MT
364 921 346 921 DL
FL
364 901 MT
364 901 346 901 DL
FL
364 880 MT
364 880 346 880 DL
FL
364 860 MT
364 860 346 860 DL
FL
364 941 MT
0.000 0.000 1.000 SC
364 941 1852 941 DL
FL
364 941 MT
0.000 0.000 0.000 SC
364 941 328 941 DL
FL
276 965 MT
(5) SH
364 819 MT
364 819 346 819 DL
FL
364 799 MT
364 799 346 799 DL
FL
364 779 MT
364 779 346 779 DL
FL
364 758 MT
364 758 346 758 DL
FL
364 840 MT
0.000 0.000 1.000 SC
364 840 1852 840 DL
FL
364 840 MT
0.000 0.000 0.000 SC
364 840 328 840 DL
FL
248 864 MT
(10) SH
364 718 MT
364 718 346 718 DL
FL
364 697 MT
364 697 346 697 DL
FL
364 677 MT
364 677 346 677 DL
FL
364 657 MT
364 657 346 657 DL
FL
364 738 MT
0.000 0.000 1.000 SC
364 738 1852 738 DL
FL
364 738 MT
0.000 0.000 0.000 SC
364 738 328 738 DL
FL
248 762 MT
(15) SH
364 616 MT
364 616 346 616 DL
FL
364 596 MT
364 596 346 596 DL
FL
364 575 MT
364 575 346 575 DL
FL
364 555 MT
364 555 346 555 DL
FL
364 636 MT
0.000 0.000 1.000 SC
364 636 1852 636 DL
FL
364 636 MT
0.000 0.000 0.000 SC
364 636 328 636 DL
FL
248 660 MT
(20) SH
364 514 MT
364 514 346 514 DL
FL
364 494 MT
364 494 346 494 DL
FL
364 474 MT
364 474 346 474 DL
FL
364 453 MT
364 453 346 453 DL
FL
364 535 MT
0.000 0.000 1.000 SC
364 535 1852 535 DL
FL
364 535 MT
0.000 0.000 0.000 SC
364 535 328 535 DL
FL
248 559 MT
(25) SH
364 413 MT
364 413 346 413 DL
FL
364 392 MT
364 392 346 392 DL
FL
364 372 MT
364 372 346 372 DL
FL
364 352 MT
364 352 346 352 DL
FL
364 433 MT
0.000 0.000 1.000 SC
364 433 1852 433 DL
FL
364 433 MT
0.000 0.000 0.000 SC
364 433 328 433 DL
FL
248 457 MT
(30) SH
364 311 MT
364 311 346 311 DL
FL
364 291 MT
364 291 346 291 DL
FL
364 270 MT
364 270 346 270 DL
FL
364 250 MT
364 250 346 250 DL
FL
364 331 MT
0.000 0.000 1.000 SC
364 331 1852 331 DL
FL
364 331 MT
0.000 0.000 0.000 SC
364 331 328 331 DL
FL
248 355 MT
(35) SH
364 209 MT
364 209 346 209 DL
FL
364 189 MT
364 189 346 189 DL
FL
364 169 MT
364 169 346 169 DL
FL
364 148 MT
364 148 346 148 DL
FL
364 230 MT
0.000 0.000 1.000 SC
364 230 1852 230 DL
FL
364 230 MT
0.000 0.000 0.000 SC
364 230 328 230 DL
FL
248 254 MT
(40) SH
364 128 MT
364 128 328 128 DL
FL
248 152 MT
(45) SH
GS
364 128 1853 1044 CR
364 1040 MT
1.000 0.000 0.000 SC
8.00 LW
364 1040 365 1040 DL
FL
365 1040 366 1040 DL
FL
366 1040 368 1039 DL
FL
368 1039 372 1038 DL
FL
372 1038 376 1037 DL
FL
376 1037 382 1035 DL
FL
382 1035 390 1033 DL
FL
390 1033 399 1030 DL
FL
399 1030 MT
399 1030 411 1027 DL
FL
411 1027 425 1022 DL
FL
425 1022 441 1016 DL
FL
441 1016 459 1008 DL
FL
459 1008 479 997 DL
FL
479 997 501 983 DL
FL
501 983 526 966 DL
FL
526 966 552 945 DL
FL
552 945 581 919 DL
FL
581 919 612 888 DL
FL
612 888 MT
612 888 645 851 DL
FL
645 851 680 810 DL
FL
680 810 718 766 DL
FL
718 766 759 719 DL
FL
759 719 802 671 DL
FL
802 671 849 623 DL
FL
849 623 899 575 DL
FL
899 575 953 528 DL
FL
953 528 1011 485 DL
FL
1011 485 1073 444 DL
FL
1073 444 MT
1073 444 1138 409 DL
FL
1138 409 1207 378 DL
FL
1207 378 1277 351 DL
FL
1277 351 1348 327 DL
FL
1348 327 1418 307 DL
FL
1418 307 1486 290 DL
FL
1486 290 1550 276 DL
FL
1550 276 1610 264 DL
FL
1610 264 1664 255 DL
FL
1664 255 1710 247 DL
FL
1710 247 MT
1710 247 1749 240 DL
FL
1749 240 1779 235 DL
FL
1779 235 1803 231 DL
FL
1803 231 1821 228 DL
FL
1821 228 1834 226 DL
FL
1834 226 1843 224 DL
FL
1843 224 1848 224 DL
FL
1848 224 1851 223 DL
FL
1851 223 1852 223 DL
FL
GR
1852 1043 MT
1852 1043 1852 128 DL
FL
364 128 MT
364 128 1852 128 DL
FL
364 1043 MT
364 1043 1852 1043 DL
FL
364 1043 MT
364 1043 364 128 DL
FL
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
showpage
restore

%%Trailer
%%Pages: 1

%%EndDocument
FMENDEPSF
306.65 96.95 540.65 744.95 C
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 1 0.6 0 0 0 0.4 1]
[ 0 0.2 0.2 0.8 0.2 0 0]
[ 0.5 0 0 0 0.5 1 1]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54.65 770.95 540.65 780.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 96.95 540.65 528.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
0 X
(Definition) 54.65 522.29 T
2 10 Q
(1a) 103.85 522.29 T
1 F
(\050Ov) 116.35 522.29 T
(erlap\051) 131.75 522.29 T
0.91 -0.01 (The overlap of an R-) 54.65 511.29 B
0.91 -0.01 (tree node is the percentage of space) 141.39 511.29 B
1.86 -0.01 (covered by more than one hyperrectangle. If the R-) 54.65 500.29 B
1.86 -0.01 (tree) 273.7 500.29 B
-0.01 -0.01 (node contains n hyperrectangles) 54.65 489.29 B
-0.01 -0.01 (, the overlap) 239.09 489.29 B
-0.01 (may formally be defined as) 54.65 478.29 S
1 12 Q
(.) 218.14 444.95 T
1 9.6 Q
(1) 221.14 449.75 T
1 10 Q
-0.17 -0.02 (The amount of overlap measured in definition 1a is re-) 72.65 409.24 B
0.61 -0.02 (lated to the expected query performance only if the query) 54.65 398.24 B
-0.01 -0.02 (objects \050points, hyperrectangles\051 are distributed uniformly.) 54.65 387.24 B
-0.75 -0.02 (A more accurate definition of overlap needs to take the actu-) 54.65 376.24 B
-0.53 -0.02 (al distribution of queries into account. Since it is impossible) 54.65 365.24 B
0.7 -0.02 (to determine the distribution of queries in advance, in the) 54.65 354.24 B
-0.2 -0.02 (following we will use the distribution of the data as an esti-) 54.65 343.24 B
0.08 -0.02 (mation for the query distribution. This seems to be reason-) 54.65 332.24 B
0.93 -0.02 (able for high-dimensional data since data and queries are) 54.65 321.24 B
-0.46 -0.02 (often clustered in some areas, whereas other areas are virtu-) 54.65 310.24 B
-0.54 -0.02 (ally empty. Overlap in highly populated areas is much more) 54.65 299.24 B
0.27 -0.02 (critical than overlap in areas with a low population. In our) 54.65 288.24 B
2.48 -0.02 (second definition of overlap, the overlapping areas are) 54.65 277.24 B
-0.13 -0.02 (therefore weighted with the number of data objects that are) 54.65 266.24 B
-0.5 -0.02 (located in the area.) 54.65 255.24 B
2 11 Q
(Definition) 54.65 235.51 T
2 10 Q
(1b) 103.85 235.51 T
1 F
( \050W) 113.85 235.51 T
(eighted Ov) 128.32 235.51 T
(erlap\051) 172.33 235.51 T
-0.53 -0.01 (The weighted overlap of an R-) 54.65 224.51 B
-0.53 -0.01 (tree node is the percentage of) 174.16 224.51 B
-0.56 -0.01 (data objects that fall in the overlapping portion of the space.) 54.65 213.51 B
-0.01 (More formally,) 54.65 202.51 S
-0.5 -0.02 (.) 278.7 159.26 B
1 8 Q
-0.4 -0.02 (2) 283.16 163.26 B
54.65 112.95 288.65 127.93 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 112.95 288.65 127.93 R
7 X
0 0 0 1 0 0 0 K
V
63.65 125.91 207.65 125.91 2 L
V
0.5 H
2 Z
0 X
N
-8.35 24.95 603.65 816.95 C
1 8 Q
0 X
0 0 0 1 0 0 0 K
(1.) 54.65 107.62 T
( denotes the v) 80.62 107.62 T
(olume co) 124.67 107.62 T
(v) 154.11 107.62 T
(ered by A.) 157.99 107.62 T
(2.) 54.65 99.62 T
( denotes the number of data elements contained in A) 78.01 99.62 T
1 10 Q
-0.62 -0.02 (In definition 1a, overlap occurring at any point of space) 324.65 522.29 B
0.36 -0.02 (equally contributes to the overall overlap even if only few) 306.65 511.26 B
0.89 -0.02 (data objects fall within the overlapping area. If the query) 306.65 500.24 B
-0.68 -0.02 (points are expected to be uniformly distributed over the data) 306.65 489.22 B
-0.07 -0.02 (space, definition 1a is an appropriate measure which deter-) 306.65 478.19 B
-0.7 -0.02 (mines the expected query performance. If the distribution of) 306.65 467.17 B
-0.97 -0.02 (queries corresponds to the distribution of the data and is non-) 306.65 456.15 B
1.05 -0.02 (uniform, definition 1b corresponds to the expected query) 306.65 445.13 B
-0.01 -0.02 (performance and is therefore more appropriate. Depending) 306.65 434.1 B
-0.53 -0.02 (on the query distribution, we have to choose the appropriate) 306.65 423.08 B
-0.02 (definition.) 306.65 409.39 S
-0.2 -0.02 (So far, we have only considered overlap to be any por-) 324.65 390.06 B
-0.2 -0.02 (tion of space that is covered by more than) 306.65 379.04 B
3 F
-0.2 -0.02 (one) 473.7 379.04 B
1 F
-0.2 -0.02 ( hyperrectan-) 488.08 379.04 B
1.4 -0.02 (gle. In practice however, it is very important how many) 306.65 368.01 B
1.11 -0.02 (hyperrectangles overlap at a certain portion of the space.) 306.65 356.99 B
-0.07 -0.02 (The so-called multi-overlap of an R-) 306.65 345.97 B
-0.07 -0.02 (tree node is defined as) 451.95 345.97 B
-0.94 -0.02 (the sum of overlapping volumes multiplied by the number of) 306.65 334.95 B
0.22 -0.02 (overlapping hyperrectangles relative to the overall volume) 306.65 323.92 B
-0.5 -0.02 (of the considered space.) 306.65 312.9 B
-0.71 -0.02 (In) 324.65 294.9 B
-0.72 (Figure 3) 334.71 294.9 P
-0.71 -0.02 (, we show a two-dimensional example of the) 367.6 294.9 B
1.37 -0.02 (overlap according to definition) 306.65 283.88 B
1.37 -0.02 (1a and the corresponding) 436.21 283.88 B
0.9 -0.02 (multi-overlap. The weighted overlap and weighted multi-) 306.65 272.85 B
-0.97 -0.02 (overlap \050not shown in the figure\051 would correspond to the ar-) 306.65 261.83 B
0.08 -0.02 (eas weighted by the number of data objects that fall within) 306.65 250.81 B
-0.5 -0.02 (the areas.) 306.65 239.79 B
54.65 96.95 288.65 528.95 C
185.36 481.54 239.09 498.24 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10.6 Q
0 X
0 0 0 1 0 0 0 K
(R) 192.34 489.29 T
1 8.5 Q
(1) 199.21 485.67 T
4 10.6 Q
(\274) 208.76 489.29 T
3 F
(R) 220.12 489.29 T
3 8.5 Q
(n) 227 485.67 T
4 10.6 Q
(,) 203.46 489.29 T
({) 186.36 489.29 T
(}) 232.01 489.29 T
54.65 96.95 288.65 528.95 C
-8.35 24.95 603.65 816.95 C
72.65 419.65 218.14 472.22 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(O) 72.15 444.95 T
(v) 79.18 444.95 T
(e) 83.71 444.95 T
(r) 88.23 444.95 T
(l) 92.26 444.95 T
(a) 95.3 444.95 T
(p) 100.33 444.95 T
(R) 182.35 457.75 T
3 7 Q
(i) 188.19 454.85 T
3 9 Q
(R) 201.66 457.75 T
3 7 Q
(j) 208.37 454.85 T
4 9 Q
(\307) 192.38 457.75 T
(\050) 178.6 457.75 T
(\051) 210.95 457.75 T
3 7 Q
(i) 122.57 449.98 T
(j) 128.89 449.98 T
4 F
(,) 124.52 449.98 T
1 F
(1) 143.17 449.98 T
4 F
(\274) 147.21 449.98 T
3 F
(n) 154.75 449.98 T
4 F
({) 139.32 449.98 T
(}) 158.75 449.98 T
(\316) 132.58 449.98 T
3 F
(i) 165.6 449.98 T
(j) 175.76 449.98 T
4 F
(\271) 169.3 449.98 T
(,) 162.11 449.98 T
4 14 Q
(\310) 144.76 456.36 T
3 9 Q
(R) 181.49 438.37 T
3 7 Q
(i) 187.33 435.47 T
(i) 147.25 430.6 T
1 F
(1) 161.54 430.6 T
4 F
(\274) 165.58 430.6 T
3 F
(n) 173.12 430.6 T
4 F
({) 157.68 430.6 T
(}) 177.11 430.6 T
(\316) 150.95 430.6 T
4 14 Q
(\310) 158.49 436.99 T
1 9 Q
(-) 119.07 444.95 T
(-) 120.57 444.95 T
(-) 122.07 444.95 T
(-) 123.57 444.95 T
(-) 125.06 444.95 T
(-) 126.56 444.95 T
(-) 128.06 444.95 T
(-) 129.56 444.95 T
(-) 131.06 444.95 T
(-) 132.56 444.95 T
(-) 134.05 444.95 T
(-) 135.55 444.95 T
(-) 137.05 444.95 T
(-) 138.55 444.95 T
(-) 140.05 444.95 T
(-) 141.55 444.95 T
(-) 143.04 444.95 T
(-) 144.54 444.95 T
(-) 146.04 444.95 T
(-) 147.54 444.95 T
(-) 149.04 444.95 T
(-) 150.54 444.95 T
(-) 152.04 444.95 T
(-) 153.54 444.95 T
(-) 155.03 444.95 T
(-) 156.53 444.95 T
(-) 158.03 444.95 T
(-) 159.53 444.95 T
(-) 161.03 444.95 T
(-) 162.52 444.95 T
(-) 164.02 444.95 T
(-) 165.52 444.95 T
(-) 167.02 444.95 T
(-) 168.52 444.95 T
(-) 170.02 444.95 T
(-) 171.52 444.95 T
(-) 173.01 444.95 T
(-) 174.51 444.95 T
(-) 176.01 444.95 T
(-) 177.51 444.95 T
(-) 179.01 444.95 T
(-) 180.51 444.95 T
(-) 182.01 444.95 T
(-) 183.5 444.95 T
(-) 185 444.95 T
(-) 186.5 444.95 T
(-) 188 444.95 T
(-) 189.5 444.95 T
(-) 191 444.95 T
(-) 192.49 444.95 T
(-) 193.99 444.95 T
(-) 195.49 444.95 T
(-) 196.99 444.95 T
(-) 198.49 444.95 T
(-) 199.99 444.95 T
(-) 201.49 444.95 T
(-) 202.99 444.95 T
(-) 204.48 444.95 T
(-) 205.98 444.95 T
(-) 207.48 444.95 T
(-) 208.98 444.95 T
(-) 210.48 444.95 T
(-) 211.98 444.95 T
(-) 213.47 444.95 T
(-) 214.46 444.95 T
(=) 109.32 444.95 T
119.97 448.6 119.97 463.62 2 L
0.41 H
2 Z
N
121.27 448.6 121.27 463.62 2 L
N
214.85 448.6 214.85 463.62 2 L
N
216.15 448.6 216.15 463.62 2 L
N
144.64 430.65 144.64 445.68 2 L
N
145.95 430.65 145.95 445.68 2 L
N
190.17 430.65 190.17 445.68 2 L
N
191.48 430.65 191.48 445.68 2 L
N
-8.35 24.95 603.65 816.95 C
54.65 96.95 288.65 528.95 C
64.65 103.37 80.62 115.37 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(A) 69.61 107.62 T
66.55 106.27 66.55 114.37 2 L
0.41 H
2 Z
N
67.85 106.27 67.85 114.37 2 L
N
76.01 106.27 76.01 114.37 2 L
N
77.32 106.27 77.32 114.37 2 L
N
54.65 96.95 288.65 528.95 C
-8.35 24.95 603.65 816.95 C
56.15 127.93 278.7 193.44 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(W) 55.06 159.26 T
(e) 63.09 159.26 T
(i) 67.61 159.26 T
(g) 70.64 159.26 T
(h) 75.67 159.26 T
(t) 80.71 159.26 T
(e) 83.74 159.26 T
(d) 88.26 159.26 T
(O) 93.29 159.26 T
(v) 100.32 159.26 T
(e) 104.85 159.26 T
(r) 109.37 159.26 T
(l) 113.4 159.26 T
(a) 116.44 159.26 T
(p) 121.47 159.26 T
(p) 148.05 176.05 T
(p) 159.63 176.05 T
(R) 239.85 176.05 T
3 7 Q
(i) 245.69 173.15 T
3 9 Q
(R) 259.16 176.05 T
3 7 Q
(j) 265.87 173.15 T
4 9 Q
(\307) 249.88 176.05 T
(\050) 236.1 176.05 T
(\051) 268.45 176.05 T
3 7 Q
(i) 180.07 168.28 T
(j) 186.38 168.28 T
4 F
(,) 182.02 168.28 T
1 F
(1) 200.67 168.28 T
4 F
(\274) 204.71 168.28 T
3 F
(n) 212.25 168.28 T
4 F
({) 196.82 168.28 T
(}) 216.24 168.28 T
(\316) 190.08 168.28 T
3 F
(i) 223.1 168.28 T
(j) 233.25 168.28 T
4 F
(\271) 226.8 168.28 T
(,) 219.6 168.28 T
4 14 Q
(\310) 202.26 174.67 T
4 9 Q
(\316) 171.41 176.05 T
(\356) 142.41 166.76 T
(\376) 272.66 166.76 T
(\355) 142.41 174.48 T
(\375) 272.66 174.48 T
(\354) 142.41 182.19 T
(\374) 272.66 182.19 T
3 F
(p) 172.72 143.69 T
(p) 184.31 143.69 T
(R) 238.99 143.69 T
3 7 Q
(i) 244.83 140.79 T
(i) 204.75 135.92 T
1 F
(1) 219.04 135.92 T
4 F
(\274) 223.08 135.92 T
3 F
(n) 230.61 135.92 T
4 F
({) 215.18 135.92 T
(}) 234.61 135.92 T
(\316) 208.44 135.92 T
4 14 Q
(\310) 215.99 142.31 T
4 9 Q
(\316) 196.09 143.69 T
(\356) 167.09 134.4 T
(\376) 247.99 134.4 T
(\355) 167.09 142.11 T
(\375) 247.99 142.11 T
(\354) 167.09 149.83 T
(\374) 247.99 149.83 T
1 F
(-) 140.21 159.26 T
(-) 141.71 159.26 T
(-) 143.21 159.26 T
(-) 144.71 159.26 T
(-) 146.21 159.26 T
(-) 147.7 159.26 T
(-) 149.2 159.26 T
(-) 150.7 159.26 T
(-) 152.2 159.26 T
(-) 153.7 159.26 T
(-) 155.2 159.26 T
(-) 156.69 159.26 T
(-) 158.19 159.26 T
(-) 159.69 159.26 T
(-) 161.19 159.26 T
(-) 162.69 159.26 T
(-) 164.19 159.26 T
(-) 165.68 159.26 T
(-) 167.18 159.26 T
(-) 168.68 159.26 T
(-) 170.18 159.26 T
(-) 171.68 159.26 T
(-) 173.18 159.26 T
(-) 174.68 159.26 T
(-) 176.18 159.26 T
(-) 177.67 159.26 T
(-) 179.17 159.26 T
(-) 180.67 159.26 T
(-) 182.17 159.26 T
(-) 183.67 159.26 T
(-) 185.17 159.26 T
(-) 186.66 159.26 T
(-) 188.16 159.26 T
(-) 189.66 159.26 T
(-) 191.16 159.26 T
(-) 192.66 159.26 T
(-) 194.16 159.26 T
(-) 195.65 159.26 T
(-) 197.15 159.26 T
(-) 198.65 159.26 T
(-) 200.15 159.26 T
(-) 201.65 159.26 T
(-) 203.15 159.26 T
(-) 204.65 159.26 T
(-) 206.15 159.26 T
(-) 207.64 159.26 T
(-) 209.14 159.26 T
(-) 210.64 159.26 T
(-) 212.14 159.26 T
(-) 213.64 159.26 T
(-) 215.14 159.26 T
(-) 216.63 159.26 T
(-) 218.13 159.26 T
(-) 219.63 159.26 T
(-) 221.13 159.26 T
(-) 222.63 159.26 T
(-) 224.13 159.26 T
(-) 225.62 159.26 T
(-) 227.12 159.26 T
(-) 228.62 159.26 T
(-) 230.12 159.26 T
(-) 231.62 159.26 T
(-) 233.12 159.26 T
(-) 234.62 159.26 T
(-) 236.11 159.26 T
(-) 237.61 159.26 T
(-) 239.11 159.26 T
(-) 240.61 159.26 T
(-) 242.11 159.26 T
(-) 243.61 159.26 T
(-) 245.1 159.26 T
(-) 246.6 159.26 T
(-) 248.1 159.26 T
(-) 249.6 159.26 T
(-) 251.1 159.26 T
(-) 252.6 159.26 T
(-) 254.1 159.26 T
(-) 255.6 159.26 T
(-) 257.09 159.26 T
(-) 258.59 159.26 T
(-) 260.09 159.26 T
(-) 261.59 159.26 T
(-) 263.09 159.26 T
(-) 264.59 159.26 T
(-) 266.08 159.26 T
(-) 267.58 159.26 T
(-) 269.08 159.26 T
(-) 270.58 159.26 T
(-) 272.08 159.26 T
(-) 273.58 159.26 T
(-) 275.08 159.26 T
(-) 275.61 159.26 T
(=) 130.46 159.26 T
154.34 173.8 154.34 181.9 2 L
0.41 H
2 Z
N
141.11 162.9 141.11 192.35 2 L
N
277.31 162.9 277.31 192.35 2 L
N
179.02 141.44 179.02 149.54 2 L
N
165.79 130.54 165.79 159.98 2 L
N
252.63 130.54 252.63 159.98 2 L
N
-8.35 24.95 603.65 816.95 C
54.65 96.95 288.65 528.95 C
64.65 96.95 78.01 107.37 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(A) 68.31 99.62 T
66.55 98.27 66.55 106.37 2 L
0.41 H
2 Z
N
74.71 98.27 74.71 106.37 2 L
N
54.65 96.95 288.65 528.95 C
-8.35 24.95 603.65 816.95 C
306.65 96.95 540.65 528.95 C
307.12 96.95 540.18 236.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
309 101.45 538.5 124.69 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Figure 3: Overlap and Multi-Overlap of) 338.33 118.02 T
(2-dimensional data) 383.05 106.02 T
491.64 142.96 506.63 166.79 R
5 X
V
491.64 182.68 506.63 210.48 R
V
506.63 142.96 521.62 182.68 R
V
491.64 166.79 506.63 182.68 R
3 X
V
482.65 166.79 491.65 178.7 R
5 X
V
365.74 142.96 380.73 166.79 R
3 X
V
380.73 142.96 395.72 182.68 R
V
365.74 182.68 380.73 210.48 R
V
311.78 174.73 335.76 178.7 R
V
335.76 142.96 356.75 166.79 R
V
341.76 174.73 344.76 178.7 R
V
335.76 166.79 341.76 174.73 R
V
335.76 174.73 341.76 178.7 R
V
341.76 182.68 344.76 210.48 R
V
335.76 178.7 341.76 182.68 R
V
341.76 178.7 344.76 182.68 R
V
344.76 166.79 356.75 178.7 R
V
341.76 166.79 344.76 174.73 R
V
344.76 178.7 380.73 182.68 R
V
356.75 166.79 380.73 178.7 R
V
308.78 174.73 344.76 214.45 R
0.5 H
2 Z
0 X
N
311.78 135.01 356.75 178.7 R
N
341.76 166.79 380.73 210.48 R
N
335.76 142.96 395.72 182.68 R
N
437.69 174.92 461.67 178.89 R
5 X
V
461.67 143.15 482.65 166.98 R
V
467.66 174.92 470.66 178.89 R
0 X
V
461.67 166.98 467.66 174.92 R
5 X
V
461.67 174.92 467.66 178.89 R
3 X
V
467.66 182.87 470.66 210.67 R
5 X
V
461.67 178.89 467.66 182.87 R
V
467.66 178.89 470.66 182.87 R
3 X
V
470.66 166.98 482.65 178.89 R
V
467.66 166.98 470.66 174.92 R
V
470.66 178.71 491.65 182.87 R
5 X
V
434.69 174.92 470.66 214.45 R
0 X
N
437.69 135.2 482.65 178.89 R
N
467.66 166.98 506.63 210.67 R
N
461.67 143.15 521.62 182.87 R
N
365.74 135.01 413.7 214.45 R
N
491.64 135.01 536.62 214.45 R
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
306.65 96.95 540.65 528.95 C
-8.35 24.95 603.65 816.95 C
54.65 551.45 540.65 740.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 551.45 540.65 740.45 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 415 335 227.85 136.82 307.23 602.19 FMBEGINEPSF
%%BeginDocument: /nfs/malaka/users1/wiss/berchtol/final/over_real.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: Informix Wingz Version 1.1b
%%CreationDate: Fri Feb 23 11:03:00 1996
%%For: Stefan Berchtold (berchtol)
%%BoundingBox: 0 0 415 335
%%Pages: (atend)
%%EndComments


%%BeginProlog
/AC /arc load def
/AN /arcn load def
/AT /arcto load def
/CL /clip load def
/CN /concat load def
/CP /closepath load def
/CR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP CL NP } bind def
/DL { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y2 LT SP } bind def
/DR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP } bind def
/DS { scrfreq scrang scrproc cvx setscreen } bind def
/EC /eoclip load def
/EF /eofill load def
/FL /fill load def
/GS /gsave load def
/GR /grestore load def
/LT /lineto load def
/LW /setlinewidth load def
/MOF { /uid exch def /sw exch def /nfn exch def /bfn exch def /bfd bfn findfont def /nent bfd maxlength 1 add def bfd
/UniqueID known not { /nent nent 1 add def } if /ofd nent dict def bfd { exch dup /FID ne { exch ofd 3 1 roll put } { pop pop } ifelse } forall
ofd /FontName nfn put ofd /PaintType get 0 eq { ofd /PaintType 2 put } if ofd /StrokeWidth sw put ofd /UniqueID uid put nfn ofd definefont pop } bind def
/MT /moveto load def
/NP /newpath load def
/RE { /nfn exch def /bfn exch def /bfd bfn findfont def /nf bfd maxlength dict def bfd { exch dup /FID ne {dup /Encoding eq {exch dup length array copy
nf 3 1 roll put } {exch nf 3 1 roll put} ifelse } {pop pop} ifelse } forall bfn (Symbol) ne { nf /FontName nfn put vect aload pop vect length 2 idiv {nf /Encoding get 3 1 roll put} repeat }
if nfn nf definefont pop } bind def
/RL /rlineto load def
/RM /rmoveto load def
/RO /rotate load def
/SF { /s exch def /f exch def f findfont [s 0 0 s neg 0 0 ] makefont setfont } bind def
/SG /setgray load def
/SH /show load def
/SL /scale load def
/SK /stroke load def
/SP /strokepath load def
/SC /setrgbcolor load def
/SD { /stl exch def /hud exch def /sz exch def /udof exch def /sof exch def /uw exch def /str exch def /len str stringwidth pop def
currentrgbcolor /blue exch def /green exch def /red exch def 0.333 SG GS sof 0 RM str SH hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW sof udof RM len 0
RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def sof yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if
SK GR } if red green blue SC str stringwidth pop /x exch def /xoff sof x add def /yoff sof neg def xoff neg yoff RM str SH
hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW 0 udof RM len 0 RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof
off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if GR str stringwidth pop sof RM } bind def
/CF { /cliptype exch def /pndex exch def /bgb exch def /bgg exch def /bgr exch def /fgb exch def /fgg exch def /fgr exch def GS 4.000 4.000 SL pathbbox 
/ury exch cvi def /urx exch cvi def /lly exch cvi def /llx exch cvi def /yoff lly 8 mod def /xoff llx 8 mod def /iy lly yoff sub def /ix llx xoff sub def /width urx llx sub 1 add xoff add def
 /height ury lly sub 1 add yoff add def /pdata pats pndex get def /imatrix [1 0 0 1 0 0] def /NullProc {} bind def cliptype cvx exec bgr bgg bgb SC FL fgr fgg fgb SC ix iy TR 0 64
height { /yoff exch def 0 64 width { /xoff exch def GS xoff yoff TR 64 64 true imatrix pdata NullProc imagemask GR } for } for GR } bind def
/ST { /stl exch def /hud exch def /sz exch def /udof exch def /uw exch def /str exch def /len str stringwidth pop def hud 1 eq { GS stl 0 eq { uw LW 0 udof RM len 0 RL } if stl
4 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if str SH } bind def
/TR /translate load def
/vect [ 8#260  /Adieresis 8#265  /Aring 8#276  /Ccedilla 8#300  /Eacute 8#311 /Ntilde 8#314  /Odieresis 8#321  /Udieresis 8#322  /aacute 8#323 /agrave  8#324  /acircumflex 8#325  /adieresis 8#326  /atilde
8#327  /aring 8#330  /ccedilla  8#331  /eacute 8#332  /egrave 8#333  /ecircumflex 8#334  /edieresis 8#335  /iacute  8#336  /igrave 8#337  /icircumflex 8#340  /idieresis 8#342  /ntilde 8#344  /oacute
8#345  /ograve 8#346  /ocircumflex 8#347  /odieresis 8#354  /otilde 8#355  /uacute  8#356  /ugrave 8#357  /ucircumflex 8#360  /udieresis 8#362  /Agrave 8#363  /Atilde  8#364  /Otilde 8#366  /ydieresis
8#367  /Ydieresis 8#374  /Acircumflex  8#375  /Ecircumflex 8#376  /Aacute 8#377  /Edieresis 8#177  /Egrave 8#200  /Iacute  8#201  /Icircumflex 8#202  /Idieresis 8#203  /Igrave 8#204  /Oacute 8#205  /Ocircumflex
8#206  /Ograve 8#207  /Uacute 8#210  /Ucircumflex 8#211  /Ugrave 8#365  /dotlessi ]def
/pats [<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFFDDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777>
<AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555>
<5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF>
<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>
<EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777>
<88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888>
<B1B1B1B1B1B1B1B1303030303030303003030303030303031B1B1B1B1B1B1B1BD8D8D8D8D8D8D8D8C0C0C0C0C0C0C0C00C0C0C0C0C0C0C0C8D8D8D8D8D8D8D8D>
<80808080808080801010101010101010020202020202020220202020202020200101010101010101080808080808080840404040404040400404040404040404>
<FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888>
<FFFFFFFFFFFFFFFF808080808080808080808080808080808080808080808080FFFFFFFFFFFFFFFF080808080808080808080808080808080808080808080808>
<80808080808080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080804040404040404040202020202020202000000000000000000202020202020202040404040404040408080808080808080000000000000000>
<82828282828282824444444444444444393939393939393944444444444444448282828282828282010101010101010101010101010101010101010101010101>
<F8F8F8F8F8F8F8F87474747474747474222222222222222247474747474747478F8F8F8F8F8F8F8F171717171717171722222222222222227171717171717171>
<5555555555555555A0A0A0A0A0A0A0A04040404040404040404040404040404055555555555555550A0A0A0A0A0A0A0A04040404040404040404040404040404>
<20202020202020205050505050505050888888888888888888888888888888888888888888888888888888888888888805050505050505050202020202020202>
<BFBFBFBFBFBFBFBF0000000000000000BFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0>
<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080800000000000000000080808080808080800000000000000008080808080808080000000000000000008080808080808080000000000000000>
<88888888888888880000000000000000222222222222222200000000000000008888888888888888000000000000000022222222222222220000000000000000>
<88888888888888882222222222222222888888888888888822222222222222228888888888888888222222222222222288888888888888882222222222222222>
<AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000>
<11111111111111112222222222222222444444444444444488888888888888881111111111111111222222222222222244444444444444448888888888888888>
<FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000>
<01010101010101010202020202020202040404040404040408080808080808081010101010101010202020202020202040404040404040408080808080808080>
<AAAAAAAAAAAAAAAA0000000000000000808080808080808000000000000000008888888888888888000000000000000080808080808080800000000000000000>
<FFFFFFFFFFFFFFFF8080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080>
<08080808080808081C1C1C1C1C1C1C1C2222222222222222C1C1C1C1C1C1C1C18080808080808080010101010101010102020202020202020404040404040404>
<888888888888888814141414141414142222222222222222414141414141414188888888888888880000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<4040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000004040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000>
<03030303030303038484848484848484484848484848484830303030303030300C0C0C0C0C0C0C0C020202020202020201010101010101010101010101010101>
<8080808080808080808080808080808041414141414141413E3E3E3E3E3E3E3E080808080808080808080808080808081414141414141414E3E3E3E3E3E3E3E3>
<101010101010101020202020202020205454545454545454AAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFF020202020202020204040404040404040808080808080808>
<777777777777777789898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F77777777777777779898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8>
<0000000000000000080808080808080814141414141414142A2A2A2A2A2A2A2A55555555555555552A2A2A2A2A2A2A2A14141414141414140808080808080808> ] def
/BEPSF { /IS save def /dcnt countdictstack def /opcnt count 1 sub def userdict begin /showpage {} def 0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit [] 0 setdash newpath } bind def
/EEPSF { count opcnt sub {pop} repeat countdictstack dcnt sub {end} repeat IS restore } bind def
%%EndProlog

%%Page: 1 1
save
currentscreen /scrproc exch cvlit def /scrang exch def /scrfreq exch def
2 setlinecap
0 335 TR
[1 0 0 -1 0 0] CN
0.250 0.250 SL
1.0 LW
GS
0 0 1662 1341 CR
GS
0 0 1662 1341 CR
GS
0 0 1661 1341 CR
/Helvetica /Helvetica-Wingz RE
/Helvetica-Wingz 48.000 SF
/Helvetica-Wingz 56.000 SF
/Helvetica-Wingz 48.000 SF
1.000 1.000 1.000 SC
0 0 1661 1340 DR
FL
0.000 0.000 0.000 SC
8.00 LW
4 4 1657 1336 DR
SP
FL
1.000 1.000 1.000 SC
56 56 1605 1284 DR
FL
292 128 1529 968 DR
FL
/Helvetica-Wingz 56.000 SF
752 1124 1068 1236 DR
FL
0.000 0.000 0.000 SC
780 1208 MT
(dimension) SH
/Helvetica-Wingz 48.000 SF
380 968 MT
1.00 LW
380 968 380 986 DL
FL
292 968 MT
292 968 292 1004 DL
FL
278 1076 MT
(2) SH
557 968 MT
557 968 557 986 DL
FL
469 968 MT
0.000 0.000 1.000 SC
469 968 469 128 DL
FL
469 968 MT
0.000 0.000 0.000 SC
469 968 469 1004 DL
FL
455 1076 MT
(4) SH
734 968 MT
734 968 734 986 DL
FL
645 968 MT
0.000 0.000 1.000 SC
645 968 645 128 DL
FL
645 968 MT
0.000 0.000 0.000 SC
645 968 645 1004 DL
FL
631 1076 MT
(6) SH
911 968 MT
911 968 911 986 DL
FL
822 968 MT
0.000 0.000 1.000 SC
822 968 822 128 DL
FL
822 968 MT
0.000 0.000 0.000 SC
822 968 822 1004 DL
FL
808 1076 MT
(8) SH
1087 968 MT
1087 968 1087 986 DL
FL
999 968 MT
0.000 0.000 1.000 SC
999 968 999 128 DL
FL
999 968 MT
0.000 0.000 0.000 SC
999 968 999 1004 DL
FL
971 1076 MT
(10) SH
1264 968 MT
1264 968 1264 986 DL
FL
1176 968 MT
0.000 0.000 1.000 SC
1176 968 1176 128 DL
FL
1176 968 MT
0.000 0.000 0.000 SC
1176 968 1176 1004 DL
FL
1148 1076 MT
(12) SH
1441 968 MT
1441 968 1441 986 DL
FL
1352 968 MT
0.000 0.000 1.000 SC
1352 968 1352 128 DL
FL
1352 968 MT
0.000 0.000 0.000 SC
1352 968 1352 1004 DL
FL
1324 1076 MT
(14) SH
1529 968 MT
1529 968 1529 1004 DL
FL
1501 1076 MT
(16) SH
292 940 MT
292 940 274 940 DL
FL
292 912 MT
292 912 274 912 DL
FL
292 884 MT
292 884 274 884 DL
FL
292 856 MT
292 856 274 856 DL
FL
292 968 MT
292 968 256 968 DL
FL
132 992 MT
(40\045) SH
292 800 MT
292 800 274 800 DL
FL
292 772 MT
292 772 274 772 DL
FL
292 744 MT
292 744 274 744 DL
FL
292 716 MT
292 716 274 716 DL
FL
292 828 MT
0.000 0.000 1.000 SC
292 828 1529 828 DL
FL
292 828 MT
0.000 0.000 0.000 SC
292 828 256 828 DL
FL
132 852 MT
(50\045) SH
292 660 MT
292 660 274 660 DL
FL
292 632 MT
292 632 274 632 DL
FL
292 604 MT
292 604 274 604 DL
FL
292 576 MT
292 576 274 576 DL
FL
292 688 MT
0.000 0.000 1.000 SC
292 688 1529 688 DL
FL
292 688 MT
0.000 0.000 0.000 SC
292 688 256 688 DL
FL
132 712 MT
(60\045) SH
292 520 MT
292 520 274 520 DL
FL
292 492 MT
292 492 274 492 DL
FL
292 464 MT
292 464 274 464 DL
FL
292 436 MT
292 436 274 436 DL
FL
292 548 MT
0.000 0.000 1.000 SC
292 548 1529 548 DL
FL
292 548 MT
0.000 0.000 0.000 SC
292 548 256 548 DL
FL
132 572 MT
(70\045) SH
292 380 MT
292 380 274 380 DL
FL
292 352 MT
292 352 274 352 DL
FL
292 324 MT
292 324 274 324 DL
FL
292 296 MT
292 296 274 296 DL
FL
292 408 MT
0.000 0.000 1.000 SC
292 408 1529 408 DL
FL
292 408 MT
0.000 0.000 0.000 SC
292 408 256 408 DL
FL
132 432 MT
(80\045) SH
292 240 MT
292 240 274 240 DL
FL
292 212 MT
292 212 274 212 DL
FL
292 184 MT
292 184 274 184 DL
FL
292 156 MT
292 156 274 156 DL
FL
292 268 MT
0.000 0.000 1.000 SC
292 268 1529 268 DL
FL
292 268 MT
0.000 0.000 0.000 SC
292 268 256 268 DL
FL
132 292 MT
(90\045) SH
292 128 MT
292 128 256 128 DL
FL
104 152 MT
(100\045) SH
GS
292 128 1530 969 CR
292 919 MT
1.000 0.000 0.000 SC
8.00 LW
292 919 292 918 DL
FL
292 918 293 916 DL
FL
293 916 294 912 DL
FL
294 912 296 905 DL
FL
296 905 298 894 DL
FL
298 894 302 879 DL
FL
302 879 307 859 DL
FL
307 859 313 834 DL
FL
313 834 321 802 DL
FL
321 802 MT
321 802 331 764 DL
FL
331 764 343 720 DL
FL
343 720 356 672 DL
FL
356 672 371 621 DL
FL
371 621 388 569 DL
FL
388 569 406 517 DL
FL
406 517 427 466 DL
FL
427 466 449 417 DL
FL
449 417 473 373 DL
FL
473 373 498 335 DL
FL
498 335 MT
498 335 526 303 DL
FL
526 303 555 277 DL
FL
555 277 586 257 DL
FL
586 257 620 241 DL
FL
620 241 656 230 DL
FL
656 230 695 222 DL
FL
695 222 737 217 DL
FL
737 217 782 214 DL
FL
782 214 830 212 DL
FL
830 212 881 211 DL
FL
881 211 MT
881 211 936 210 DL
FL
936 210 993 209 DL
FL
993 209 1051 208 DL
FL
1051 208 1110 206 DL
FL
1110 206 1168 205 DL
FL
1168 205 1225 204 DL
FL
1225 204 1278 203 DL
FL
1278 203 1328 202 DL
FL
1328 202 1372 201 DL
FL
1372 201 1411 200 DL
FL
1411 200 MT
1411 200 1443 200 DL
FL
1443 200 1469 199 DL
FL
1469 199 1488 199 DL
FL
1488 199 1503 199 DL
FL
1503 199 1514 198 DL
FL
1514 198 1521 198 DL
FL
1521 198 1526 198 DL
FL
1526 198 1528 198 DL
FL
1528 198 1529 198 DL
FL
GR
1529 968 MT
1529 968 1529 128 DL
FL
292 128 MT
292 128 1529 128 DL
FL
292 968 MT
292 968 1529 968 DL
FL
292 968 MT
292 968 292 128 DL
FL
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
showpage
restore

%%Trailer
%%Pages: 1

%%EndDocument
FMENDEPSF
0 0 0 416 335 227.79 136.79 60.44 602.22 FMBEGINEPSF
%%BeginDocument: /nfs/malaka/users1/wiss/berchtol/final/over_uni.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: Informix Wingz Version 1.1b
%%CreationDate: Fri Feb 23 11:04:07 1996
%%For: Stefan Berchtold (berchtol)
%%BoundingBox: 0 0 416 335
%%Pages: (atend)
%%EndComments


%%BeginProlog
/AC /arc load def
/AN /arcn load def
/AT /arcto load def
/CL /clip load def
/CN /concat load def
/CP /closepath load def
/CR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP CL NP } bind def
/DL { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y2 LT SP } bind def
/DR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP } bind def
/DS { scrfreq scrang scrproc cvx setscreen } bind def
/EC /eoclip load def
/EF /eofill load def
/FL /fill load def
/GS /gsave load def
/GR /grestore load def
/LT /lineto load def
/LW /setlinewidth load def
/MOF { /uid exch def /sw exch def /nfn exch def /bfn exch def /bfd bfn findfont def /nent bfd maxlength 1 add def bfd
/UniqueID known not { /nent nent 1 add def } if /ofd nent dict def bfd { exch dup /FID ne { exch ofd 3 1 roll put } { pop pop } ifelse } forall
ofd /FontName nfn put ofd /PaintType get 0 eq { ofd /PaintType 2 put } if ofd /StrokeWidth sw put ofd /UniqueID uid put nfn ofd definefont pop } bind def
/MT /moveto load def
/NP /newpath load def
/RE { /nfn exch def /bfn exch def /bfd bfn findfont def /nf bfd maxlength dict def bfd { exch dup /FID ne {dup /Encoding eq {exch dup length array copy
nf 3 1 roll put } {exch nf 3 1 roll put} ifelse } {pop pop} ifelse } forall bfn (Symbol) ne { nf /FontName nfn put vect aload pop vect length 2 idiv {nf /Encoding get 3 1 roll put} repeat }
if nfn nf definefont pop } bind def
/RL /rlineto load def
/RM /rmoveto load def
/RO /rotate load def
/SF { /s exch def /f exch def f findfont [s 0 0 s neg 0 0 ] makefont setfont } bind def
/SG /setgray load def
/SH /show load def
/SL /scale load def
/SK /stroke load def
/SP /strokepath load def
/SC /setrgbcolor load def
/SD { /stl exch def /hud exch def /sz exch def /udof exch def /sof exch def /uw exch def /str exch def /len str stringwidth pop def
currentrgbcolor /blue exch def /green exch def /red exch def 0.333 SG GS sof 0 RM str SH hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW sof udof RM len 0
RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def sof yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if
SK GR } if red green blue SC str stringwidth pop /x exch def /xoff sof x add def /yoff sof neg def xoff neg yoff RM str SH
hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW 0 udof RM len 0 RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof
off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if GR str stringwidth pop sof RM } bind def
/CF { /cliptype exch def /pndex exch def /bgb exch def /bgg exch def /bgr exch def /fgb exch def /fgg exch def /fgr exch def GS 4.000 4.000 SL pathbbox 
/ury exch cvi def /urx exch cvi def /lly exch cvi def /llx exch cvi def /yoff lly 8 mod def /xoff llx 8 mod def /iy lly yoff sub def /ix llx xoff sub def /width urx llx sub 1 add xoff add def
 /height ury lly sub 1 add yoff add def /pdata pats pndex get def /imatrix [1 0 0 1 0 0] def /NullProc {} bind def cliptype cvx exec bgr bgg bgb SC FL fgr fgg fgb SC ix iy TR 0 64
height { /yoff exch def 0 64 width { /xoff exch def GS xoff yoff TR 64 64 true imatrix pdata NullProc imagemask GR } for } for GR } bind def
/ST { /stl exch def /hud exch def /sz exch def /udof exch def /uw exch def /str exch def /len str stringwidth pop def hud 1 eq { GS stl 0 eq { uw LW 0 udof RM len 0 RL } if stl
4 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if str SH } bind def
/TR /translate load def
/vect [ 8#260  /Adieresis 8#265  /Aring 8#276  /Ccedilla 8#300  /Eacute 8#311 /Ntilde 8#314  /Odieresis 8#321  /Udieresis 8#322  /aacute 8#323 /agrave  8#324  /acircumflex 8#325  /adieresis 8#326  /atilde
8#327  /aring 8#330  /ccedilla  8#331  /eacute 8#332  /egrave 8#333  /ecircumflex 8#334  /edieresis 8#335  /iacute  8#336  /igrave 8#337  /icircumflex 8#340  /idieresis 8#342  /ntilde 8#344  /oacute
8#345  /ograve 8#346  /ocircumflex 8#347  /odieresis 8#354  /otilde 8#355  /uacute  8#356  /ugrave 8#357  /ucircumflex 8#360  /udieresis 8#362  /Agrave 8#363  /Atilde  8#364  /Otilde 8#366  /ydieresis
8#367  /Ydieresis 8#374  /Acircumflex  8#375  /Ecircumflex 8#376  /Aacute 8#377  /Edieresis 8#177  /Egrave 8#200  /Iacute  8#201  /Icircumflex 8#202  /Idieresis 8#203  /Igrave 8#204  /Oacute 8#205  /Ocircumflex
8#206  /Ograve 8#207  /Uacute 8#210  /Ucircumflex 8#211  /Ugrave 8#365  /dotlessi ]def
/pats [<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFFDDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777>
<AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555>
<5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF>
<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>
<EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777>
<88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888>
<B1B1B1B1B1B1B1B1303030303030303003030303030303031B1B1B1B1B1B1B1BD8D8D8D8D8D8D8D8C0C0C0C0C0C0C0C00C0C0C0C0C0C0C0C8D8D8D8D8D8D8D8D>
<80808080808080801010101010101010020202020202020220202020202020200101010101010101080808080808080840404040404040400404040404040404>
<FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888>
<FFFFFFFFFFFFFFFF808080808080808080808080808080808080808080808080FFFFFFFFFFFFFFFF080808080808080808080808080808080808080808080808>
<80808080808080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080804040404040404040202020202020202000000000000000000202020202020202040404040404040408080808080808080000000000000000>
<82828282828282824444444444444444393939393939393944444444444444448282828282828282010101010101010101010101010101010101010101010101>
<F8F8F8F8F8F8F8F87474747474747474222222222222222247474747474747478F8F8F8F8F8F8F8F171717171717171722222222222222227171717171717171>
<5555555555555555A0A0A0A0A0A0A0A04040404040404040404040404040404055555555555555550A0A0A0A0A0A0A0A04040404040404040404040404040404>
<20202020202020205050505050505050888888888888888888888888888888888888888888888888888888888888888805050505050505050202020202020202>
<BFBFBFBFBFBFBFBF0000000000000000BFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0>
<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080800000000000000000080808080808080800000000000000008080808080808080000000000000000008080808080808080000000000000000>
<88888888888888880000000000000000222222222222222200000000000000008888888888888888000000000000000022222222222222220000000000000000>
<88888888888888882222222222222222888888888888888822222222222222228888888888888888222222222222222288888888888888882222222222222222>
<AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000>
<11111111111111112222222222222222444444444444444488888888888888881111111111111111222222222222222244444444444444448888888888888888>
<FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000>
<01010101010101010202020202020202040404040404040408080808080808081010101010101010202020202020202040404040404040408080808080808080>
<AAAAAAAAAAAAAAAA0000000000000000808080808080808000000000000000008888888888888888000000000000000080808080808080800000000000000000>
<FFFFFFFFFFFFFFFF8080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080>
<08080808080808081C1C1C1C1C1C1C1C2222222222222222C1C1C1C1C1C1C1C18080808080808080010101010101010102020202020202020404040404040404>
<888888888888888814141414141414142222222222222222414141414141414188888888888888880000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<4040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000004040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000>
<03030303030303038484848484848484484848484848484830303030303030300C0C0C0C0C0C0C0C020202020202020201010101010101010101010101010101>
<8080808080808080808080808080808041414141414141413E3E3E3E3E3E3E3E080808080808080808080808080808081414141414141414E3E3E3E3E3E3E3E3>
<101010101010101020202020202020205454545454545454AAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFF020202020202020204040404040404040808080808080808>
<777777777777777789898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F77777777777777779898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8>
<0000000000000000080808080808080814141414141414142A2A2A2A2A2A2A2A55555555555555552A2A2A2A2A2A2A2A14141414141414140808080808080808> ] def
/BEPSF { /IS save def /dcnt countdictstack def /opcnt count 1 sub def userdict begin /showpage {} def 0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit [] 0 setdash newpath } bind def
/EEPSF { count opcnt sub {pop} repeat countdictstack dcnt sub {end} repeat IS restore } bind def
%%EndProlog

%%Page: 1 1
save
currentscreen /scrproc exch cvlit def /scrang exch def /scrfreq exch def
2 setlinecap
0 335 TR
[1 0 0 -1 0 0] CN
0.250 0.250 SL
1.0 LW
GS
0 0 1665 1341 CR
GS
0 0 1665 1341 CR
GS
0 0 1665 1341 CR
/Helvetica /Helvetica-Wingz RE
/Helvetica-Wingz 48.000 SF
/Helvetica-Wingz 56.000 SF
/Helvetica-Wingz 48.000 SF
1.000 1.000 1.000 SC
0 0 1664 1340 DR
FL
0.000 0.000 0.000 SC
8.00 LW
4 4 1660 1336 DR
SP
FL
1.000 1.000 1.000 SC
56 56 1608 1284 DR
FL
292 128 1532 968 DR
FL
/Helvetica-Wingz 56.000 SF
754 1124 1070 1236 DR
FL
0.000 0.000 0.000 SC
782 1208 MT
(dimension) SH
/Helvetica-Wingz 48.000 SF
381 968 MT
1.00 LW
381 968 381 986 DL
FL
292 968 MT
292 968 292 1004 DL
FL
278 1076 MT
(2) SH
558 968 MT
558 968 558 986 DL
FL
469 968 MT
0.000 0.000 1.000 SC
469 968 469 128 DL
FL
469 968 MT
0.000 0.000 0.000 SC
469 968 469 1004 DL
FL
455 1076 MT
(4) SH
735 968 MT
735 968 735 986 DL
FL
646 968 MT
0.000 0.000 1.000 SC
646 968 646 128 DL
FL
646 968 MT
0.000 0.000 0.000 SC
646 968 646 1004 DL
FL
632 1076 MT
(6) SH
912 968 MT
912 968 912 986 DL
FL
823 968 MT
0.000 0.000 1.000 SC
823 968 823 128 DL
FL
823 968 MT
0.000 0.000 0.000 SC
823 968 823 1004 DL
FL
809 1076 MT
(8) SH
1089 968 MT
1089 968 1089 986 DL
FL
1001 968 MT
0.000 0.000 1.000 SC
1001 968 1001 128 DL
FL
1001 968 MT
0.000 0.000 0.000 SC
1001 968 1001 1004 DL
FL
973 1076 MT
(10) SH
1266 968 MT
1266 968 1266 986 DL
FL
1178 968 MT
0.000 0.000 1.000 SC
1178 968 1178 128 DL
FL
1178 968 MT
0.000 0.000 0.000 SC
1178 968 1178 1004 DL
FL
1150 1076 MT
(12) SH
1443 968 MT
1443 968 1443 986 DL
FL
1355 968 MT
0.000 0.000 1.000 SC
1355 968 1355 128 DL
FL
1355 968 MT
0.000 0.000 0.000 SC
1355 968 1355 1004 DL
FL
1327 1076 MT
(14) SH
1532 968 MT
1532 968 1532 1004 DL
FL
1504 1076 MT
(16) SH
292 934 MT
292 934 274 934 DL
FL
292 901 MT
292 901 274 901 DL
FL
292 867 MT
292 867 274 867 DL
FL
292 834 MT
292 834 274 834 DL
FL
292 968 MT
292 968 256 968 DL
FL
160 992 MT
(0\045) SH
292 766 MT
292 766 274 766 DL
FL
292 733 MT
292 733 274 733 DL
FL
292 699 MT
292 699 274 699 DL
FL
292 666 MT
292 666 274 666 DL
FL
292 800 MT
0.000 0.000 1.000 SC
292 800 1532 800 DL
FL
292 800 MT
0.000 0.000 0.000 SC
292 800 256 800 DL
FL
132 824 MT
(20\045) SH
292 598 MT
292 598 274 598 DL
FL
292 565 MT
292 565 274 565 DL
FL
292 531 MT
292 531 274 531 DL
FL
292 498 MT
292 498 274 498 DL
FL
292 632 MT
0.000 0.000 1.000 SC
292 632 1532 632 DL
FL
292 632 MT
0.000 0.000 0.000 SC
292 632 256 632 DL
FL
132 656 MT
(40\045) SH
292 430 MT
292 430 274 430 DL
FL
292 397 MT
292 397 274 397 DL
FL
292 363 MT
292 363 274 363 DL
FL
292 330 MT
292 330 274 330 DL
FL
292 464 MT
0.000 0.000 1.000 SC
292 464 1532 464 DL
FL
292 464 MT
0.000 0.000 0.000 SC
292 464 256 464 DL
FL
132 488 MT
(60\045) SH
292 262 MT
292 262 274 262 DL
FL
292 229 MT
292 229 274 229 DL
FL
292 195 MT
292 195 274 195 DL
FL
292 162 MT
292 162 274 162 DL
FL
292 296 MT
0.000 0.000 1.000 SC
292 296 1532 296 DL
FL
292 296 MT
0.000 0.000 0.000 SC
292 296 256 296 DL
FL
132 320 MT
(80\045) SH
292 128 MT
292 128 256 128 DL
FL
104 152 MT
(100\045) SH
GS
292 128 1533 969 CR
292 956 MT
1.000 0.000 0.000 SC
8.00 LW
292 956 293 955 DL
FL
293 955 294 955 DL
FL
294 955 295 954 DL
FL
295 954 297 953 DL
FL
297 953 299 952 DL
FL
299 952 303 950 DL
FL
303 950 307 948 DL
FL
307 948 MT
307 948 312 946 DL
FL
312 946 317 943 DL
FL
317 943 324 939 DL
FL
324 939 331 935 DL
FL
331 935 338 930 DL
FL
338 930 346 924 DL
FL
346 924 354 917 DL
FL
354 917 363 910 DL
FL
363 910 372 901 DL
FL
372 901 380 891 DL
FL
381 891 MT
381 891 389 881 DL
FL
389 881 398 869 DL
FL
398 869 407 857 DL
FL
407 857 417 845 DL
FL
417 845 427 832 DL
FL
427 832 437 819 DL
FL
437 819 448 807 DL
FL
448 807 459 795 DL
FL
459 795 471 784 DL
FL
471 784 484 774 DL
FL
484 774 MT
484 774 498 764 DL
FL
498 764 512 756 DL
FL
512 756 527 748 DL
FL
527 748 543 740 DL
FL
543 740 559 732 DL
FL
559 732 576 723 DL
FL
576 723 593 713 DL
FL
593 713 611 701 DL
FL
611 701 628 687 DL
FL
628 687 646 671 DL
FL
646 671 MT
646 671 664 653 DL
FL
664 653 682 632 DL
FL
682 632 699 609 DL
FL
699 609 717 585 DL
FL
717 585 735 559 DL
FL
735 559 752 532 DL
FL
752 532 770 504 DL
FL
770 504 788 477 DL
FL
788 477 806 449 DL
FL
806 449 823 421 DL
FL
823 421 MT
823 421 841 395 DL
FL
841 395 859 369 DL
FL
859 369 878 344 DL
FL
878 344 898 320 DL
FL
898 320 919 298 DL
FL
919 298 942 277 DL
FL
942 277 968 258 DL
FL
968 258 995 241 DL
FL
995 241 1026 226 DL
FL
1026 226 1060 213 DL
FL
1060 213 MT
1060 213 1097 202 DL
FL
1097 202 1136 193 DL
FL
1136 193 1178 186 DL
FL
1178 186 1220 181 DL
FL
1220 181 1263 177 DL
FL
1263 177 1304 174 DL
FL
1304 174 1344 173 DL
FL
1344 173 1381 172 DL
FL
1381 172 1414 171 DL
FL
1414 171 1443 171 DL
FL
1443 171 MT
1443 171 1467 171 DL
FL
1467 171 1487 170 DL
FL
1487 170 1502 170 DL
FL
1502 170 1513 170 DL
FL
1513 170 1521 170 DL
FL
1521 170 1526 170 DL
FL
1526 170 1530 170 DL
FL
1530 170 1531 170 DL
FL
1531 170 1532 170 DL
FL
GR
1532 968 MT
1532 968 1532 128 DL
FL
292 128 MT
292 128 1532 128 DL
FL
292 968 MT
292 968 1532 968 DL
FL
292 968 MT
292 968 292 128 DL
FL
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
showpage
restore

%%Trailer
%%Pages: 1

%%EndDocument
FMENDEPSF
61.6 561.79 527.15 575.29 R
V
0 10 Q
0 X
(Figure 2: Overlap of R*-) 125.78 568.62 T
(tree Directory Nodes depending on the Dimensionality) 231.32 568.62 T
1 F
(a. Overlap \050Uniformly Distributed Data\051) 92.43 587.91 T
(b. Weighted Overlap \050Real Data\051) 358.61 587.91 T
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 1 0.6 0 0 0 0.4 1]
[ 0 0.2 0.2 0.8 0.2 0 0]
[ 0.5 0 0 0 0.5 1 1]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54.65 770.95 540.65 780.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 96.95 540.65 744.95 R
V
0 11.6 Q
0 X
(2.2) 54.65 737.22 T
(Experimental Evaluation of Overlap in) 76.65 737.22 T
(R*-) 76.5 721.62 T
(tree Directories) 94.54 721.62 T
1 10 Q
-0.8 -0.02 (In this subsection, we empirically evaluate the develop-) 72.65 703.1 B
-0.26 -0.02 (ment of the overlap in the R*-) 54.65 692.1 B
-0.26 -0.02 (tree depending on the dimen-) 173.04 692.1 B
-0.94 -0.02 (sionality. For the experiments, we use the implementation of) 54.65 681.1 B
0.24 -0.02 (the R*-) 54.65 670.1 B
0.24 -0.02 (tree according to [BKSS) 84.46 670.1 B
0.24 -0.02 (90]. The data used for the) 185.24 670.1 B
0.86 -0.02 (experiments are constant size databases of uniformly dis-) 54.65 659.1 B
1.69 -0.02 (tributed and real data. The real data are Fourier vectors) 54.65 648.1 B
-0.01 -0.02 (which are used in searching for similarly shaped polygons.) 54.65 637.1 B
-0.09 -0.02 (The overlap curves presented in) 54.65 626.1 B
-0.09 (Figure 2) 183.81 626.1 P
-0.09 -0.02 ( show the average) 217.33 626.1 B
-0.83 -0.02 (overlap of directory nodes according to definition 1. In aver-) 54.65 615.1 B
-0.34 -0.02 (aging the node overlaps, we used all directory levels except) 54.65 604.1 B
-0.63 -0.02 (the root level since the root page may only contain a few hy-) 54.65 593.1 B
-0.89 -0.02 (perrectangles, which causes a high variance of the overlap in) 54.65 582.1 B
-0.5 -0.02 (the root node.) 54.65 571.1 B
-0.33 -0.02 (In) 72.65 556.12 B
-0.34 (Figure 2) 83.08 556.12 P
-0.33 -0.02 (a, we present the overlap curves of R*-) 116.36 556.12 B
-0.33 -0.02 (trees) 269.87 556.12 B
-0.61 -0.02 (generated from 6) 54.65 545.12 B
-0.61 -0.02 (MBytes of uniformly distributed point da-) 123.9 545.12 B
2.17 -0.02 (ta. As expected, for a uniform distribution overlap and) 54.65 534.12 B
-0.87 -0.02 (weighted overlap \050definition 1a and 1b\051 provide the same re-) 54.65 523.12 B
0.89 -0.02 (sults. For dimensionality larger than two, the overlap \050cf.) 54.65 512.12 B
0.42 (Figure 2) 54.65 501.12 P
0.42 -0.02 (a\051 increases rapidly to approach 100% for dimen-) 88.68 501.12 B
-0.67 -0.02 (sionality larger than ten. This means that even for point que-) 54.65 490.12 B
2.2 -0.02 (ries on ten or higher dimensional data in almost every) 54.65 479.12 B
0.64 -0.02 (directory node at least two sub) 54.65 468.12 B
0.64 -0.02 (nodes have to be accessed.) 179.7 468.12 B
0.39 -0.02 (For real data \050cf.) 54.65 457.12 B
0.39 (Figure 2) 124.97 457.12 P
0.39 -0.02 (b\051, the increase of the overlap is) 158.97 457.12 B
0.58 -0.02 (even more remarkable. The weighted overlap increases to) 54.65 446.12 B
0.5 -0.02 (about 80% for dimensionality 4 and approaches 100% for) 54.65 435.12 B
-0.5 -0.02 (dimensionality larger than) 54.65 424.12 B
-0.5 -0.02 (6.) 160.61 424.12 B
0 12 Q
(3.) 54.65 396.8 T
(The) 72.65 396.8 T
2 F
(X-) 95.65 396.8 T
(tree) 107.65 396.8 T
1 10 Q
0.14 -0.02 (The X-) 72.65 376.15 B
0.14 -0.02 (tree \050eXtended node tree\051 is a new index struc-) 101.27 376.15 B
0.86 -0.02 (ture supporting efficient query processing of high-dimen-) 54.65 365.15 B
-0.97 -0.02 (sional data. The goal is to support not only point data but also) 54.65 354.15 B
-0.46 -0.02 (extended spatial data and therefore, the X-) 54.65 343.15 B
-0.46 -0.02 (tree uses the con-) 220.69 343.15 B
-0.84 -0.02 (cept of overlapping regions. From the insight obtained in the) 54.65 332.15 B
-0.23 -0.02 (previous section, it is clear that we have to avoid overlap in) 54.65 321.15 B
0.73 -0.02 (the directory in order to improve the indexing of high-di-) 54.65 310.15 B
-0.13 -0.02 (mensional data. The X-) 54.65 299.15 B
-0.13 -0.02 (tree therefore avoids overlap when-) 147.69 299.15 B
0.43 -0.02 (ever it is possible without allowing the tree to degenerate;) 54.65 288.15 B
0.19 -0.02 (otherwise, the X-) 54.65 277.15 B
0.19 -0.02 (tree uses extended variable size directory) 123.85 277.15 B
0.3 -0.02 (nodes, so-called supernodes. In addition to providing a di-) 54.65 266.15 B
-0.34 -0.02 (rectory organization which is suitable for high-dimensional) 54.65 255.15 B
-0.1 -0.02 (data, the X-) 54.65 244.15 B
-0.1 -0.02 (tree uses the available main memory more effi-) 101.14 244.15 B
-0.5 -0.02 (ciently \050in comparison to using a cache\051.) 54.65 233.15 B
-0.83 -0.02 (The X-) 72.65 218.17 B
-0.83 -0.02 (tree may be seen as a hybrid of a linear array-like) 100.29 218.17 B
-0.89 -0.02 (and a hierarchical R-) 54.65 207.17 B
-0.89 -0.02 (tree-like directory. It is well established) 135.12 207.17 B
-0.68 -0.02 (that in low dimensions the most efficient organization of the) 54.65 196.17 B
0.62 -0.02 (directory is a hierarchical organization. The reason is that) 54.65 185.17 B
-0.89 -0.02 (the selectivity in the directory is very high which means that,) 54.65 174.17 B
-0.28 -0.02 (e.g. for point queries, the number of required page accesses) 54.65 163.17 B
-0.71 -0.02 (directly corresponds to the height of the tree. This, however,) 54.65 152.17 B
0.03 -0.02 (is only true if there is no overlap between directory rectan-) 306.65 589.79 B
-0.74 -0.02 (gles which is the case for a low dimensionality. It is also rea-) 306.65 578.79 B
5.09 -0.02 (sonable, that for very high dimensionality a linear) 306.65 567.79 B
-0.58 -0.02 (organization of the directory is more efficient. The reason is) 306.65 556.79 B
-0.14 -0.02 (that due to the high overlap, most of the directory if not the) 306.65 545.79 B
-0.39 -0.02 (whole directory has to be searched anyway. If the whole di-) 306.65 534.79 B
1.04 -0.02 (rectory has to be searched, a linearly organized directory) 306.65 523.79 B
0.73 -0.02 (needs less space) 306.65 512.79 B
1 8 Q
0.58 -0.02 (1) 372.76 516.79 B
1 10 Q
0.73 -0.02 ( and may be read much faster from disk) 376.74 512.79 B
0.02 -0.02 (than a block-wise reading of the directory. For medium di-) 306.65 501.79 B
2.76 -0.02 (mensionality, an efficient organization of the directory) 306.65 490.79 B
-0.83 -0.02 (would probably be partially hierarchical and partially linear.) 306.65 479.79 B
0.54 -0.02 (The problem is to dynamically organize the tree such that) 306.65 468.79 B
0.11 -0.02 (portions of the data which would produce high overlap are) 306.65 457.79 B
-0.52 -0.02 (organized linearly and those which can be organized hierar-) 306.65 446.79 B
1.09 -0.02 (chically without too much overlap are dynamically orga-) 306.65 435.79 B
1.44 -0.02 (nized in a hierarchical form. The algorithms used in the) 306.65 424.79 B
-0.08 -0.02 (X-) 306.65 413.79 B
-0.08 -0.02 (tree are designed to automatically organize the directory) 317.16 413.79 B
2.21 -0.02 (as hierarchical as possible, resulting in a very efficient) 306.65 402.79 B
-0.5 -0.02 (hy) 306.65 391.79 B
-0.5 -0.02 (brid organization of the directory.) 316.61 391.79 B
0 11.6 Q
(3.1) 306.65 366.86 T
(Structure of the) 328.65 366.86 T
2 14 Q
(X-) 410.15 366.86 T
(tree) 424.15 366.86 T
1 10 Q
-0.97 -0.02 (The overall structure of the X-) 324.65 345.26 B
-0.97 -0.02 (tree is presented in) 441.08 345.26 B
-0.98 (Figure) 514.54 345.26 P
-0.6 (5) 306.65 334.26 P
-0.59 -0.02 (. The data nodes of the X-) 311.65 334.26 B
-0.59 -0.02 (tree contain rectilinear minimum) 411.7 334.26 B
0.54 -0.02 (bounding rectangles \050MBRs\051 together with pointers to the) 306.65 323.26 B
0.26 -0.02 (actual data objects, and the directory nodes contain MBRs) 306.65 312.26 B
1.87 -0.02 (together with pointers to sub-MBRs \050cf.) 306.65 301.26 B
1.88 (Figure 5) 479.53 301.26 P
1.87 -0.02 (\051. The) 515.02 301.26 B
-0.58 -0.02 (X-) 306.65 290.26 B
-0.58 -0.02 (tree consists of three different types of nodes: data nodes,) 317.16 290.26 B
1.5 -0.02 (normal directory nodes, and super) 306.65 279.26 B
1.5 -0.02 (nodes. Supernodes are) 448.36 279.26 B
-0.8 -0.02 (large directory nodes of variable size \050a multiple of the usual) 306.65 268.26 B
-0.73 -0.02 (block size\051. The basic goal of supernodes is to avoid splits in) 306.65 257.26 B
1.28 -0.02 (the directory that would result in an inefficient directory) 306.65 246.26 B
-0.83 -0.02 (structure. The alternative to using larger node sizes are high-) 306.65 235.26 B
0.3 -0.02 (ly overlapping directory nodes which would require to ac-) 306.65 224.26 B
-0.03 -0.02 (cess most of the son nodes during the search process. This,) 306.65 213.26 B
-0.56 -0.02 (however, is more inefficient than linearly scanning the larg-) 306.65 202.26 B
0.76 -0.02 (er supernode. Note that the X-) 306.65 191.26 B
0.76 -0.02 (tree is completely different) 430.91 191.26 B
-0.5 -0.02 (from an R-) 306.65 180.26 B
-0.5 -0.02 (tree with a larger block size since the X-) 349.32 180.26 B
-0.5 -0.02 (tree only) 506.06 180.26 B
0.21 -0.02 (consists of larger nodes where actually necessary. As a re-) 306.65 169.26 B
-0.59 -0.02 (sult, the structure of the X-) 306.65 158.26 B
-0.59 -0.02 (tree may be rather heterogeneous) 410.9 158.26 B
-0.8 -0.02 (as indicated in) 306.65 147.26 B
-0.8 (Figure 5) 364.2 147.26 P
-0.8 -0.02 (. Due to the fact that the overlap is in-) 397.01 147.26 B
306.65 128.95 540.65 143.93 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
306.65 128.95 540.65 143.93 R
7 X
0 0 0 1 0 0 0 K
V
315.65 141.91 459.65 141.91 2 L
V
0.5 H
2 Z
0 X
N
-8.35 24.95 603.65 816.95 C
1 8 Q
0 X
0 0 0 1 0 0 0 K
(1.) 306.65 123.62 T
1.57 (In comparison to a hierarchically or) 324.65 123.62 P
1.57 (g) 446.76 123.62 P
1.57 (anized directory) 450.71 123.62 P
1.57 (, a linearly) 503.52 123.62 P
0.25 (or) 324.65 115.62 P
0.25 (g) 331.17 115.62 P
0.25 (anized directory only consists of the concatenation of the nodes) 335.13 115.62 P
0.43 (on the lo) 324.65 107.62 P
0.43 (west le) 353.32 107.62 P
0.43 (v) 375.99 107.62 P
0.43 (el of the corresponding hierarchical directory and) 379.87 107.62 P
(is therefore much smaller) 324.65 99.62 T
(.) 405.74 99.62 T
54.65 96.95 288.65 744.95 C
55.87 96.95 287.42 148.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
60.88 101.91 281.38 113.58 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Figure 4: Structure of a Directory Node) 86.43 106.91 T
83.26 132.27 83.26 121.02 2 L
0.5 H
2 Z
N
1 8 Q
-0.05 (MBR) 60.52 124.99 S
1 6.4 Q
-0.04 (0) 78.16 122.99 S
1 8 Q
-0.05 (SplitHistory) 85.52 124.99 S
1 6.4 Q
-0.04 (0) 124.07 122.99 S
128.01 132.27 128.01 121.02 2 L
N
1 8 Q
-0.05 (Ptr) 129.52 124.99 S
1 6.4 Q
-0.04 (0) 138.71 122.99 S
143.51 132.27 143.51 121.02 2 L
N
216.51 132.27 216.51 121.02 2 L
N
1 8 Q
-0.05 (MBR) 190.27 124.99 S
1 6.4 Q
-0.04 (n-1) 207.91 122.99 S
1 8 Q
-0.05 (SplitHistory) 217.52 124.99 S
1 6.4 Q
-0.04 (n-1) 256.06 122.99 S
264.76 132.27 264.76 121.02 2 L
N
1 8 Q
-0.05 (Ptr) 266.42 124.99 S
1 6.4 Q
-0.04 (n-1) 275.61 122.99 S
189.01 132.27 189.01 121.34 2 L
N
57.51 132.27 154.26 132.27 2 L
N
57.51 132.27 57.51 121.02 2 L
N
57.51 121.02 154.26 121.02 2 L
N
183.51 132.27 284.76 132.27 2 L
N
284.76 132.27 284.76 121.02 2 L
N
284.76 121.02 183.51 121.02 2 L
N
J
154.26 132.27 183.51 132.27 2 L
J
154.26 132.27 156.01 132.27 2 L
N
[3.162 4.066] 3.162 I
156.01 132.27 181.76 132.27 2 L
N
J
181.76 132.27 183.51 132.27 2 L
N
J
154.26 121.02 183.51 121.02 2 L
J
154.26 121.02 156.01 121.02 2 L
N
[3.162 4.066] 3.162 I
156.01 121.02 181.76 121.02 2 L
N
J
181.76 121.02 183.51 121.02 2 L
N
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
54.65 96.95 288.65 744.95 C
-8.35 24.95 603.65 816.95 C
306.65 96.95 540.65 744.95 C
309.38 596.45 537.91 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
313.39 612.52 533.9 624.2 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Figure 5: Structure of the X-) 354.08 617.53 T
(tree) 476.55 617.53 T
1 9 Q
-0.05 (Normal Directory Nodes) 325.87 632.53 S
486.16 633.32 491.52 637.73 2.21 RR
0.5 H
2 Z
N
-0.05 (Data Nodes) 493.9 632.53 S
419.58 733.79 441.68 743.02 R
N
-0.05 (root) 402.81 736.65 S
310.47 633.32 324 637.73 R
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
368.64 704.04 410.07 713.28 R
3 X
V
0 X
N
J
389.81 713.28 389.81 704.05 2 L
J
389.81 713.28 389.81 711.53 2 L
N
[4.458 5.732] 4.458 I
389.81 711.53 389.81 705.8 2 L
N
J
389.81 705.8 389.81 704.05 2 L
N
J
326.89 649.58 335.18 657.54 3.98 RR
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
471.76 704.04 492.63 713.28 R
N
355.23 676.01 376.1 685.24 R
N
382.45 676.01 403.32 685.24 R
N
327.2 676.01 348.07 685.24 R
N
410.07 676.01 451.5 685.24 R
3 X
V
0 X
N
J
431.24 685.24 431.24 676.01 2 L
J
431.24 685.24 431.24 683.49 2 L
N
[4.458 5.732] 4.458 I
431.24 683.49 431.24 677.76 2 L
N
J
431.24 677.76 431.24 676.01 2 L
N
J
338.5 649.58 346.78 657.54 3.98 RR
N
350.1 649.58 358.38 657.54 3.98 RR
N
361.7 649.58 369.99 657.54 3.98 RR
N
384.9 649.58 393.19 657.54 3.98 RR
N
373.3 649.58 381.59 657.54 3.98 RR
N
395.95 649.58 404.24 657.54 3.98 RR
N
407.55 649.58 415.84 657.54 3.98 RR
N
419.15 649.58 427.44 657.54 3.98 RR
N
430.75 649.58 439.04 657.54 3.98 RR
N
453.96 649.58 462.24 657.54 3.98 RR
N
442.36 649.58 450.64 657.54 3.98 RR
N
[3.432 4.413] 0 I
422.35 737.42 425.11 739.6 1.09 RR
V
N
J
423.73 737.42 423.73 729.54 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
[3.398 4.368] 0 I
429.1 737.49 431.86 739.6 1.06 RR
V
N
J
430.48 737.49 430.48 729.88 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
[3.608 4.639] 0 I
435.85 737.04 438.61 739.6 1.28 RR
V
N
[3.975 5.111] 0 I
474.21 706.93 476.98 710 1.38 RR
V
N
J
475.59 706.93 475.59 695.84 2 L
N
[3.975 5.111] 0 I
480.96 706.93 483.73 710 1.38 RR
V
N
J
482.35 706.93 482.35 695.84 2 L
N
[3.975 5.111] 0 I
487.72 706.93 490.48 710 1.38 RR
V
N
[3.975 5.111] 0 I
384.9 678.89 387.66 681.97 1.38 RR
V
N
J
386.28 678.89 386.28 667.8 2 L
N
[3.975 5.111] 0 I
391.65 678.89 394.42 681.97 1.38 RR
V
N
J
393.04 678.89 393.04 667.8 2 L
N
[3.975 5.111] 0 I
398.41 678.89 401.17 681.97 1.38 RR
V
N
[3.975 5.111] 0 I
412.83 678.89 415.59 681.97 1.38 RR
V
N
J
414.21 678.89 414.21 667.8 2 L
N
[3.975 5.111] 0 I
419.58 678.89 422.35 681.97 1.38 RR
V
N
J
420.96 678.89 420.96 667.8 2 L
N
[3.975 5.111] 0 I
426.33 678.89 429.1 681.97 1.38 RR
V
N
J
427.72 678.89 427.72 667.8 2 L
N
[3.975 5.111] 0 I
433.39 678.89 436.16 681.97 1.38 RR
V
N
J
434.77 678.89 434.77 667.8 2 L
N
[3.975 5.111] 0 I
440.15 678.89 442.91 681.97 1.38 RR
V
N
J
441.53 678.89 441.53 667.8 2 L
N
[3.975 5.111] 0 I
446.9 678.89 449.66 681.97 1.38 RR
V
N
[3.975 5.111] 0 I
392.27 707.12 395.03 710.2 1.38 RR
V
N
J
393.65 707.12 393.65 696.03 2 L
N
[3.975 5.111] 0 I
399.02 707.12 401.78 710.2 1.38 RR
V
N
[3.975 5.111] 0 I
405.77 707.12 408.53 710.2 1.38 RR
V
N
[3.975 5.111] 0 I
371.4 707.12 374.16 710.2 1.38 RR
V
N
J
372.78 706.44 372.78 696.03 2 L
N
[3.975 5.111] 0 I
378.15 707.12 380.91 710.2 1.38 RR
V
N
J
379.53 707.12 379.53 696.03 2 L
N
[3.975 5.111] 0 I
384.9 707.12 387.66 710.2 1.38 RR
V
N
J
386.28 707.12 386.28 696.03 2 L
N
[3.975 5.111] 0 I
357.68 678.89 360.45 681.97 1.38 RR
V
N
J
359.07 678.89 359.07 667.8 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
[3.975 5.111] 0 I
364.44 678.89 367.2 681.97 1.38 RR
V
N
J
365.82 678.89 365.82 667.8 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
[3.975 5.111] 0 I
371.19 678.89 373.95 681.97 1.38 RR
V
N
J
372.57 678.89 372.57 667.8 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
[3.975 5.111] 0 I
329.66 678.89 332.42 681.97 1.38 RR
V
N
J
331.04 678.89 331.04 667.8 2 L
N
[3.975 5.111] 0 I
336.41 678.89 339.17 681.97 1.38 RR
V
N
J
337.79 678.89 337.79 667.8 2 L
N
[3.975 5.111] 0 I
343.16 678.89 345.92 681.97 1.38 RR
V
N
J
423.73 729.54 368.64 713.28 2 L
N
430.48 729.88 471.76 713.28 2 L
N
372.78 695.69 327.2 685.24 2 L
N
379.53 695.69 354.82 685.24 2 L
N
386.28 695.69 382.45 685.24 2 L
N
393.65 695.69 410.07 685.24 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
494.48 676.01 515.36 685.24 R
N
[3.975 5.111] 0 I
496.94 678.89 499.7 681.97 1.38 RR
V
N
J
498.32 678.89 498.32 667.8 2 L
N
[3.975 5.111] 0 I
503.69 678.89 506.45 681.97 1.38 RR
V
N
J
505.07 678.89 505.07 667.8 2 L
N
[3.975 5.111] 0 I
510.44 678.89 513.2 681.97 1.38 RR
V
N
J
475.59 695.84 466.86 685.24 2 L
N
482.35 695.84 494.08 685.24 2 L
N
331.04 667.8 331.04 658.23 2 L
N
337.79 667.8 342.64 657.54 2 L
N
359.07 667.8 354.24 657.54 2 L
N
365.84 667.8 365.84 658.57 2 L
N
372.57 667.8 377.44 657.54 2 L
N
386.28 667.8 389.05 657.89 2 L
N
393.04 667.8 400.09 657.89 2 L
N
414.21 667.8 411.7 657.89 2 L
N
420.96 667.8 423.3 657.89 2 L
N
427.72 667.8 434.9 657.89 2 L
N
434.77 667.8 446.5 657.89 2 L
N
441.53 667.8 458.1 657.54 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
466.12 649.58 474.4 657.54 3.98 RR
N
477.72 649.58 486 657.54 3.98 RR
N
500.92 649.58 509.21 657.54 3.98 RR
N
489.32 649.58 497.61 657.54 3.98 RR
N
470.25 667.8 470.25 657.54 2 L
N
477.04 667.8 481.86 657.54 2 L
N
498.32 667.8 493.46 657.54 2 L
N
505.06 667.8 505.06 657.2 2 L
N
466.45 676.01 487.32 685.24 R
N
[3.975 5.111] 0 I
468.91 678.89 471.67 681.97 1.38 RR
V
N
J
470.29 678.89 470.29 667.8 2 L
N
[3.975 5.111] 0 I
475.66 678.89 478.42 681.97 1.38 RR
V
N
J
477.04 678.89 477.04 667.8 2 L
N
[3.975 5.111] 0 I
482.41 678.89 485.18 681.97 1.38 RR
V
N
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
-0.05 (Supernodes) 437.1 632.53 S
421.7 633.32 435.23 637.73 R
3 X
V
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
306.65 96.95 540.65 744.95 C
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 1 0.6 0 0 0 0.4 1]
[ 0 0.2 0.2 0.8 0.2 0 0]
[ 0.5 0 0 0 0.5 1 1]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54.65 770.95 540.65 780.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 96.95 540.65 744.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
1.17 -0.02 (creasing with the dimension, the internal structure of the) 54.65 738.29 B
-0.92 -0.02 (X-) 54.65 727.21 B
-0.92 -0.02 (tree is also changing with increasing dimension. In) 65.16 727.21 B
-0.93 (Figure) 262.54 727.21 P
-0.34 (5) 54.65 716.14 P
-0.34 -0.02 (, three examples of X-) 59.65 716.14 B
-0.34 -0.02 (trees containing data of different di-) 146.98 716.14 B
0.09 -0.02 (mensionality are shown. As expected, the number and size) 54.65 705.06 B
-0.37 -0.02 (of supernodes increases with the dimension. For generating) 54.65 693.99 B
-0.34 -0.02 (the examples, the block size has been artificially reduced to) 54.65 682.91 B
-0.47 -0.02 (obtain a drawable fanout. Due to the increasing number and) 54.65 671.84 B
1.07 -0.02 (size of supernodes, the height of the X-) 54.65 660.77 B
1.07 -0.02 (tree which corre-) 218.54 660.77 B
0.24 -0.02 (sponds to the number of page accesses necessary for point) 54.65 649.69 B
-0.5 -0.02 (queries is decreasing with increasing dimension.) 54.65 638.62 B
-0.28 -0.02 (Supernodes are created during insertion only if there is) 72.65 620.62 B
-0.64 -0.02 (no other possibility to avoid overlap. In many cases, the cre-) 54.65 609.54 B
-0.26 -0.02 (ation or extension of supernodes may be avoided by choos-) 54.65 598.47 B
-0.22 -0.02 (ing an overlap-minimal split axis \050cf. subsection 3.3\051. For a) 54.65 587.39 B
0.54 -0.02 (fast determination of the overlap-minimal split, additional) 54.65 576.32 B
-0.8 -0.02 (information is necessary which is stored in each of the direc-) 54.65 565.24 B
0.12 -0.02 (tory nodes \050cf.) 54.65 554.17 B
0.12 (Figure 4) 115.21 554.17 P
0.12 -0.02 (\051. If enough main memory is avail-) 148.94 554.17 B
0.26 -0.02 (able, supernodes are kept in main memory. Otherwise, the) 54.65 543.1 B
-0.92 -0.02 (nodes which have to be replaced are determined by a priority) 54.65 532.02 B
0.14 -0.02 (function which depends on level, type \050normal node or su-) 54.65 520.95 B
0.73 -0.02 (pernode\051, and size of the nodes. According to our experi-) 54.65 509.87 B
-0.98 -0.02 (ence, the priority function) 54.65 497.71 B
-0.98 -0.02 ( with) 269.45 497.71 B
-0.45 -0.02 ( is a good choice for practical purposes. Note that) 95.4 482.24 B
-0.25 -0.02 (the storage utilization of supernodes is higher than the stor-) 54.65 467.85 B
-0.42 -0.02 (age utilization of normal directory nodes. For normal direc-) 54.65 456.78 B
0.98 -0.02 (tory nodes, the expected storage utilization for uniformly) 54.65 445.7 B
2.89 -0.02 (distributed data is about 66%. For supernodes of size) 54.65 434.63 B
-0.63 -0.02 (, the expected storage utilization can be deter-) 110.2 422.47 B
0.61 -0.02 (mined as the average of the following two extreme cases:) 54.65 410.48 B
0.54 -0.02 (Assuming a certain amount of data occupies) 54.65 398.32 B
0.54 -0.02 ( blocks) 259.64 398.32 B
-0.01 -0.02 (for a maximally filled node. Then the same amount of data) 54.65 386.33 B
1.84 -0.02 (requires) 54.65 365.33 B
1.84 -0.02 ( blocks when using a minimally filled) 127.26 365.33 B
-0.38 -0.02 (node. On the average, a supernode storing the same amount) 54.65 347.52 B
5.71 -0.02 (of data requires) 54.65 326.52 B
3.55 -0.02 (blocks. From that, we obtain a storage utilization of) 54.65 307.15 B
0.57 -0.02 ( which for large) 163.67 288.23 B
3 F
0.57 -0.02 (m) 231.69 288.23 B
1 F
0.57 -0.02 ( is consider-) 238.89 288.23 B
-0.79 -0.02 (ably higher than 66%. For) 54.65 268.86 B
3 F
-0.79 -0.02 (m) 157.39 268.86 B
1 F
-0.79 -0.02 (=5, for example, the storage uti-) 164.59 268.86 B
-0.5 -0.02 (lization is about 88%.) 54.65 257.79 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.83 -0.02 (There are two interesting special cases of the X-) 324.65 738.29 B
-0.83 -0.02 (tree: \0501\051) 509.73 738.29 B
-0.5 -0.02 (none of the directory nodes is a supernode and \0502\051 the direc-) 306.65 727.29 B
-0.11 -0.02 (tory consists of only one large supernode \050root\051. In the first) 306.65 716.29 B
0.12 -0.02 (case, the X-) 306.65 705.29 B
0.12 -0.02 (tree has a completely hierarchical organization) 354.12 705.29 B
0.61 -0.02 (of the directory and is therefore similar to an R-) 306.65 694.29 B
0.61 -0.02 (tree. This) 502.47 694.29 B
0.69 -0.02 (case may occur for low dimensional and non-overlapping) 306.65 683.29 B
0 -0.02 (data. In the second case, the directory of the X-) 306.65 672.29 B
0 -0.02 (tree is basi-) 494.8 672.29 B
-0.56 -0.02 (cally one root-supernode which contains the lowest directo-) 306.65 661.29 B
2.64 -0.02 (ry level of the corresponding R-) 306.65 650.29 B
2.64 -0.02 (tree. The performance) 447.22 650.29 B
-0.8 -0.02 (therefore corresponds to the performance of a linear directo-) 306.65 639.29 B
0.39 -0.02 (ry scan. This case will only occur for high-dimensional or) 306.65 628.29 B
0.09 -0.02 (highly overlapping data where the directory would have to) 306.65 617.29 B
0.13 -0.02 (be completely searched anyway. The two cases also corre-) 306.65 606.29 B
-0.07 -0.02 (spond to the two extremes for the height of the tree and the) 306.65 595.29 B
-0.83 -0.02 (directory size. In case of a completely hierarchical organiza-) 306.65 584.29 B
1.26 -0.02 (tion, the height and size of the directory basically corre-) 306.65 573.29 B
0.52 -0.02 (spond to that of an R-) 306.65 562.29 B
0.52 -0.02 (tree. In the root-supernode case, the) 395.76 562.29 B
-0.5 -0.02 (size of the directory linearly depends on the dimension) 306.65 551.29 B
0.6 -0.02 (For 1 GBytes of 16-dimensional data, a block size of) 324.65 506.07 B
-0.39 -0.02 (4) 306.65 495.07 B
-0.39 -0.02 (KBytes, a storage utilization of 66% for data nodes, and 4) 314.11 495.07 B
-0.18 -0.02 (bytes per float, the size of the directory is about 44 MBytes) 306.65 484.07 B
0.68 -0.02 (for the root-supernode in contrast to about 72) 306.65 473.07 B
0.68 -0.02 (MBytes for) 494.34 473.07 B
-0.5 -0.02 (the completely hierarchical directory.) 306.65 462.07 B
0 11.6 Q
(3.2) 306.65 438.91 T
(Algorithms) 328.65 438.91 T
1 10 Q
-0.66 -0.02 (The most important algorithm of the X-) 324.65 419.29 B
-0.66 -0.02 (tree is the inser-) 478.83 419.29 B
2.93 -0.02 (tion algorithm. The insertion algorithm determines the) 306.65 408.29 B
-0.03 -0.02 (structure of the X-) 306.65 397.29 B
-0.03 -0.02 (tree which is a suitable combination of a) 379.77 397.29 B
-0.71 -0.02 (hierarchical and a linear structure. The main objective of the) 306.65 386.29 B
0.54 -0.02 (algorithm is to avoid splits which would produce overlap.) 306.65 375.29 B
0.86 -0.02 (The algorithm \050cf.) 306.65 364.29 B
0.87 (Figure 7) 384.39 364.29 P
0.86 -0.02 (\051 first determines the MBR in) 418.87 364.29 B
-0.97 -0.02 (which to insert the data object and recursively calls the inser-) 306.65 353.29 B
-0.31 -0.02 (tion) 306.65 342.29 B
-0.31 -0.02 (algorithm to actually insert the data object into the cor-) 324.3 342.29 B
0.55 -0.02 (responding node. If no split occurs in the recursive insert,) 306.65 331.29 B
-0.4 -0.02 (only the size of the corresponding MBRs has to be updated.) 306.65 320.29 B
1.18 -0.02 (In case of a split of the subnode, however, an additional) 306.65 309.29 B
-0.62 -0.02 (MBR has to be added to the current node which might cause) 306.65 298.29 B
-0.1 -0.02 (an overflow of the node. In this case, the current node calls) 306.65 287.29 B
0.46 -0.02 (the split algorithm \050cf.) 306.65 276.29 B
0.47 (Figure 8) 399.94 276.29 P
0.46 -0.02 (\051 which first tries to find a) 434.02 276.29 B
1.22 -0.02 (split of the node based on the topological and geometric) 306.65 265.29 B
-0.53 -0.02 (properties of the MBRs. Topological and geometric proper-) 306.65 254.29 B
0.41 -0.02 (ties of the MBRs are for example dead-space partitioning,) 306.65 243.29 B
2.65 -0.02 (extension of MBRs, etc. The heuristics of the R*-) 306.65 232.29 B
2.65 -0.02 (tree) 525.74 232.29 B
-0.22 -0.02 ([BKSS) 306.65 221.29 B
-0.22 -0.02 (90] split algorithm are an example for a topological) 337.37 221.29 B
-0.13 -0.02 (split to be used in this step. If the topological split however) 306.65 210.29 B
-0.06 -0.02 (results in high overlap, the split algorithm tries next to find) 306.65 199.29 B
-0.46 -0.02 (an overlap-minimal split which can be determined based on) 306.65 188.29 B
0.46 -0.02 (the split history \050cf. subsection 3.3\051. In subsection 3.3, we) 306.65 177.29 B
-0.13 -0.02 (show that for point data there always exists an overlap-free) 306.65 166.29 B
-0.41 -0.02 (split. The partitioning of the MBRs resulting from the over-) 306.65 155.29 B
-0.33 -0.02 (lap-minimal split, however, may result in underfilled nodes) 306.65 144.29 B
-0.42 -0.02 (which is unacceptable since it leads to a degeneration of the) 306.65 133.29 B
-0.71 -0.02 (tree and also deteriorates the space utilization. If the number) 306.65 122.29 B
-0.44 -0.02 (of MBRs in one of the partitions is below a given threshold,) 306.65 111.29 B
0.41 -0.02 (the split algorithm terminates without providing a split. In) 306.65 100.29 B
54.65 96.95 288.65 744.95 C
56.02 96.95 287.28 254.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
56.02 92.45 288.25 119.45 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Figure 6: Various Shapes of the X-) 89.92 112.79 T
(tree) 237.69 112.79 T
(in different dimensions) 122.96 100.79 T
1 10.5 Q
-0.06 (D=4:) 74.4 232.33 S
176.84 231.94 191.49 238.18 R
0.5 H
2 Z
N
176.84 222.57 191.49 228.81 R
N
129.29 175.94 187.9 182.19 R
3 X
V
0 X
N
201.26 222.57 230.57 228.81 R
3 X
V
0 X
N
J
215.91 228.81 215.91 222.57 2 L
J
215.91 228.81 215.91 228.06 2 L
N
[1.582 4.747] 1.582 I
215.91 228.06 215.91 223.32 2 L
N
J
215.91 223.32 215.91 222.57 2 L
N
J
142.79 182.19 142.79 175.94 2 L
J
142.79 182.19 142.79 181.44 2 L
N
[1.582 4.747] 1.582 I
142.79 181.44 142.79 176.69 2 L
N
J
142.79 176.69 142.79 175.94 2 L
N
J
157.44 182.19 157.44 175.94 2 L
J
157.44 182.19 157.44 181.44 2 L
N
[1.582 4.747] 1.582 I
157.44 181.44 157.44 176.69 2 L
N
J
157.44 176.69 157.44 175.94 2 L
N
J
172.09 182.19 172.09 175.94 2 L
J
172.09 182.19 172.09 181.44 2 L
N
[1.582 4.747] 1.582 I
172.09 181.44 172.09 176.69 2 L
N
J
172.09 176.69 172.09 175.94 2 L
N
J
-0.06 (D=8:) 73.46 185.71 S
101.44 213.2 116.09 219.44 R
N
121.59 213.2 136.24 219.44 R
N
141.74 213.2 156.39 219.44 R
N
161.88 213.2 176.54 219.44 R
N
197.29 213.2 211.95 219.44 R
N
237.59 213.2 266.89 219.44 R
3 X
V
0 X
N
J
269.64 219.44 269.64 213.2 2 L
J
269.64 219.44 269.64 218.69 2 L
N
[1.582 4.747] 1.582 I
269.64 218.69 269.64 213.95 2 L
N
J
269.64 213.95 269.64 213.2 2 L
N
J
137.77 222.57 167.07 228.81 R
3 X
V
0 X
N
J
152.42 228.81 152.42 222.57 2 L
J
152.42 228.81 152.42 228.06 2 L
N
[1.582 4.747] 1.582 I
152.42 228.06 152.42 223.32 2 L
N
J
152.42 223.32 152.42 222.57 2 L
N
J
217.44 213.2 232.09 219.44 R
N
98.69 206.95 103.58 210.07 1.56 RR
N
107.38 206.95 112.26 210.07 1.56 RR
N
116.06 206.95 120.94 210.07 1.56 RR
N
124.74 206.95 129.63 210.07 1.56 RR
N
133.43 206.95 138.31 210.07 1.56 RR
N
142.11 206.95 146.99 210.07 1.56 RR
N
150.79 206.95 155.68 210.07 1.56 RR
N
159.47 206.95 164.36 210.07 1.56 RR
N
168.16 206.95 173.04 210.07 1.56 RR
N
176.84 206.95 181.72 210.07 1.56 RR
N
186.61 206.95 191.49 210.07 1.56 RR
N
195.29 206.95 200.18 210.07 1.56 RR
N
203.97 206.95 208.86 210.07 1.56 RR
N
212.66 206.95 217.54 210.07 1.56 RR
N
221.34 206.95 226.22 210.07 1.56 RR
N
230.02 206.95 234.91 210.07 1.56 RR
N
238.71 206.95 243.59 210.07 1.56 RR
N
247.39 206.95 252.27 210.07 1.56 RR
N
256.07 206.95 260.96 210.07 1.56 RR
N
264.76 206.95 269.64 210.07 1.56 RR
N
108.6 175.94 123.25 182.19 R
N
230.43 175.94 259.74 182.19 R
3 X
V
0 X
N
J
245.08 182.19 245.08 175.94 2 L
J
245.08 182.19 245.08 181.44 2 L
N
[1.582 4.747] 1.582 I
245.08 181.44 245.08 176.69 2 L
N
J
245.08 176.69 245.08 175.94 2 L
N
J
209.74 175.94 224.39 182.19 R
N
107.38 169.7 112.26 172.82 1.56 RR
N
116.06 169.7 120.94 172.82 1.56 RR
N
124.74 169.7 129.63 172.82 1.56 RR
N
133.43 169.7 138.31 172.82 1.56 RR
N
142.11 169.7 146.99 172.82 1.56 RR
N
150.79 169.7 155.68 172.82 1.56 RR
N
159.47 169.7 164.36 172.82 1.56 RR
N
168.16 169.7 173.04 172.82 1.56 RR
N
176.84 169.7 181.72 172.82 1.56 RR
N
186.61 169.7 191.49 172.82 1.56 RR
N
195.29 169.7 200.18 172.82 1.56 RR
N
203.97 169.7 208.86 172.82 1.56 RR
N
212.66 169.7 217.54 172.82 1.56 RR
N
221.34 169.7 226.22 172.82 1.56 RR
N
230.02 169.7 234.91 172.82 1.56 RR
N
238.71 169.7 243.59 172.82 1.56 RR
N
247.39 169.7 252.27 172.82 1.56 RR
N
256.07 169.7 260.96 172.82 1.56 RR
N
154.86 185.31 213.47 191.56 R
3 X
V
0 X
N
J
172.77 191.56 172.77 185.31 2 L
J
172.77 191.56 172.77 190.81 2 L
N
[1.582 4.747] 1.582 I
172.77 190.81 172.77 186.06 2 L
N
J
172.77 186.06 172.77 185.31 2 L
N
J
187.42 191.56 187.42 185.31 2 L
J
187.42 191.56 187.42 190.81 2 L
N
[1.582 4.747] 1.582 I
187.42 190.81 187.42 186.06 2 L
N
J
187.42 186.06 187.42 185.31 2 L
N
J
202.07 191.56 202.07 185.31 2 L
J
202.07 191.56 202.07 190.81 2 L
N
[1.582 4.747] 1.582 I
202.07 190.81 202.07 186.06 2 L
N
J
202.07 186.06 202.07 185.31 2 L
N
J
118.23 138.69 176.84 144.94 R
3 X
V
0 X
N
J
132.88 144.94 132.88 138.69 2 L
J
132.88 144.94 132.88 144.19 2 L
N
[1.582 4.747] 1.582 I
132.88 144.19 132.88 139.44 2 L
N
J
132.88 139.44 132.88 138.69 2 L
N
J
147.54 144.94 147.54 138.69 2 L
J
147.54 144.94 147.54 144.19 2 L
N
[1.582 4.747] 1.582 I
147.54 144.19 147.54 139.44 2 L
N
J
147.54 139.44 147.54 138.69 2 L
N
J
162.19 144.94 162.19 138.69 2 L
J
162.19 144.94 162.19 144.19 2 L
N
[1.582 4.747] 1.582 I
162.19 144.19 162.19 139.44 2 L
N
J
162.19 139.44 162.19 138.69 2 L
N
J
-0.06 (D=32:) 73.46 148.45 S
176.84 148.06 191.49 154.31 R
N
107.38 132.45 112.26 135.57 1.56 RR
N
116.06 132.45 120.94 135.57 1.56 RR
N
124.74 132.45 129.63 135.57 1.56 RR
N
133.43 132.45 138.31 135.57 1.56 RR
N
142.11 132.45 146.99 135.57 1.56 RR
N
150.79 132.45 155.68 135.57 1.56 RR
N
159.47 132.45 164.36 135.57 1.56 RR
N
168.16 132.45 173.04 135.57 1.56 RR
N
176.84 132.45 181.72 135.57 1.56 RR
N
186.61 132.45 191.49 135.57 1.56 RR
N
195.29 132.45 200.18 135.57 1.56 RR
N
203.97 132.45 208.86 135.57 1.56 RR
N
212.66 132.45 217.54 135.57 1.56 RR
N
221.34 132.45 226.22 135.57 1.56 RR
N
230.02 132.45 234.91 135.57 1.56 RR
N
238.71 132.45 243.59 135.57 1.56 RR
N
247.39 132.45 252.27 135.57 1.56 RR
N
256.07 132.45 260.96 135.57 1.56 RR
N
191.49 138.69 250.1 144.94 R
3 X
V
0 X
N
J
206.15 144.94 206.15 138.69 2 L
J
206.15 144.94 206.15 144.19 2 L
N
[1.582 4.747] 1.582 I
206.15 144.19 206.15 139.44 2 L
N
J
206.15 139.44 206.15 138.69 2 L
N
J
220.8 144.94 220.8 138.69 2 L
J
220.8 144.94 220.8 144.19 2 L
N
[1.582 4.747] 1.582 I
220.8 144.19 220.8 139.44 2 L
N
J
220.8 139.44 220.8 138.69 2 L
N
J
235.45 144.94 235.45 138.69 2 L
J
235.45 144.94 235.45 144.19 2 L
N
[1.582 4.747] 1.582 I
235.45 144.19 235.45 139.44 2 L
N
J
235.45 139.44 235.45 138.69 2 L
N
J
182.03 216.32 191.8 216.32 2 L
J
182.03 216.32 182.78 216.32 2 L
N
[1.181 3.544] 1.181 I
182.78 216.32 191.05 216.32 2 L
N
J
191.05 216.32 191.8 216.32 2 L
N
J
193.93 179.07 203.7 179.07 2 L
J
193.93 179.07 194.68 179.07 2 L
N
[1.181 3.544] 1.181 I
194.68 179.07 202.95 179.07 2 L
N
J
202.95 179.07 203.7 179.07 2 L
N
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
65.25 125.69 274.75 241.45 R
N
65.02 199.77 274.52 199.77 2 L
N
65.02 161.84 274.52 161.84 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 96.95 288.65 744.95 C
-8.35 24.95 603.65 816.95 C
54.65 96.95 288.65 744.95 C
156.52 491.07 269.45 505.46 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(c) 157.52 497.71 T
3 7 Q
(t) 161.86 494.82 T
3 9 Q
(t) 170.68 497.71 T
(y) 173.71 497.71 T
(p) 178.24 497.71 T
(e) 183.26 497.71 T
4 F
(\327) 166.18 497.71 T
3 F
(c) 196.83 497.71 T
3 7 Q
(l) 201.17 494.82 T
3 9 Q
(l) 209.87 497.71 T
(e) 212.9 497.71 T
(v) 217.42 497.71 T
(e) 221.95 497.71 T
(l) 226.48 497.71 T
4 F
(\327) 205.37 497.71 T
3 F
(c) 238.56 497.71 T
3 7 Q
(s) 242.89 494.82 T
3 9 Q
(s) 252.36 497.71 T
(i) 256.39 497.71 T
(z) 259.42 497.71 T
(e) 263.46 497.71 T
4 F
(\327) 247.86 497.71 T
1 F
(+) 189.51 497.71 T
(+) 231.23 497.71 T
54.65 96.95 288.65 744.95 C
-8.35 24.95 603.65 816.95 C
54.65 96.95 288.65 744.95 C
54.65 475.59 95.4 489.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(c) 55.65 482.24 T
3 7 Q
(t) 59.99 479.34 T
3 9 Q
(c) 71.05 482.24 T
3 7 Q
(l) 75.39 479.34 T
3 9 Q
(c) 86.33 482.24 T
3 7 Q
(s) 90.67 479.34 T
1 9 Q
(\310) 64.3 482.24 T
(\310) 79.59 482.24 T
54.65 96.95 288.65 744.95 C
-8.35 24.95 603.65 816.95 C
54.65 96.95 288.65 744.95 C
54.65 418.22 110.2 430.22 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(m) 55.65 422.47 T
(B) 68.96 422.47 T
(l) 74.99 422.47 T
(o) 78.02 422.47 T
(c) 83.05 422.47 T
(k) 87.58 422.47 T
(S) 92.11 422.47 T
(i) 97.14 422.47 T
(z) 100.17 422.47 T
(e) 104.2 422.47 T
4 F
(\327) 64.39 422.47 T
54.65 96.95 288.65 744.95 C
-8.35 24.95 603.65 816.95 C
54.65 96.95 288.65 744.95 C
237.24 394.07 259.64 406.07 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(X) 238.5 398.32 T
(m) 251.14 398.32 T
4 F
(\327) 246.65 398.32 T
54.65 96.95 288.65 744.95 C
-8.35 24.95 603.65 816.95 C
54.65 96.95 288.65 744.95 C
91.01 355.26 127.26 381.92 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(X) 92.28 365.33 T
(m) 109.92 370.53 T
1 7 Q
(2) 116.76 375.67 T
3 9 Q
(m) 105.09 359.51 T
1 F
(1) 120.58 359.51 T
(\320) 113.84 359.51 T
(-) 105.09 365.54 T
(-) 106.59 365.54 T
(-) 108.09 365.54 T
(-) 109.59 365.54 T
(-) 111.09 365.54 T
(-) 112.58 365.54 T
(-) 114.08 365.54 T
(-) 115.58 365.54 T
(-) 117.08 365.54 T
(-) 118.58 365.54 T
(-) 120.08 365.54 T
(-) 121.58 365.54 T
(-) 122.09 365.54 T
4 F
(\327) 100.42 365.33 T
54.65 96.95 288.65 744.95 C
-8.35 24.95 603.65 816.95 C
54.65 96.95 288.65 744.95 C
136.13 314.89 288.65 343.11 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(X) 141.94 326.52 T
(m) 154.58 326.52 T
4 F
(\327) 150.08 326.52 T
3 F
(X) 170.91 326.52 T
(m) 188.55 331.73 T
1 7 Q
(2) 195.39 336.86 T
3 9 Q
(m) 183.73 320.7 T
1 F
(1) 199.22 320.7 T
(\320) 192.47 320.7 T
(-) 183.73 326.73 T
(-) 185.23 326.73 T
(-) 186.72 326.73 T
(-) 188.22 326.73 T
(-) 189.72 326.73 T
(-) 191.22 326.73 T
(-) 192.72 326.73 T
(-) 194.22 326.73 T
(-) 195.71 326.73 T
(-) 197.21 326.73 T
(-) 198.71 326.73 T
(-) 200.21 326.73 T
(-) 200.72 326.73 T
4 F
(\327) 179.05 326.52 T
1 F
(+) 163.32 326.52 T
4 F
(\350) 138.04 321.99 T
(\370) 204.1 321.99 T
(\346) 138.04 329.7 T
(\366) 204.1 329.7 T
1 F
(2) 213.53 326.52 T
4 F
(\244) 209.78 326.52 T
3 F
(X) 232.35 326.52 T
(m) 242.6 331.73 T
1 F
(2) 253.26 331.73 T
3 F
(m) 258.29 331.73 T
1 F
(1) 273.78 331.73 T
(\320) 267.03 331.73 T
4 F
(\050) 249.62 331.73 T
(\051) 278.92 331.73 T
1 F
(2) 249.74 320.7 T
3 F
(m) 254.77 320.7 T
1 F
(2) 270.27 320.7 T
(\320) 263.52 320.7 T
(-) 242.6 326.73 T
(-) 244.09 326.73 T
(-) 245.59 326.73 T
(-) 247.09 326.73 T
(-) 248.59 326.73 T
(-) 250.09 326.73 T
(-) 251.59 326.73 T
(-) 253.08 326.73 T
(-) 254.58 326.73 T
(-) 256.08 326.73 T
(-) 257.58 326.73 T
(-) 259.08 326.73 T
(-) 260.58 326.73 T
(-) 262.08 326.73 T
(-) 263.57 326.73 T
(-) 265.07 326.73 T
(-) 266.57 326.73 T
(-) 268.07 326.73 T
(-) 269.57 326.73 T
(-) 271.07 326.73 T
(-) 272.56 326.73 T
(-) 274.06 326.73 T
(-) 275.56 326.73 T
(-) 277.06 326.73 T
(-) 278.56 326.73 T
(-) 278.92 326.73 T
4 F
(\350) 238.78 321.99 T
(\370) 282.29 321.99 T
(\346) 238.78 329.7 T
(\366) 282.29 329.7 T
1 F
(=) 222.52 326.52 T
54.65 96.95 288.65 744.95 C
-8.35 24.95 603.65 816.95 C
54.65 96.95 288.65 744.95 C
54.65 276.6 163.67 302.74 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(m) 56.11 288.23 T
(m) 72.42 293.43 T
1 F
(2) 83.08 293.43 T
3 F
(m) 88.11 293.43 T
1 F
(1) 103.6 293.43 T
(\320) 96.86 293.43 T
4 F
(\050) 79.44 293.43 T
(\051) 108.74 293.43 T
1 F
(2) 79.57 282.41 T
3 F
(m) 84.6 282.41 T
1 F
(2) 100.09 282.41 T
(\320) 93.34 282.41 T
(-) 72.42 288.44 T
(-) 73.92 288.44 T
(-) 75.41 288.44 T
(-) 76.91 288.44 T
(-) 78.41 288.44 T
(-) 79.91 288.44 T
(-) 81.41 288.44 T
(-) 82.91 288.44 T
(-) 84.4 288.44 T
(-) 85.9 288.44 T
(-) 87.4 288.44 T
(-) 88.9 288.44 T
(-) 90.4 288.44 T
(-) 91.9 288.44 T
(-) 93.39 288.44 T
(-) 94.89 288.44 T
(-) 96.39 288.44 T
(-) 97.89 288.44 T
(-) 99.39 288.44 T
(-) 100.89 288.44 T
(-) 102.39 288.44 T
(-) 103.89 288.44 T
(-) 105.38 288.44 T
(-) 106.88 288.44 T
(-) 108.38 288.44 T
(-) 108.74 288.44 T
4 F
(\350) 68.6 283.7 T
(\370) 112.11 283.7 T
(\346) 68.6 291.41 T
(\366) 112.11 291.41 T
(\244) 64.85 288.23 T
1 F
(2) 129.79 293.23 T
3 F
(m) 141.04 293.23 T
1 F
(2) 156.53 293.23 T
(\320) 149.78 293.23 T
4 F
(\327) 136.54 293.23 T
1 F
(2) 129.79 282.2 T
3 F
(m) 141.04 282.2 T
1 F
(1) 156.53 282.2 T
(\320) 149.78 282.2 T
4 F
(\327) 136.54 282.2 T
1 F
(-) 129.79 288.23 T
(-) 131.29 288.23 T
(-) 132.79 288.23 T
(-) 134.29 288.23 T
(-) 135.79 288.23 T
(-) 137.29 288.23 T
(-) 138.79 288.23 T
(-) 140.28 288.23 T
(-) 141.78 288.23 T
(-) 143.28 288.23 T
(-) 144.78 288.23 T
(-) 146.28 288.23 T
(-) 147.78 288.23 T
(-) 149.27 288.23 T
(-) 150.77 288.23 T
(-) 152.27 288.23 T
(-) 153.77 288.23 T
(-) 155.27 288.23 T
(-) 156.77 288.23 T
(-) 158.03 288.23 T
(=) 120.05 288.23 T
54.65 96.95 288.65 744.95 C
-8.35 24.95 603.65 816.95 C
306.65 96.95 540.65 744.95 C
306.9 518.84 540.4 541.86 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(D) 307.97 528.9 T
(i) 315 528.9 T
(r) 318.03 528.9 T
(S) 322.06 528.9 T
(i) 327.09 528.9 T
(z) 330.13 528.9 T
(e) 334.16 528.9 T
(D) 342.39 528.9 T
4 F
(\050) 338.68 528.9 T
(\051) 349.53 528.9 T
3 F
(D) 387.46 534.11 T
(a) 394.49 534.11 T
(t) 399.52 534.11 T
(a) 402.55 534.11 T
(b) 407.58 534.11 T
(a) 412.61 534.11 T
(s) 417.64 534.11 T
(e) 421.67 534.11 T
(S) 426.2 534.11 T
(i) 431.23 534.11 T
(z) 434.26 534.11 T
(e) 438.29 534.11 T
(B) 366.84 523.09 T
(l) 372.87 523.09 T
(o) 375.9 523.09 T
(c) 380.93 523.09 T
(k) 385.46 523.09 T
(S) 389.98 523.09 T
(i) 395.01 523.09 T
(z) 398.05 523.09 T
(e) 402.08 523.09 T
(S) 412.82 523.09 T
(t) 417.85 523.09 T
(o) 420.88 523.09 T
(r) 425.91 523.09 T
(a) 429.94 523.09 T
(g) 434.97 523.09 T
(e) 440 523.09 T
(U) 444.53 523.09 T
(t) 451.56 523.09 T
(i) 454.59 523.09 T
(l) 457.62 523.09 T
1 F
(.) 460.66 523.09 T
4 F
(\327) 408.32 523.09 T
1 F
(-) 366.77 529.11 T
(-) 368.27 529.11 T
(-) 369.76 529.11 T
(-) 371.26 529.11 T
(-) 372.76 529.11 T
(-) 374.26 529.11 T
(-) 375.76 529.11 T
(-) 377.26 529.11 T
(-) 378.76 529.11 T
(-) 380.25 529.11 T
(-) 381.75 529.11 T
(-) 383.25 529.11 T
(-) 384.75 529.11 T
(-) 386.25 529.11 T
(-) 387.75 529.11 T
(-) 389.24 529.11 T
(-) 390.74 529.11 T
(-) 392.24 529.11 T
(-) 393.74 529.11 T
(-) 395.24 529.11 T
(-) 396.74 529.11 T
(-) 398.24 529.11 T
(-) 399.73 529.11 T
(-) 401.23 529.11 T
(-) 402.73 529.11 T
(-) 404.23 529.11 T
(-) 405.73 529.11 T
(-) 407.23 529.11 T
(-) 408.73 529.11 T
(-) 410.22 529.11 T
(-) 411.72 529.11 T
(-) 413.22 529.11 T
(-) 414.72 529.11 T
(-) 416.22 529.11 T
(-) 417.72 529.11 T
(-) 419.21 529.11 T
(-) 420.71 529.11 T
(-) 422.21 529.11 T
(-) 423.71 529.11 T
(-) 425.21 529.11 T
(-) 426.71 529.11 T
(-) 428.2 529.11 T
(-) 429.7 529.11 T
(-) 431.2 529.11 T
(-) 432.7 529.11 T
(-) 434.2 529.11 T
(-) 435.7 529.11 T
(-) 437.2 529.11 T
(-) 438.7 529.11 T
(-) 440.19 529.11 T
(-) 441.69 529.11 T
(-) 443.19 529.11 T
(-) 444.69 529.11 T
(-) 446.19 529.11 T
(-) 447.69 529.11 T
(-) 449.18 529.11 T
(-) 450.68 529.11 T
(-) 452.18 529.11 T
(-) 453.68 529.11 T
(-) 455.18 529.11 T
(-) 456.68 529.11 T
(-) 458.17 529.11 T
(-) 459.67 529.11 T
(-) 459.92 529.11 T
(2) 469.83 528.9 T
3 F
(B) 481.15 528.9 T
(y) 487.18 528.9 T
(t) 491.71 528.9 T
(e) 494.74 528.9 T
(s) 499.27 528.9 T
(F) 503.3 528.9 T
(l) 509.33 528.9 T
(o) 512.36 528.9 T
(a) 517.39 528.9 T
(t) 522.42 528.9 T
(D) 531.9 528.9 T
4 F
(\327) 465.34 528.9 T
(\327) 476.58 528.9 T
(\327) 527.33 528.9 T
1 F
(=) 357.02 528.9 T
306.65 96.95 540.65 744.95 C
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 1 0.6 0 0 0 0.4 1]
[ 0 0.2 0.2 0.8 0.2 0 0]
[ 0.5 0 0 0 0.5 1 1]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54.65 770.95 540.65 780.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 96.95 540.65 402.95 R
V
1 10 Q
0 X
0.49 -0.02 (this case, the current node is extended to become a super-) 54.65 396.29 B
-0.98 -0.02 (node of twice the standard block size. If the same case occurs) 54.65 385.06 B
-0.84 -0.02 (for an already existing supernode, the supernode is extended) 54.65 373.83 B
1.33 -0.02 (by one additional block. Obviously, supernodes are only) 54.65 362.6 B
-0.85 -0.02 (created or extended if there is no possibility to find a suitable) 54.65 351.37 B
-0.33 -0.02 (hierarchical structure of the directory. If a supernode is cre-) 54.65 340.14 B
-0.66 -0.02 (ated or extended, there may be not enough contiguous space) 54.65 328.92 B
-0.25 -0.02 (on disk to sequentially store the supernode. In this case, the) 54.65 317.69 B
0.55 -0.02 (disk manager has to perform a local reorganization. Since) 54.65 306.46 B
-0.53 -0.02 (supernodes are created or extended in main memory, the lo-) 54.65 295.23 B
0.1 -0.02 (cal reorganization is only necessary when writing back the) 54.65 284 B
-0.18 -0.02 (supernodes on secondary storage which does not occur fre-) 54.65 272.77 B
-0.02 (quently.) 54.65 261.55 S
-0.62 -0.02 (For point data, overlap in the X-) 72.65 243.55 B
-0.62 -0.02 (tree directory may only) 197.39 243.55 B
-0.75 -0.02 (occur if the overlap induced by the topological split is below) 54.65 232.32 B
-0.34 -0.02 (a threshold overlap value \050MAX_OVERLAP\051. In that case,) 54.65 221.09 B
-0.01 -0.02 (the overlap-minimal split and the possible creation of a su-) 54.65 209.86 B
0.81 -0.02 (pernode do not make sense. The maximum overlap value) 54.65 198.63 B
0.49 -0.02 (which is acceptable is basically a system constant and de-) 54.65 187.4 B
0.36 -0.02 (pends on the page access time \050) 54.65 176.18 B
3 F
0.36 -0.02 (T) 182.29 176.18 B
3 8 Q
0.29 -0.02 (IO) 187.83 173.68 B
1 10 Q
0.36 -0.02 (\051, the time to transfer a) 196.24 176.18 B
-0.33 -0.02 (block from disk into main memory \050) 54.65 164.95 B
3 F
-0.33 -0.02 (T) 197.55 164.95 B
3 8 Q
-0.26 -0.02 (Tr) 203.09 162.45 B
1 10 Q
-0.33 -0.02 (\051, and the CPU time) 210.62 164.95 B
-0.63 -0.02 (necessary to process a block \050) 54.65 153.72 B
3 F
-0.63 -0.02 (T) 170.04 153.72 B
3 8 Q
-0.5 -0.02 (CPU) 175.59 151.22 B
1 10 Q
-0.63 -0.02 (\051. The maximum overlap) 191.54 153.72 B
1.23 -0.02 (value \050) 54.65 142.49 B
3 F
1.23 -0.02 (MaxO) 83.22 142.49 B
1 8 Q
0.98 -0.02 (1) 108.14 146.49 B
1 10 Q
1.23 -0.02 (\051 may be determined approximately by the) 112.12 142.49 B
0.46 -0.02 (balance between reading a supernode of size 2*BlockSize) 54.65 131.26 B
54.65 112.95 288.65 127.93 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 112.95 288.65 127.93 R
7 X
0 0 0 1 0 0 0 K
V
63.65 125.91 207.65 125.91 2 L
V
0.5 H
2 Z
0 X
N
-8.35 24.95 603.65 816.95 C
1 8 Q
0 X
0 0 0 1 0 0 0 K
(1.) 54.65 107.62 T
3 F
1.54 (MaxO) 72.65 107.62 P
1 F
1.54 ( is the probability that we ha) 92.64 107.62 P
1.54 (v) 192.84 107.62 P
1.54 (e to access both son nodes) 196.72 107.62 P
(because of o) 72.65 99.62 T
(v) 112.51 99.62 T
(erlap during the search.) 116.39 99.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0.57 -0.02 (and reading 2 blocks with a probability of MaxO and one) 306.65 396.29 B
1.16 -0.02 (block with a probability of \0501-) 306.65 385.29 B
1.16 -0.02 (MaxO\051. This estimation is) 432.66 385.29 B
0.14 -0.02 (only correct for the most simple case of initially creating a) 306.65 374.29 B
-0.83 -0.02 (supernode. It does not take the effect of further splits into ac-) 306.65 363.29 B
1.42 -0.02 (count. Nevertheless, for practical purposes the following) 306.65 352.29 B
-0.5 -0.02 (equation provides a good estimation:) 306.65 341.29 B
1.84 -0.02 (For realistic system values measured in our experi-) 324.65 270.01 B
-0.33 -0.02 (ments \050) 306.65 259.01 B
3 F
-0.33 -0.02 (T) 335.9 259.01 B
3 8 Q
-0.26 -0.02 (I0) 341.44 256.51 B
1 10 Q
-0.33 -0.02 ( = 20 ms,) 348.07 259.01 B
3 F
-0.33 -0.02 (T) 386.36 259.01 B
3 8 Q
-0.26 -0.02 (Tr) 391.9 256.51 B
1 10 Q
-0.33 -0.02 ( = 4) 399.43 259.01 B
-0.33 -0.02 (ms,) 416.81 259.01 B
3 F
-0.33 -0.02 (T) 433.07 259.01 B
3 8 Q
-0.26 -0.02 (CPU) 438.61 256.51 B
1 10 Q
-0.33 -0.02 ( = 1) 454.57 259.01 B
-0.33 -0.02 (ms\051, the resulting) 471.95 259.01 B
3 F
-0.56 -0.02 (MaxO) 306.65 248.01 B
1 F
-0.56 -0.02 (value is 20%. Note that in the above formula, the fact) 333.48 248.01 B
1.68 -0.02 (that the probability of a node being in main memory is) 306.65 237.01 B
-0.58 -0.02 (increasing) 306.65 226.01 B
-0.58 -0.02 (due to the decreasing directory size in case of us-) 350.03 226.01 B
0.82 -0.02 (ing the supernode has not yet been considered. The other) 306.65 215.01 B
1.71 -0.02 (constant of our algorithm \050MIN_FANOUT\051 is the usual) 306.65 204.01 B
-0.51 -0.02 (minimum fanout value of a node which is similar to the cor-) 306.65 193.01 B
0.06 -0.02 (responding value used in other index structures. An appro-) 306.65 182.01 B
-0.5 -0.02 (priate value of MIN_FANOUT is between 35% and 45%.) 306.65 171.01 B
0.61 -0.02 (The algorithms to query the X-tree \050point, range, and) 324.65 155.29 B
-0.25 -0.02 (nearest neighbor queries\051 are similar to the algorithms used) 306.65 144.29 B
-0.53 -0.02 (in the R*-tree since only minor changes are necessary in ac-) 306.65 133.29 B
0.9 -0.02 (cessing supernodes. The delete and update operations are) 306.65 122.29 B
0.23 -0.02 (also simple modifications of the corresponding R*-tree al-) 306.65 111.29 B
0.64 -0.02 (gorithms. The only difference occurs in case of an under-) 306.65 100.29 B
306.65 96.95 540.65 402.95 C
306.65 301.74 540.65 325.64 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 8 Q
0 X
0 0 0 1 0 0 0 K
(M) 307.79 318.64 T
(a) 315.07 318.64 T
(x) 319.69 318.64 T
(O) 323.86 318.64 T
1 F
(2) 335.63 318.64 T
3 F
(T) 348.86 318.64 T
3 7 Q
(I) 354.28 315.44 T
(O) 357.15 315.44 T
3 8 Q
(T) 370.71 318.64 T
3 7 Q
(T) 376.08 315.44 T
(r) 380.51 315.44 T
3 8 Q
(T) 391.91 318.64 T
3 7 Q
(C) 397.27 315.44 T
(P) 402.48 315.44 T
(U) 407.3 315.44 T
1 8 Q
(+) 364.2 318.64 T
(+) 385.4 318.64 T
4 F
(\050) 345.63 318.64 T
(\051) 413.22 318.64 T
(\327) 331.63 318.64 T
(\327) 341.63 318.64 T
1 F
(1) 427.62 318.64 T
3 F
(M) 439.77 318.64 T
(a) 447.05 318.64 T
(x) 451.66 318.64 T
(O) 455.83 318.64 T
1 F
(\320) 433.62 318.64 T
4 F
(\050) 424.39 318.64 T
(\051) 462.17 318.64 T
3 F
(T) 474.07 318.64 T
3 7 Q
(I) 479.49 315.44 T
(O) 482.36 315.44 T
3 8 Q
(T) 495.92 318.64 T
3 7 Q
(T) 501.29 315.44 T
(r) 505.72 315.44 T
3 8 Q
(T) 517.11 318.64 T
3 7 Q
(C) 522.48 315.44 T
(P) 527.69 315.44 T
(U) 532.51 315.44 T
1 8 Q
(+) 489.41 318.64 T
(+) 510.6 318.64 T
4 F
(\050) 470.83 318.64 T
(\051) 538.43 318.64 T
(\327) 466.84 318.64 T
1 F
(+) 417.88 318.64 T
3 F
(T) 320.16 307.69 T
3 7 Q
(I) 325.58 304.49 T
(O) 328.45 304.49 T
1 8 Q
(2) 342.01 307.69 T
3 F
(T) 355.24 307.69 T
3 7 Q
(T) 360.61 304.49 T
(r) 365.04 304.49 T
3 8 Q
(T) 376.43 307.69 T
3 7 Q
(C) 381.8 304.49 T
(P) 387.01 304.49 T
(U) 391.82 304.49 T
1 8 Q
(+) 369.92 307.69 T
4 F
(\050) 352.01 307.69 T
(\051) 397.75 307.69 T
(\327) 348.01 307.69 T
1 F
(+) 335.5 307.69 T
(=) 311.65 307.69 T
306.65 96.95 540.65 402.95 C
-8.35 24.95 603.65 816.95 C
306.65 96.95 540.65 402.95 C
357.77 282.4 489.52 310.23 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(M) 384.09 295.08 T
(a) 392.12 295.08 T
(x) 397.15 295.08 T
(O) 401.68 295.08 T
(T) 431.21 302.48 T
3 7 Q
(T) 437.25 299.58 T
(r) 441.68 299.58 T
3 9 Q
(T) 454.13 302.48 T
3 7 Q
(C) 460.17 299.58 T
(P) 465.38 299.58 T
(U) 470.19 299.58 T
1 9 Q
(+) 446.81 302.48 T
3 F
(T) 419.42 289.05 T
3 7 Q
(I) 425.51 286.15 T
(O) 428.38 286.15 T
3 9 Q
(T) 443 289.05 T
3 7 Q
(T) 449.04 286.15 T
(r) 453.47 286.15 T
3 9 Q
(T) 465.93 289.05 T
3 7 Q
(C) 471.96 286.15 T
(P) 477.17 286.15 T
(U) 481.99 286.15 T
1 9 Q
(+) 435.68 289.05 T
(+) 458.6 289.05 T
(-) 419.42 295.08 T
(-) 420.92 295.08 T
(-) 422.41 295.08 T
(-) 423.91 295.08 T
(-) 425.41 295.08 T
(-) 426.91 295.08 T
(-) 428.41 295.08 T
(-) 429.91 295.08 T
(-) 431.4 295.08 T
(-) 432.9 295.08 T
(-) 434.4 295.08 T
(-) 435.9 295.08 T
(-) 437.4 295.08 T
(-) 438.9 295.08 T
(-) 440.39 295.08 T
(-) 441.89 295.08 T
(-) 443.39 295.08 T
(-) 444.89 295.08 T
(-) 446.39 295.08 T
(-) 447.89 295.08 T
(-) 449.39 295.08 T
(-) 450.89 295.08 T
(-) 452.38 295.08 T
(-) 453.88 295.08 T
(-) 455.38 295.08 T
(-) 456.88 295.08 T
(-) 458.38 295.08 T
(-) 459.88 295.08 T
(-) 461.37 295.08 T
(-) 462.87 295.08 T
(-) 464.37 295.08 T
(-) 465.87 295.08 T
(-) 467.37 295.08 T
(-) 468.87 295.08 T
(-) 470.36 295.08 T
(-) 471.86 295.08 T
(-) 473.36 295.08 T
(-) 474.86 295.08 T
(-) 476.36 295.08 T
(-) 477.86 295.08 T
(-) 479.36 295.08 T
(-) 480.86 295.08 T
(-) 482.35 295.08 T
(-) 483.85 295.08 T
(-) 484.35 295.08 T
(=) 411.17 295.08 T
4 F
(\336) 365.52 295.08 T
306.65 96.95 540.65 402.95 C
-8.35 24.95 603.65 816.95 C
54.65 415.09 540.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 415.09 540.65 744.95 R
7 X
0 0 0 1 0 0 0 K
V
59.48 422.96 527.18 434.63 R
V
0 10 Q
0 X
(Figure 7: X-) 171 427.96 T
(tree Insertion Algorithm for Directory Nodes) 223.21 427.96 T
67.35 435.81 517.24 739.38 R
7 X
V
5 9 Q
0 X
(int X_DirectoryNode::insert\050DataObject obj, X_Node **new_node\051) 85.35 733.38 T
({) 85.35 724.38 T
(SET_OF_MBR *s1, *s2;) 103.24 715.38 T
(X_Node *follow, *new) 103.24 706.38 T
(_son;) 211.24 706.38 T
(int return_value;) 103.24 697.38 T
(follow = choose_subtree\050obj\051;) 103.24 683.38 T
(// choose a son node to insert obj into) 294.12 683.38 T
(return_value = follow->insert\050obj, &new_son\051;) 103.24 674.38 T
(// insert obj into subtree) 350.81 674.38 T
(update_mbr\050follow->calc_mbr\050\051\051;) 103.24 665.38 T
(// update MBR of old son node) 294.12 665.38 T
(if \050return_value == SPLIT\051{) 103.24 651.38 T
(add_mbr\050new_son->calc_mbr\050\051\051;) 124.04 642.38 T
5 8.3 Q
-1.22 (// insert mbr of new son node into current node) 294.12 642.38 P
5 9 Q
(if \050num_of_mbrs\050\051 > CAPACITY\051) 124.04 628.38 T
({) 280.64 628.38 T
(// overflow occurs) 294.12 628.38 T
(if \050split\050mbrs, s1, s2\051 == TRUE\051{) 152.38 619.38 T
(// topological or overlap-minimal split was successfull) 180.73 610.38 T
(set_mbrs\050s1\051;) 180.73 601.38 T
(*new_node = new X_DirectoryNode\050s2\051;) 180.73 592.38 T
(return SPLIT;) 180.73 578.38 T
(}) 152.38 569.38 T
(else // there is no good split) 152.38 560.38 T
({) 152.38 551.38 T
(*new_node = new X_SuperNode\050\051;) 180.73 542.38 T
(\050*new_node\051->set_mbrs\050mbrs\051;) 180.73 533.38 T
(return SUPERNODE;) 180.73 519.38 T
(}) 152.38 510.38 T
(}) 124.04 506.38 T
(} else if \050return_value == SUPERNODE\051{) 103.24 495.38 T
(// node \324follow\325 becomes a supernode) 313.84 495.38 T
(remove_son\050follow\051;) 124.04 486.38 T
(insert_son\050new_son\051;) 124.04 477.38 T
(}) 103.24 468.38 T
(return NO_SPLIT;) 103.24 454.38 T
(}) 85.35 445.38 T
71.45 438.66 519.74 742.41 R
0.5 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 1 0.6 0 0 0 0.4 1]
[ 0 0.2 0.2 0.8 0.2 0 0]
[ 0.5 0 0 0 0.5 1 1]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54.65 770.95 540.65 780.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 96.95 540.65 483.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
-0.81 -0.02 (flow of a supernode. If the supernode consists of two blocks,) 54.65 477.29 B
-0.53 -0.02 (it is converted to a normal directory node. Otherwise, that is) 54.65 466.29 B
-0.89 -0.02 (if the supernode consists of more than two blocks, we reduce) 54.65 455.29 B
-0.84 -0.02 (the size of the supernode by one block. The update operation) 54.65 444.29 B
-0.58 -0.02 (can be seen as a combination of a delete and an insert opera-) 54.65 433.29 B
-0.5 -0.02 (tion and is therefore straightforward.) 54.65 422.29 B
0 11.6 Q
(3.3) 54.65 397.26 T
(Determining the Overlap-Minimal Split) 76.65 397.26 T
1 10 Q
-0.69 -0.02 (For determining an overlap-minimal split of a directory) 72.65 378.77 B
-0.7 -0.02 (node, we have to find a partitioning of the MBRs in the node) 54.65 367.77 B
2.01 -0.02 (into two subsets such that the overlap of the minimum) 54.65 356.77 B
-0.78 -0.02 (bounding hyperrectangles of the two sets is minimal. In case) 54.65 345.77 B
0.72 -0.02 (of point data, it is always possible to find an overlap-free) 54.65 334.77 B
-0.92 -0.02 (split, but in general it is not possible to guarantee that the two) 54.65 323.77 B
-0.5 -0.02 (sets are balanced, i.e. have about the same cardinality.) 54.65 312.77 B
2 11 Q
(Definition) 54.65 293.81 T
2 10 Q
(2) 103.85 293.81 T
1 F
( \050Split\051) 108.85 293.81 T
-0.85 -0.02 (The split of a node) 54.65 278.86 B
-0.85 -0.02 ( into two subnodes) 216.27 278.86 B
14.03 -0.02 ( and) 143.83 262.86 B
-0.5 -0.02 (\050) 54.65 246.86 B
-0.5 -0.02 ( and) 86.21 246.86 B
-0.5 -0.02 (\051 is defined as) 132.82 246.86 B
-0.5 -0.02 (.) 272.34 225.81 B
-0.5 -0.02 (The split is called) 54.65 206.64 B
-0.5 -0.02 (\0501\051) 58.25 194.56 B
-0.5 -0.02 (overlap-minimal) 72.65 194.56 B
-0.5 -0.02 (iff) 140.99 194.56 B
-0.02 (\0502\051) 58.25 179.16 S
-0.5 -0.02 ( overlap-free) 72.65 179.16 B
-0.02 (iff) 141.32 179.16 S
-0.02 (\0503\051) 58.25 162.26 S
-0.5 -0.02 ( balanced) 72.65 162.26 B
-0.5 -0.02 (iff) 141.32 162.26 B
-0.5 -0.02 (.) 230.72 162.26 B
0.17 -0.02 (For obtaining a suitable directory structure, we are in-) 72.65 144.29 B
0.22 -0.02 (terested in overlap-minimal \050overlap-free\051 splits which are) 54.65 133.29 B
0.37 -0.02 (balanced. For simplification, in the following we focus on) 54.65 122.29 B
1.6 -0.02 (overlap-free splits and assume to have high-dimensional) 54.65 111.29 B
-0.09 -0.02 (uniformly distributed point data.) 54.65 100.29 B
1 8 Q
-0.07 -0.02 (1) 183.73 104.29 B
1 10 Q
-0.09 -0.02 ( It is an interesting obser-) 187.71 100.29 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.2 -0.02 (vation that an overlap-free split is only possible if there is a) 306.65 477.29 B
1.33 -0.02 (dimension according to which all MBRs have been split) 306.65 466.29 B
0.14 -0.02 (since otherwise at least one of the MBRs will span the full) 306.65 455.29 B
-0.92 -0.02 (range of values in that dimension, resulting in some overlap.) 306.65 444.29 B
2 11 Q
(Lemma) 306.65 426 T
1 10 Q
(1) 343.62 426 T
-0.49 (F) 306.65 415 P
-0.49 (or uniformly distrib) 312.06 415 P
-0.49 (uted point data, an o) 389.76 415 P
-0.49 (v) 469.02 415 P
-0.49 (erlap-free split is) 473.87 415 P
-0.52 (only possible if) 306.65 404 P
-0.52 (f there is a dimension according to which all) 367.03 404 P
3.46 (MBRs in the node ha) 306.65 393 P
3.46 (v) 405.28 393 P
3.46 (e been pre) 410.13 393 P
3.46 (viously split. More) 457.89 393 P
(formally) 306.65 382 T
(,) 340.44 382 T
2 11 Q
(Proof) 306.65 326.36 T
3 11.6 Q
(\050by contradiction\051:) 337.81 326.36 T
1 10 Q
-0.62 -0.02 (:) 352.82 310.55 B
-0.62 -0.02 (Assume that for all dimensions there is at least) 359.92 310.55 B
0.21 -0.02 (one MBR which has not been split in that dimension. This) 306.65 299.55 B
-0.87 -0.02 (means for uniformly distributed data that the MBRs span the) 306.65 288.55 B
-0.44 -0.02 (full range of values of the corresponding dimensions.) 306.65 277.55 B
-0.44 -0.02 (W) 517.82 277.55 B
-0.44 -0.02 (ith-) 526.84 277.55 B
0.06 -0.02 (out loss of generality) 306.65 266.55 B
0.06 -0.02 (, we assume) 389.89 266.55 B
0.06 -0.02 ( that the) 438.38 266.55 B
3 F
0.06 -0.02 (mbr) 473.07 266.55 B
1 F
0.06 -0.02 ( which spans) 489.12 266.55 B
-0.29 -0.02 (the full range of values of dimension) 306.65 255.55 B
3 F
-0.29 -0.02 (d) 453.55 255.55 B
1 F
-0.29 -0.02 ( is assigned to) 458.54 255.55 B
3 F
-0.29 -0.02 (S) 515.94 255.55 B
3 8 Q
-0.23 -0.02 (1) 520.92 253.05 B
1 10 Q
-0.29 -0.02 (. As) 524.91 255.55 B
-0.73 -0.02 (a consequence,) 306.65 244.55 B
-0.73 -0.02 ( spans the full range for dimension) 406.85 244.55 B
3 F
2.64 -0.02 (d) 306.65 233.55 B
1 F
2.64 -0.02 (. Since the extension of) 311.63 233.55 B
2.64 -0.02 ( cannot be zero in) 459.36 233.55 B
-0.92 -0.02 (dimension) 306.65 222.55 B
3 F
-0.92 -0.02 (d) 350.62 222.55 B
1 F
-0.92 -0.02 (, a split using dimension) 355.6 222.55 B
3 F
-0.92 -0.02 (d) 450.48 222.55 B
1 F
-0.92 -0.02 ( as split axis cannot be) 455.46 222.55 B
1.08 -0.02 (overlap-free \050i.e.,) 306.65 211.55 B
1.08 -0.02 (\051. Since for all) 480.52 211.55 B
0.62 -0.02 (dimensions there is at least one MBR which has not been) 306.65 200.55 B
-0.64 -0.02 (split in that dimension, we cannot find an overlap-free split.) 306.65 189.55 B
-0.93 -0.02 (:) 352.82 175.26 B
-0.93 -0.02 (Assume that an overlap-free split of the node is) 359.61 175.26 B
0.39 -0.02 (not possible. This means that there is no dimension which) 306.65 164.26 B
-0.9 -0.02 (can be used to partition the MBRs into two subsets) 306.65 153.26 B
3 F
-0.9 -0.02 (S) 502.71 153.26 B
3 8 Q
-0.72 -0.02 (1) 507.69 150.76 B
1 10 Q
-0.9 -0.02 ( and) 511.67 153.26 B
3 F
-0.9 -0.02 (S) 529.2 153.26 B
3 8 Q
-0.72 -0.02 (2) 534.18 150.76 B
1 10 Q
-0.9 -0.02 (.) 538.17 153.26 B
-0.53 -0.02 (This however is in contradiction to the fact that there is a di-) 306.65 142.26 B
-0.79 -0.02 (mension) 306.65 131.26 B
3 F
-0.79 -0.02 (d) 342.09 131.26 B
1 F
-0.79 -0.02 ( for which all MBRs have been split. For uniform-) 347.07 131.26 B
306.65 112.95 540.65 127.93 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
306.65 112.95 540.65 127.93 R
7 X
0 0 0 1 0 0 0 K
V
315.65 125.91 459.65 125.91 2 L
V
0.5 H
2 Z
0 X
N
-8.35 24.95 603.65 816.95 C
1 8 Q
0 X
0 0 0 1 0 0 0 K
(1.) 306.65 107.62 T
1.25 (According to our e) 324.65 107.62 P
1.25 (xperiments, the results generalize to real data) 388.5 107.62 P
(and e) 324.65 99.62 T
(v) 341.55 99.62 T
(en to spatial data \050cf. section) 345.43 99.62 T
(4\051.) 438.97 99.62 T
54.65 96.95 288.65 483.95 C
127.51 272.21 216.27 286.61 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(S) 128.51 278.86 T
(m) 152.1 278.86 T
(b) 159.13 278.86 T
(r) 164.16 278.86 T
1 7 Q
(1) 168.21 275.96 T
4 9 Q
(\274) 176.2 278.86 T
3 F
(m) 189.7 278.86 T
(b) 196.73 278.86 T
(r) 201.76 278.86 T
3 7 Q
(n) 205.81 275.96 T
4 9 Q
(,) 171.71 278.86 T
(,) 185.2 278.86 T
({) 147.14 278.86 T
(}) 209.95 278.86 T
1 F
(=) 137.57 278.86 T
54.65 96.95 288.65 483.95 C
-8.35 24.95 603.65 816.95 C
54.65 96.95 288.65 483.95 C
54.65 247.1 143.83 277.07 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 8 Q
0 X
0 0 0 1 0 0 0 K
(S) 55.76 262.86 T
3 7 Q
(1) 60.13 259.66 T
3 8 Q
(m) 80.54 262.86 T
(b) 86.93 262.86 T
(r) 91.55 262.86 T
3 7 Q
(i) 95.15 259.66 T
1 5 Q
(1) 97.36 257.76 T
4 8 Q
(\274) 103.86 262.86 T
3 F
(m) 115.86 262.86 T
(b) 122.25 262.86 T
(r) 126.87 262.86 T
3 7 Q
(i) 130.47 259.66 T
3 5 Q
(s) 132.68 257.76 T
1 F
(1) 134.81 255.26 T
4 8 Q
(,) 99.86 262.86 T
(,) 111.86 262.86 T
(\356) 76.14 254.6 T
(\376) 138.39 254.6 T
(\355) 76.14 261.46 T
(\375) 138.39 261.46 T
(\354) 76.14 268.31 T
(\374) 138.39 268.31 T
1 F
(=) 67.63 262.86 T
54.65 96.95 288.65 483.95 C
-8.35 24.95 603.65 816.95 C
54.65 96.95 288.65 483.95 C
191.24 245.38 288.65 278.72 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(S) 192.36 262.86 T
1 7 Q
(2) 197.27 259.96 T
3 9 Q
(m) 219.8 262.86 T
(b) 226.82 262.86 T
(r) 231.85 262.86 T
3 7 Q
(i) 235.9 259.96 T
1 5 Q
(1) 238.12 258.06 T
4 9 Q
(\274) 245.11 262.86 T
3 F
(m) 258.61 262.86 T
(b) 265.64 262.86 T
(r) 270.67 262.86 T
3 7 Q
(i) 274.72 259.96 T
3 5 Q
(s) 276.93 258.06 T
1 F
(2) 279.06 255.56 T
4 9 Q
(,) 240.62 262.86 T
(,) 254.11 262.86 T
(\356) 214.84 253.57 T
(\376) 282.78 253.57 T
(\355) 214.84 261.28 T
(\375) 282.78 261.28 T
(\354) 214.84 269 T
(\374) 282.78 269 T
1 F
(=) 205.27 262.86 T
54.65 96.95 288.65 483.95 C
-8.35 24.95 603.65 816.95 C
54.65 96.95 288.65 483.95 C
57.96 240.21 86.21 254.61 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(S) 58.96 246.86 T
3 7 Q
(1) 63.87 243.96 T
4 9 Q
(\306) 76.81 246.86 T
(\271) 69.62 246.86 T
54.65 96.95 288.65 483.95 C
-8.35 24.95 603.65 816.95 C
54.65 96.95 288.65 483.95 C
104.56 240.21 132.82 254.61 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(S) 105.56 246.86 T
1 7 Q
(2) 110.47 243.96 T
4 9 Q
(\306) 123.41 246.86 T
(\271) 116.22 246.86 T
54.65 96.95 288.65 483.95 C
-8.35 24.95 603.65 816.95 C
54.65 96.95 288.65 483.95 C
72.65 218.27 272.34 233.56 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(Split) 73.65 225.81 T
(S) 94.32 225.81 T
4 F
(\050) 90.68 225.81 T
(\051) 99.53 225.81 T
3 F
(S) 125.18 225.81 T
3 7 Q
(1) 130.1 222.92 T
3 9 Q
(S) 138.09 225.81 T
1 7 Q
(2) 143.01 222.92 T
4 9 Q
(,) 133.6 225.81 T
(\050) 121.55 225.81 T
(\051) 147.15 225.81 T
3 F
(S) 156.55 225.81 T
(S) 172.19 225.81 T
1 F
(=) 164.12 225.81 T
3 7 Q
(1) 177.1 222.92 T
3 9 Q
(S) 192.01 225.81 T
1 7 Q
(2) 196.92 222.92 T
4 9 Q
(\310) 182.85 225.81 T
3 F
(S) 215.9 225.81 T
1 7 Q
(1) 220.82 222.92 T
3 9 Q
(S) 235.72 225.81 T
1 7 Q
(2) 240.63 222.92 T
4 9 Q
(\307) 226.56 225.81 T
(\306) 255.2 225.81 T
1 F
(=) 247.13 225.81 T
4 F
(\331) 205.45 225.81 T
({) 116.59 225.81 T
(}) 266.02 225.81 T
1 F
(=) 107.02 225.81 T
151.94 221.17 151.94 231.67 2 L
0.41 H
2 Z
N
54.65 96.95 288.65 483.95 C
-8.35 24.95 603.65 816.95 C
54.65 96.95 288.65 483.95 C
152.36 187.91 288.42 202.31 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(M) 157.02 194.56 T
(B) 165.05 194.56 T
(R) 171.08 194.56 T
(S) 180.74 194.56 T
3 7 Q
(1) 185.66 191.66 T
4 9 Q
(\050) 177.11 194.56 T
(\051) 189.8 194.56 T
3 F
(M) 204.36 194.56 T
(B) 212.39 194.56 T
(R) 218.42 194.56 T
(S) 228.08 194.56 T
3 7 Q
(2) 233 191.66 T
4 9 Q
(\050) 224.45 194.56 T
(\051) 237.13 194.56 T
(\307) 195.04 194.56 T
3 F
(is minimal) 248.67 194.56 T
154.26 190.81 154.26 201.31 2 L
0.41 H
2 Z
N
155.56 190.81 155.56 201.31 2 L
N
241.03 190.81 241.03 201.31 2 L
N
242.33 190.81 242.33 201.31 2 L
N
54.65 96.95 288.65 483.95 C
-8.35 24.95 603.65 816.95 C
54.65 96.95 288.65 483.95 C
153.18 172.51 267.8 186.91 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(M) 157.84 179.16 T
(B) 165.87 179.16 T
(R) 171.9 179.16 T
(S) 181.56 179.16 T
1 7 Q
(1) 186.48 176.26 T
4 9 Q
(\050) 177.93 179.16 T
(\051) 190.62 179.16 T
3 F
(M) 205.18 179.16 T
(B) 213.21 179.16 T
(R) 219.24 179.16 T
(S) 228.9 179.16 T
1 7 Q
(2) 233.81 176.26 T
4 9 Q
(\050) 225.27 179.16 T
(\051) 237.95 179.16 T
(\307) 195.86 179.16 T
1 F
(0) 258.52 179.16 T
(=) 248.95 179.16 T
155.07 175.41 155.07 185.91 2 L
0.41 H
2 Z
N
156.38 175.41 156.38 185.91 2 L
N
241.85 175.41 241.85 185.91 2 L
N
243.15 175.41 243.15 185.91 2 L
N
54.65 96.95 288.65 483.95 C
-8.35 24.95 603.65 816.95 C
54.65 96.95 288.65 483.95 C
157.64 155.91 230.72 171.51 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 11 Q
0 X
0 0 0 1 0 0 0 K
(e) 163.48 162.26 T
1 9 Q
(\320) 158.64 162.26 T
3 10 Q
(S) 180.19 162.26 T
1 7 Q
(1) 185.65 159.66 T
4 9 Q
(\243) 170.56 162.26 T
3 10 Q
(S) 203.04 162.26 T
1 7 Q
(2) 208.5 159.66 T
1 9 Q
(\320) 193.85 162.26 T
4 11 Q
(e) 223.89 162.26 T
4 9 Q
(\243) 216.7 162.26 T
178.74 158.91 178.74 169.76 2 L
0.45 H
2 Z
N
190.15 158.91 190.15 169.76 2 L
N
201.6 158.91 201.6 169.76 2 L
N
213 158.91 213 169.76 2 L
N
54.65 96.95 288.65 483.95 C
-8.35 24.95 603.65 816.95 C
306.65 96.95 540.65 483.95 C
314.67 342.38 532.62 374.38 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 10 Q
0 X
0 0 0 1 0 0 0 K
(S) 327.06 365.88 T
(p) 332.65 365.88 T
(l) 338.24 365.88 T
(i) 341.61 365.88 T
(t) 344.98 365.88 T
(S) 352.57 365.88 T
4 F
(\050) 348.53 365.88 T
(\051) 358.36 365.88 T
3 F
(i) 365.37 365.88 T
(s) 368.74 365.88 T
(o) 376.31 365.88 T
(v) 381.9 365.88 T
(e) 386.93 365.88 T
(r) 391.96 365.88 T
(l) 396.44 365.88 T
(a) 399.81 365.88 T
(p) 405.4 365.88 T
1 F
(-) 410.99 365.88 T
3 F
(f) 416.38 365.88 T
(r) 419.75 365.88 T
(e) 424.23 365.88 T
(e) 429.26 365.88 T
(d) 338.73 355.88 T
(1) 361.64 355.88 T
4 F
(\274) 371.64 355.88 T
3 F
(D) 386.72 355.88 T
4 F
(,) 366.64 355.88 T
(,) 381.64 355.88 T
({) 356.13 355.88 T
(}) 394.65 355.88 T
3 F
(m) 411.76 355.88 T
(b) 419.57 355.88 T
(r) 425.15 355.88 T
(S) 441.4 355.88 T
(:) 447.07 355.88 T
4 F
(\316) 431.77 355.88 T
(") 404.63 355.88 T
3 F
(m) 356.24 345.88 T
(b) 364.05 345.88 T
(r) 369.64 345.88 T
(h) 377.44 345.88 T
(a) 383.03 345.88 T
(s) 388.62 345.88 T
(b) 396.19 345.88 T
(e) 401.78 345.88 T
(e) 406.81 345.88 T
(n) 411.84 345.88 T
(s) 420.52 345.88 T
(p) 425 345.88 T
(l) 430.59 345.88 T
(i) 433.96 345.88 T
(t) 437.33 345.88 T
(a) 443.97 345.88 T
(c) 449.56 345.88 T
(c) 454.59 345.88 T
(o) 459.62 345.88 T
(r) 465.2 345.88 T
(d) 469.68 345.88 T
(i) 475.27 345.88 T
(n) 478.64 345.88 T
(g) 484.23 345.88 T
(t) 492.91 345.88 T
(o) 496.28 345.88 T
(d) 504.96 345.88 T
4 F
(\316) 346.5 355.88 T
($) 330.15 355.88 T
(\333) 439.28 365.88 T
306.65 96.95 540.65 483.95 C
-8.35 24.95 603.65 816.95 C
306.65 96.95 540.65 483.95 C
324.65 305.9 352.82 319.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10.6 Q
0 X
0 0 0 1 0 0 0 K
(\323) 325.65 310.55 T
(\323) 346.11 310.55 T
4 F
(\336) 333 310.55 T
306.65 96.95 540.65 483.95 C
-8.35 24.95 603.65 816.95 C
367.92 237.9 406.85 252.3 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(M) 369.08 244.55 T
(B) 377.11 244.55 T
(R) 383.14 244.55 T
(S) 392.8 244.55 T
3 7 Q
(1) 397.72 241.65 T
4 9 Q
(\050) 389.17 244.55 T
(\051) 401.86 244.55 T
-8.35 24.95 603.65 816.95 C
420.43 226.9 459.36 241.3 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(M) 421.59 233.55 T
(B) 429.62 233.55 T
(R) 435.65 233.55 T
(S) 445.31 233.55 T
1 7 Q
(2) 450.22 230.65 T
4 9 Q
(\050) 441.67 233.55 T
(\051) 454.36 233.55 T
-8.35 24.95 603.65 816.95 C
380.32 204.9 480.52 219.3 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 9 Q
0 X
0 0 0 1 0 0 0 K
(M) 381.48 211.55 T
(B) 389.51 211.55 T
(R) 395.54 211.55 T
(S) 405.2 211.55 T
1 7 Q
(1) 410.11 208.65 T
4 9 Q
(\050) 401.56 211.55 T
(\051) 414.25 211.55 T
3 F
(M) 428.82 211.55 T
(B) 436.84 211.55 T
(R) 442.87 211.55 T
(S) 452.54 211.55 T
1 7 Q
(2) 457.45 208.65 T
4 9 Q
(\050) 448.9 211.55 T
(\051) 461.59 211.55 T
(\307) 419.49 211.55 T
1 F
(0) 474.02 211.55 T
4 F
(\271) 466.83 211.55 T
-8.35 24.95 603.65 816.95 C
306.65 96.95 540.65 483.95 C
324.65 170.61 352.82 184.21 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10.6 Q
0 X
0 0 0 1 0 0 0 K
(\323) 325.65 175.26 T
(\323) 346.11 175.26 T
4 F
(\334) 333 175.26 T
306.65 96.95 540.65 483.95 C
-8.35 24.95 603.65 816.95 C
54.65 497.45 540.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 497.45 540.65 744.95 R
7 X
0 0 0 1 0 0 0 K
V
66.11 527.79 521.1 729.11 R
V
5 9 Q
0 X
(bool X_DirectoryNode::split\050SET_OF_MBR *in, SET_OF_MBR *out1, SET_OF_MBR *out2\051) 84.11 723.11 T
({) 84.11 714.11 T
(SET_OF_MBR t1, t2;) 102 705.11 T
(MBR r1, r2;) 102 696.11 T
(// first try topological split, resulting in two sets of MBRs t1 and t2) 102 682.11 T
(topological_split\050in, t1, t2\051;) 102 673.11 T
(r1 = t1->calc_mbr\050\051; r2 = t2->calc_mbr\050\051;) 102 664.11 T
(// test for overlap) 102 650.11 T
(if \050overlap\050r1, r2\051 > MAX_OVERLAP\051) 102 641.11 T
({) 102 632.11 T
(// topological split fails -> try overlap minimal split) 122.8 623.11 T
(overlap_minimal_split\050in, t1, t2\051;) 122.8 614.11 T
(// test for unbalanced nodes) 122.8 600.11 T
(if \050t1->num_of_mbrs\050\051 < MIN_FANOUT || t2->num_of_mbrs\050\051 < MIN_FANOUT\051) 122.8 591.11 T
-1.35 (// overlap-minimal split also fails \050-> caller has to create supernode\051) 151.14 582.11 P
(return FALSE;) 151.14 573.11 T
(}) 102 564.11 T
(*out1 = t1; *out2 = t2;) 102 550.11 T
(return TRUE;) 102 541.11 T
(}) 84.11 532.11 T
63.8 506.1 531.5 517.77 R
7 X
V
0 10 Q
0 X
(Figure 8: X-) 184.76 511.1 T
(tree Split Algorithm for Directory Nodes) 236.97 511.1 T
76.71 524.6 525 736.31 R
0.5 H
0 Z
N
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 1 0.6 0 0 0 0.4 1]
[ 0 0.2 0.2 0.8 0.2 0 0]
[ 0.5 0 0 0 0.5 1 1]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54.65 770.95 540.65 780.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 96.95 540.65 744.95 R
V
1 10 Q
0 X
0.17 -0.02 (ly distributed point data, the split may be assumed to be in) 54.65 585.29 B
0.99 -0.02 (the middle of the range of dimension) 54.65 574.29 B
3 F
0.99 -0.02 (d) 211.09 574.29 B
1 F
0.99 -0.02 ( and therefore, an) 216.07 574.29 B
-0.5 -0.02 (overlap-free split is possible using dimension) 54.65 563.29 B
3 F
-0.5 -0.02 (d) 234.61 563.29 B
1 F
-0.5 -0.02 (.) 239.59 563.29 B
1 8 Q
-0.4 -0.02 (1) 242.07 567.29 B
6 10 Q
-0.55 -0.02 (n) 248.04 563.29 B
1 F
-0.88 -0.02 (According to Lemma 1, for finding an overlap-free split) 72.65 547.61 B
0.73 -0.02 (we have to determine a dimension according to which all) 54.65 536.61 B
-0.62 -0.02 (MBRs of) 54.65 525.61 B
3 F
-0.62 -0.02 (S) 92.7 525.61 B
1 F
-0.62 -0.02 ( have been split previously. The split history pro-) 97.68 525.61 B
1.3 -0.02 (vides the necessary information, in particular the dimen-) 54.65 514.61 B
-0.21 -0.02 (sions according to which an MBR has been split and which) 54.65 503.61 B
-0.48 -0.02 (new MBRs have been created by this split. Since a split cre-) 54.65 492.61 B
-0.19 -0.02 (ates two new MBRs from one, the split history may be rep-) 54.65 481.61 B
-0.6 -0.02 (resented as a binary tree, called the split tree. Each leaf node) 54.65 470.61 B
0.52 -0.02 (of the split tree corresponds to an MBR in) 54.65 459.61 B
3 F
0.52 -0.02 (S) 229.3 459.61 B
1 F
0.52 -0.02 (. The internal) 234.28 459.61 B
-0.61 -0.02 (nodes of the split tree correspond to MBRs which do not ex-) 54.65 448.61 B
-0.36 -0.02 (ist any more since they have been split into new MBRs pre-) 54.65 437.61 B
0.77 -0.02 (viously. Internal nodes of the split tree are labeled by the) 54.65 426.61 B
0.4 -0.02 (split axis that has been used; leaf nodes are labeled by the) 54.65 415.61 B
-0.03 -0.02 (MBR they are related to. All MBRs related to leaves in the) 54.65 404.61 B
-0.6 -0.02 (left subtree of an internal node have lower values in the split) 54.65 393.61 B
-0.51 -0.02 (dimension of the node than the MBRs related to those in the) 54.65 382.61 B
-0.5 -0.02 (right subtree.) 54.65 371.61 B
1.09 (Figure 9) 72.65 355.94 P
1.08 -0.02 ( shows an example for the split history of a) 107.35 355.94 B
-0.73 -0.02 (node S and the respective split tree. The process starts with a) 54.65 344.94 B
-0.92 -0.02 (single MBR A corresponding to a split tree which consists of) 54.65 333.94 B
0.08 -0.02 (only one leaf node labeled by A. For uniformly distributed) 54.65 322.94 B
-0.41 -0.02 (data, A spans the full range of values in all dimensions. The) 54.65 311.94 B
1.46 -0.02 (split of A using dimension 2 as split axis produces new) 54.65 300.94 B
-0.79 -0.02 (MBRs A\325 and B. Note that A\325 and B are disjoint because any) 54.65 289.94 B
-0.48 -0.02 (point in MBR A\325 has a lower coordinate value in dimension) 54.65 278.94 B
-0.58 -0.02 (2 than all points in MBR B. The split tree now has one inter-) 54.65 267.94 B
-0.43 -0.02 (nal node \050marked with dimension 2\051 and two leaf nodes \050A\325) 54.65 256.94 B
-0.74 -0.02 (and B\051. Splitting MBR B using dimension 5 as split axis cre-) 54.65 245.94 B
-0.35 -0.02 (ates the nodes B\325 and C. After splitting B\325 and A\325 again, we) 54.65 234.94 B
0.03 -0.02 (finally reach the situation depicted in the right most tree of) 54.65 223.94 B
-0.89 (Figure 9) 54.65 212.94 P
-0.88 -0.02 ( where S is completely filled with the MBRs A\323, B\323,) 87.37 212.94 B
-0.5 -0.02 (C, D and E.) 54.65 201.94 B
0.81 -0.02 (According to Lemma) 72.65 186.26 B
0.81 -0.02 (1, we may find an overlap-free) 161.92 186.26 B
-0.41 -0.02 (split if there is a dimension according to which all MBRs of) 54.65 175.26 B
0.76 -0.02 (S have been split. To obtain the information according to) 54.65 164.26 B
0.36 -0.02 (which dimensions an MBR X in S has been split, we only) 54.65 153.26 B
0.02 -0.02 (have to traverse the split tree from the root node to the leaf) 54.65 142.26 B
0.07 -0.02 (that corresponds to X. For example, MBR C has been split) 54.65 131.26 B
54.65 112.95 288.65 127.93 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 112.95 288.65 127.93 R
7 X
0 0 0 1 0 0 0 K
V
63.65 125.91 207.65 125.91 2 L
V
0.5 H
2 Z
0 X
N
-8.35 24.95 603.65 816.95 C
1 8 Q
0 X
0 0 0 1 0 0 0 K
(1.) 54.65 107.62 T
0.74 (If the splits ha) 72.65 107.62 P
0.74 (v) 120.26 107.62 P
0.74 (e not been performed e) 124.14 107.62 P
0.74 (xactly in the middle of the) 200.73 107.62 P
(data space, at least an o) 72.65 99.62 T
(v) 147.62 99.62 T
(erlap-minimal split is obtained.) 151.5 99.62 T
1 10 Q
-0.54 -0.02 (according to dimension 2 and 5, since the path from the root) 306.65 738.29 B
0.8 -0.02 (node to the leaf C is labeled with 2 and 5. Obviously, all) 306.65 727.29 B
-0.42 -0.02 (MBRs of the split tree in) 306.65 716.29 B
-0.43 (Figure 9) 405.26 716.29 P
-0.42 -0.02 ( have been split according) 438.44 716.29 B
-0.72 -0.02 (to dimension 2, the split axis used in the root of the split tree.) 306.65 705.29 B
-0.18 -0.02 (In general, all MBRs in any split tree have one split dimen-) 306.65 694.29 B
-0.29 -0.02 (sion in common, namely the split axis used in the root node) 306.65 683.29 B
-0.5 -0.02 (of the split tree.) 306.65 672.29 B
2 11 Q
(Lemma) 306.65 651.56 T
1 10 Q
(2 \050Existence of an Ov) 343.62 651.56 T
(erlap-free Split\051) 430.67 651.56 T
(F) 306.65 640.56 T
(or point data, an o) 312.06 640.56 T
(v) 384.4 640.56 T
(erlap-free split al) 389.25 640.56 T
(w) 457.46 640.56 T
(ays e) 464.58 640.56 T
(xists.) 484.7 640.56 T
2 11 Q
(Proof) 306.65 618.77 T
3 10 Q
(\050using the split history\051:) 337.81 618.77 T
1 F
0.17 -0.02 (From the description of the split tree it is clear that all) 324.65 600.51 B
1.01 -0.02 (MBRs of a directory node S have one split dimension in) 306.65 589.51 B
-0.68 -0.02 (common, namely the dimension used as split axis in the root) 306.65 578.51 B
-0.53 -0.02 (node of the split tree. Let SD be this dimension. We are able) 306.65 567.51 B
-0.39 -0.02 (to partition S such that all MBRs related to leaves in the left) 306.65 556.51 B
0.84 -0.02 (subtree of the root node are contained in S) 306.65 545.51 B
1 8 Q
0.67 -0.02 (1) 481.93 543.01 B
1 10 Q
0.84 -0.02 ( and all other) 485.91 545.51 B
-0.26 -0.02 (MBRs contained in S) 306.65 534.51 B
1 8 Q
-0.21 -0.02 (2) 391.33 532.01 B
1 10 Q
-0.26 -0.02 (. Since any point belonging to S) 395.31 534.51 B
1 8 Q
-0.21 -0.02 (1) 521.17 532.01 B
1 10 Q
-0.26 -0.02 ( has) 525.16 534.51 B
-0.04 -0.02 (a lower value in dimension SD than all points belonging to) 306.65 523.51 B
-0.5 -0.02 (S) 306.65 512.51 B
1 8 Q
-0.4 -0.02 (2) 312.19 510.01 B
1 10 Q
-0.5 -0.02 (, the split is overlap-free) 316.17 512.51 B
1 8 Q
-0.4 -0.02 (2) 411.13 516.51 B
1 10 Q
-0.5 -0.02 (.) 415.11 512.51 B
6 F
-0.55 -0.02 (n) 419.58 512.51 B
1 F
-0.84 -0.02 (One may argue that there may exist more than one over-) 324.65 495.79 B
-0.03 -0.02 (lap-free split dimension which is part of the split history of) 306.65 484.79 B
-0.38 -0.02 (all data pages. This is true in most cases for low dimension-) 306.65 473.79 B
-0.59 -0.02 (ality, but the probability that a second split dimension exists) 306.65 462.79 B
0.14 -0.02 (which is part of the split history of all MBRs is decreasing) 306.65 451.79 B
1.23 -0.02 (rapidly with increasing dimensionality \050cf.) 306.65 440.79 B
1.24 (Figure 10) 484.68 440.79 P
1.23 -0.02 (\051. If) 524.53 440.79 B
1.35 -0.02 (there is no dimension which is in the split history of all) 306.65 429.79 B
-0.08 -0.02 (MBRs, the resulting overlap of the newly created directory) 306.65 418.79 B
-0.94 -0.02 (entries is on the average about 50%. This can be explained as) 306.65 407.79 B
-0.95 -0.02 (follows: Since at least one MBR has not been split in the split) 306.65 396.79 B
-0.32 -0.02 (dimension) 306.65 385.79 B
-0.32 -0.02 (d, one of the partitions \050without loss of generali-) 350.62 385.79 B
-0.24 -0.02 (ty: S) 306.65 374.79 B
1 8 Q
-0.19 -0.02 (1) 324.93 372.29 B
1 10 Q
-0.24 -0.02 (\051 spans the full range of values in that dimension. The) 328.91 374.79 B
306.65 112.95 540.65 127.93 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
306.65 112.95 540.65 127.93 R
7 X
0 0 0 1 0 0 0 K
V
315.65 125.91 459.65 125.91 2 L
V
0.5 H
2 Z
0 X
N
-8.35 24.95 603.65 816.95 C
1 8 Q
0 X
0 0 0 1 0 0 0 K
(2.) 306.65 107.62 T
0.14 (Note that the resulting split is not necessarily balanced since sorted) 324.65 107.62 P
(input data, for e) 324.65 99.62 T
(xample, will result in an unbalanced split tree.) 375.18 99.62 T
54.65 96.95 288.65 744.95 C
54.65 591.95 288.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
59.99 608.45 288.68 620.12 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Figure 9: Example for the Split History) 90.45 613.46 T
66.54 721.05 73.83 729.7 R
7 X
V
0.5 H
2 Z
0 X
N
1 8 Q
(A) 67.27 723.5 T
56.68 639.95 83.68 653.79 R
7 X
V
0 X
N
1 7 Q
(A) 58.82 645.67 T
90 450 3.96 5.19 258.94 724.51 A
1 8 Q
(2) 256.7 722.64 T
90 450 3.96 5.19 272.15 707.22 A
(5) 269.9 705.34 T
90 450 3.96 5.19 245.74 707.22 A
(4) 243.5 705.34 T
90 450 3.96 5.19 264.23 686.27 A
(1) 261.98 684.4 T
254.98 722.78 247.06 712.41 2 L
N
262.9 722.78 270.83 712.41 2 L
N
244.42 702.03 239.14 691.65 2 L
N
269.9 703.76 263.49 691.65 2 L
N
247.06 702.03 252.34 691.65 2 L
N
262.9 681.27 257.62 670.9 2 L
N
265.55 681.27 270.83 670.9 2 L
N
274.93 702.8 281.35 690.69 2 L
N
87.08 639.95 127.63 653.79 R
7 X
V
0 X
N
1 7 Q
(A) 89.03 645.67 T
(\325) 93.31 645.67 T
(B) 97.7 645.67 T
131.03 639.95 175.98 653.79 R
7 X
V
0 X
N
(A) 133.16 645.67 T
(\325) 137.44 645.67 T
(B\325) 142.64 645.67 T
(C) 152.11 645.67 T
179.38 639.95 231.25 653.79 R
7 X
V
0 X
N
(A) 181.81 645.67 T
(\325) 186.08 645.67 T
(B\323) 192.6 645.67 T
(C) 203.39 645.67 T
(D) 214.18 645.67 T
234.65 639.95 287.48 653.79 R
7 X
V
0 X
N
(A\323) 236.97 645.67 T
(B\323) 247.26 645.67 T
(C) 257.56 645.67 T
(D) 267.86 645.67 T
(E) 278.16 645.67 T
234.23 682.81 245.14 691.46 R
7 X
V
0 X
N
1 8 Q
(A\323) 235.56 685.26 T
248.35 682.81 256.57 691.46 R
7 X
V
0 X
N
(E) 249.35 685.26 T
277.4 682.81 285.61 691.46 R
7 X
V
0 X
N
(C) 278.39 685.26 T
249.41 662.06 259.45 670.7 R
7 X
V
0 X
N
(B\323) 250.63 664.5 T
270.94 662.06 279.16 670.7 R
7 X
V
0 X
N
(D) 271.94 664.5 T
90 450 4.15 5.19 199.57 724.51 A
(2) 197.22 722.64 T
90 450 4.15 5.19 213.4 707.22 A
(5) 211.05 705.34 T
90 450 4.15 5.19 205.1 686.27 A
(1) 202.75 684.4 T
195.42 722.78 187.12 712.41 2 L
N
203.72 722.78 212.02 712.41 2 L
N
211.05 703.76 204.33 691.65 2 L
N
203.72 681.27 198.18 670.9 2 L
N
206.49 681.27 212.02 670.9 2 L
N
216.32 702.8 223.04 690.69 2 L
N
218.9 682.81 227.51 691.46 R
7 X
V
0 X
N
(C) 219.95 685.26 T
189.57 662.06 200.47 670.7 R
7 X
V
0 X
N
(B\323) 190.9 664.5 T
212.14 662.06 220.75 670.7 R
7 X
V
0 X
N
(D) 213.18 664.5 T
90 450 3.64 5.19 148.59 724.51 A
(2) 146.53 722.64 T
90 450 3.64 5.19 160.74 707.22 A
(5) 158.68 705.34 T
144.95 722.78 137.66 712.41 2 L
N
152.24 722.78 159.53 712.41 2 L
N
158.31 703.08 152.78 691.65 2 L
N
163.31 702.8 169.21 690.69 2 L
N
165.57 682.81 173.13 691.46 R
7 X
V
0 X
N
(C) 166.49 685.26 T
148.59 682.81 156.15 691.46 R
7 X
V
0 X
N
1 7 Q
(B\325) 149.51 685.93 T
90 450 3.33 5.19 107.36 724.51 A
1 8 Q
(2) 105.47 722.64 T
103.96 722.78 97.3 712.41 2 L
N
110.63 722.78 117.29 712.41 2 L
N
93.57 703.57 100.48 712.21 R
7 X
V
0 X
N
(A) 94.41 706.02 T
113.59 703.57 120.5 712.21 R
7 X
V
0 X
N
(B) 114.43 706.02 T
182.32 703.37 190.93 712.02 R
7 X
V
0 X
N
(A) 183.37 705.82 T
(\325) 188.25 705.82 T
(Node S) 54.98 666.12 T
(split tree) 54.9 738.12 T
132.65 703.2 141.25 711.85 R
7 X
V
0 X
N
(A) 133.69 705.65 T
(\325) 138.58 705.65 T
54.65 96.95 288.65 744.95 C
-8.35 24.95 603.65 816.95 C
306.65 96.95 540.65 744.95 C
307.49 127.93 539.81 371.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 463 351 229.4 185.68 308.67 171.92 FMBEGINEPSF
%%BeginDocument: /nfs/malaka/users1/wiss/berchtol/final/second_axis.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: Informix Wingz Version 1.1b
%%CreationDate: Fri Feb 23 11:06:42 1996
%%For: Stefan Berchtold (berchtol)
%%BoundingBox: 0 0 463 351
%%Pages: (atend)
%%EndComments


%%BeginProlog
/AC /arc load def
/AN /arcn load def
/AT /arcto load def
/CL /clip load def
/CN /concat load def
/CP /closepath load def
/CR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP CL NP } bind def
/DL { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y2 LT SP } bind def
/DR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP } bind def
/DS { scrfreq scrang scrproc cvx setscreen } bind def
/EC /eoclip load def
/EF /eofill load def
/FL /fill load def
/GS /gsave load def
/GR /grestore load def
/LT /lineto load def
/LW /setlinewidth load def
/MOF { /uid exch def /sw exch def /nfn exch def /bfn exch def /bfd bfn findfont def /nent bfd maxlength 1 add def bfd
/UniqueID known not { /nent nent 1 add def } if /ofd nent dict def bfd { exch dup /FID ne { exch ofd 3 1 roll put } { pop pop } ifelse } forall
ofd /FontName nfn put ofd /PaintType get 0 eq { ofd /PaintType 2 put } if ofd /StrokeWidth sw put ofd /UniqueID uid put nfn ofd definefont pop } bind def
/MT /moveto load def
/NP /newpath load def
/RE { /nfn exch def /bfn exch def /bfd bfn findfont def /nf bfd maxlength dict def bfd { exch dup /FID ne {dup /Encoding eq {exch dup length array copy
nf 3 1 roll put } {exch nf 3 1 roll put} ifelse } {pop pop} ifelse } forall bfn (Symbol) ne { nf /FontName nfn put vect aload pop vect length 2 idiv {nf /Encoding get 3 1 roll put} repeat }
if nfn nf definefont pop } bind def
/RL /rlineto load def
/RM /rmoveto load def
/RO /rotate load def
/SF { /s exch def /f exch def f findfont [s 0 0 s neg 0 0 ] makefont setfont } bind def
/SG /setgray load def
/SH /show load def
/SL /scale load def
/SK /stroke load def
/SP /strokepath load def
/SC /setrgbcolor load def
/SD { /stl exch def /hud exch def /sz exch def /udof exch def /sof exch def /uw exch def /str exch def /len str stringwidth pop def
currentrgbcolor /blue exch def /green exch def /red exch def 0.333 SG GS sof 0 RM str SH hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW sof udof RM len 0
RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def sof yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if
SK GR } if red green blue SC str stringwidth pop /x exch def /xoff sof x add def /yoff sof neg def xoff neg yoff RM str SH
hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW 0 udof RM len 0 RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof
off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if GR str stringwidth pop sof RM } bind def
/CF { /cliptype exch def /pndex exch def /bgb exch def /bgg exch def /bgr exch def /fgb exch def /fgg exch def /fgr exch def GS 4.000 4.000 SL pathbbox 
/ury exch cvi def /urx exch cvi def /lly exch cvi def /llx exch cvi def /yoff lly 8 mod def /xoff llx 8 mod def /iy lly yoff sub def /ix llx xoff sub def /width urx llx sub 1 add xoff add def
 /height ury lly sub 1 add yoff add def /pdata pats pndex get def /imatrix [1 0 0 1 0 0] def /NullProc {} bind def cliptype cvx exec bgr bgg bgb SC FL fgr fgg fgb SC ix iy TR 0 64
height { /yoff exch def 0 64 width { /xoff exch def GS xoff yoff TR 64 64 true imatrix pdata NullProc imagemask GR } for } for GR } bind def
/ST { /stl exch def /hud exch def /sz exch def /udof exch def /uw exch def /str exch def /len str stringwidth pop def hud 1 eq { GS stl 0 eq { uw LW 0 udof RM len 0 RL } if stl
4 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if str SH } bind def
/TR /translate load def
/vect [ 8#260  /Adieresis 8#265  /Aring 8#276  /Ccedilla 8#300  /Eacute 8#311 /Ntilde 8#314  /Odieresis 8#321  /Udieresis 8#322  /aacute 8#323 /agrave  8#324  /acircumflex 8#325  /adieresis 8#326  /atilde
8#327  /aring 8#330  /ccedilla  8#331  /eacute 8#332  /egrave 8#333  /ecircumflex 8#334  /edieresis 8#335  /iacute  8#336  /igrave 8#337  /icircumflex 8#340  /idieresis 8#342  /ntilde 8#344  /oacute
8#345  /ograve 8#346  /ocircumflex 8#347  /odieresis 8#354  /otilde 8#355  /uacute  8#356  /ugrave 8#357  /ucircumflex 8#360  /udieresis 8#362  /Agrave 8#363  /Atilde  8#364  /Otilde 8#366  /ydieresis
8#367  /Ydieresis 8#374  /Acircumflex  8#375  /Ecircumflex 8#376  /Aacute 8#377  /Edieresis 8#177  /Egrave 8#200  /Iacute  8#201  /Icircumflex 8#202  /Idieresis 8#203  /Igrave 8#204  /Oacute 8#205  /Ocircumflex
8#206  /Ograve 8#207  /Uacute 8#210  /Ucircumflex 8#211  /Ugrave 8#365  /dotlessi ]def
/pats [<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFFDDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777>
<AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555>
<5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF>
<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>
<EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777>
<88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888>
<B1B1B1B1B1B1B1B1303030303030303003030303030303031B1B1B1B1B1B1B1BD8D8D8D8D8D8D8D8C0C0C0C0C0C0C0C00C0C0C0C0C0C0C0C8D8D8D8D8D8D8D8D>
<80808080808080801010101010101010020202020202020220202020202020200101010101010101080808080808080840404040404040400404040404040404>
<FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888>
<FFFFFFFFFFFFFFFF808080808080808080808080808080808080808080808080FFFFFFFFFFFFFFFF080808080808080808080808080808080808080808080808>
<80808080808080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080804040404040404040202020202020202000000000000000000202020202020202040404040404040408080808080808080000000000000000>
<82828282828282824444444444444444393939393939393944444444444444448282828282828282010101010101010101010101010101010101010101010101>
<F8F8F8F8F8F8F8F87474747474747474222222222222222247474747474747478F8F8F8F8F8F8F8F171717171717171722222222222222227171717171717171>
<5555555555555555A0A0A0A0A0A0A0A04040404040404040404040404040404055555555555555550A0A0A0A0A0A0A0A04040404040404040404040404040404>
<20202020202020205050505050505050888888888888888888888888888888888888888888888888888888888888888805050505050505050202020202020202>
<BFBFBFBFBFBFBFBF0000000000000000BFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0>
<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080800000000000000000080808080808080800000000000000008080808080808080000000000000000008080808080808080000000000000000>
<88888888888888880000000000000000222222222222222200000000000000008888888888888888000000000000000022222222222222220000000000000000>
<88888888888888882222222222222222888888888888888822222222222222228888888888888888222222222222222288888888888888882222222222222222>
<AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000>
<11111111111111112222222222222222444444444444444488888888888888881111111111111111222222222222222244444444444444448888888888888888>
<FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000>
<01010101010101010202020202020202040404040404040408080808080808081010101010101010202020202020202040404040404040408080808080808080>
<AAAAAAAAAAAAAAAA0000000000000000808080808080808000000000000000008888888888888888000000000000000080808080808080800000000000000000>
<FFFFFFFFFFFFFFFF8080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080>
<08080808080808081C1C1C1C1C1C1C1C2222222222222222C1C1C1C1C1C1C1C18080808080808080010101010101010102020202020202020404040404040404>
<888888888888888814141414141414142222222222222222414141414141414188888888888888880000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<4040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000004040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000>
<03030303030303038484848484848484484848484848484830303030303030300C0C0C0C0C0C0C0C020202020202020201010101010101010101010101010101>
<8080808080808080808080808080808041414141414141413E3E3E3E3E3E3E3E080808080808080808080808080808081414141414141414E3E3E3E3E3E3E3E3>
<101010101010101020202020202020205454545454545454AAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFF020202020202020204040404040404040808080808080808>
<777777777777777789898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F77777777777777779898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8>
<0000000000000000080808080808080814141414141414142A2A2A2A2A2A2A2A55555555555555552A2A2A2A2A2A2A2A14141414141414140808080808080808> ] def
/BEPSF { /IS save def /dcnt countdictstack def /opcnt count 1 sub def userdict begin /showpage {} def 0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit [] 0 setdash newpath } bind def
/EEPSF { count opcnt sub {pop} repeat countdictstack dcnt sub {end} repeat IS restore } bind def
%%EndProlog

%%Page: 1 1
save
currentscreen /scrproc exch cvlit def /scrang exch def /scrfreq exch def
2 setlinecap
0 351 TR
[1 0 0 -1 0 0] CN
0.250 0.250 SL
1.0 LW
GS
0 0 1854 1405 CR
GS
0 0 1854 1405 CR
GS
0 0 1854 1405 CR
/Helvetica /Helvetica-Wingz RE
/Helvetica-Wingz 48.000 SF
/Helvetica-Wingz 56.000 SF
/Helvetica-Wingz 48.000 SF
1.000 1.000 1.000 SC
0 0 1853 1404 DR
FL
0.000 0.000 0.000 SC
8.00 LW
4 4 1849 1400 DR
SP
FL
1.000 1.000 1.000 SC
56 56 1797 1348 DR
FL
260 128 1687 1032 DR
FL
/Helvetica-Wingz 56.000 SF
815 1188 1131 1300 DR
FL
0.000 0.000 0.000 SC
843 1272 MT
(dimension) SH
/Helvetica-Wingz 48.000 SF
308 1032 MT
1.00 LW
308 1032 308 1050 DL
FL
355 1032 MT
355 1032 355 1050 DL
FL
403 1032 MT
403 1032 403 1050 DL
FL
450 1032 MT
450 1032 450 1050 DL
FL
498 1032 MT
498 1032 498 1050 DL
FL
260 1032 MT
260 1032 260 1068 DL
FL
212 1140 MT
(2.00) SH
593 1032 MT
593 1032 593 1050 DL
FL
641 1032 MT
641 1032 641 1050 DL
FL
688 1032 MT
688 1032 688 1050 DL
FL
736 1032 MT
736 1032 736 1050 DL
FL
783 1032 MT
783 1032 783 1050 DL
FL
545 1032 MT
0.000 0.000 1.000 SC
545 1032 545 128 DL
FL
545 1032 MT
0.000 0.000 0.000 SC
545 1032 545 1068 DL
FL
497 1140 MT
(8.00) SH
878 1032 MT
878 1032 878 1050 DL
FL
926 1032 MT
926 1032 926 1050 DL
FL
974 1032 MT
974 1032 974 1050 DL
FL
1021 1032 MT
1021 1032 1021 1050 DL
FL
1069 1032 MT
1069 1032 1069 1050 DL
FL
831 1032 MT
0.000 0.000 1.000 SC
831 1032 831 128 DL
FL
831 1032 MT
0.000 0.000 0.000 SC
831 1032 831 1068 DL
FL
769 1140 MT
(14.00) SH
1164 1032 MT
1164 1032 1164 1050 DL
FL
1211 1032 MT
1211 1032 1211 1050 DL
FL
1259 1032 MT
1259 1032 1259 1050 DL
FL
1306 1032 MT
1306 1032 1306 1050 DL
FL
1354 1032 MT
1354 1032 1354 1050 DL
FL
1116 1032 MT
0.000 0.000 1.000 SC
1116 1032 1116 128 DL
FL
1116 1032 MT
0.000 0.000 0.000 SC
1116 1032 1116 1068 DL
FL
1054 1140 MT
(20.00) SH
1449 1032 MT
1449 1032 1449 1050 DL
FL
1497 1032 MT
1497 1032 1497 1050 DL
FL
1544 1032 MT
1544 1032 1544 1050 DL
FL
1592 1032 MT
1592 1032 1592 1050 DL
FL
1639 1032 MT
1639 1032 1639 1050 DL
FL
1402 1032 MT
0.000 0.000 1.000 SC
1402 1032 1402 128 DL
FL
1402 1032 MT
0.000 0.000 0.000 SC
1402 1032 1402 1068 DL
FL
1340 1140 MT
(26.00) SH
1687 1032 MT
1687 1032 1687 1068 DL
FL
1625 1140 MT
(32.00) SH
260 975 MT
260 975 242 975 DL
FL
260 1032 MT
260 1032 224 1032 DL
FL
104 1056 MT
(0.00) SH
260 862 MT
260 862 242 862 DL
FL
260 919 MT
0.000 0.000 1.000 SC
260 919 1687 919 DL
FL
260 919 MT
0.000 0.000 0.000 SC
260 919 224 919 DL
FL
104 943 MT
(0.10) SH
260 749 MT
260 749 242 749 DL
FL
260 806 MT
0.000 0.000 1.000 SC
260 806 1687 806 DL
FL
260 806 MT
0.000 0.000 0.000 SC
260 806 224 806 DL
FL
104 830 MT
(0.20) SH
260 636 MT
260 636 242 636 DL
FL
260 693 MT
0.000 0.000 1.000 SC
260 693 1687 693 DL
FL
260 693 MT
0.000 0.000 0.000 SC
260 693 224 693 DL
FL
104 717 MT
(0.30) SH
260 523 MT
260 523 242 523 DL
FL
260 580 MT
0.000 0.000 1.000 SC
260 580 1687 580 DL
FL
260 580 MT
0.000 0.000 0.000 SC
260 580 224 580 DL
FL
104 604 MT
(0.40) SH
260 410 MT
260 410 242 410 DL
FL
260 467 MT
0.000 0.000 1.000 SC
260 467 1687 467 DL
FL
260 467 MT
0.000 0.000 0.000 SC
260 467 224 467 DL
FL
104 491 MT
(0.50) SH
260 297 MT
260 297 242 297 DL
FL
260 354 MT
0.000 0.000 1.000 SC
260 354 1687 354 DL
FL
260 354 MT
0.000 0.000 0.000 SC
260 354 224 354 DL
FL
104 378 MT
(0.60) SH
260 184 MT
260 184 242 184 DL
FL
260 241 MT
0.000 0.000 1.000 SC
260 241 1687 241 DL
FL
260 241 MT
0.000 0.000 0.000 SC
260 241 224 241 DL
FL
104 265 MT
(0.70) SH
260 128 MT
260 128 224 128 DL
FL
104 152 MT
(0.80) SH
GS
260 128 1688 1033 CR
260 218 MT
1.000 0.000 0.000 SC
8.00 LW
260 218 260 219 DL
FL
260 219 260 220 DL
FL
260 220 260 221 DL
FL
260 221 261 224 DL
FL
261 224 262 228 DL
FL
262 228 263 234 DL
FL
263 234 264 242 DL
FL
264 242 266 251 DL
FL
266 251 268 264 DL
FL
268 264 MT
268 264 270 279 DL
FL
270 279 273 296 DL
FL
273 296 277 315 DL
FL
277 315 281 336 DL
FL
281 336 285 358 DL
FL
285 358 289 380 DL
FL
289 380 293 404 DL
FL
293 404 298 427 DL
FL
298 427 303 450 DL
FL
303 450 307 473 DL
FL
308 473 MT
308 473 312 494 DL
FL
312 494 317 515 DL
FL
317 515 322 534 DL
FL
322 534 327 553 DL
FL
327 553 331 571 DL
FL
331 571 336 588 DL
FL
336 588 341 604 DL
FL
341 604 346 619 DL
FL
346 619 350 634 DL
FL
350 634 355 648 DL
FL
355 648 MT
355 648 360 661 DL
FL
360 661 365 674 DL
FL
365 674 369 686 DL
FL
369 686 374 697 DL
FL
374 697 379 708 DL
FL
379 708 384 718 DL
FL
384 718 388 727 DL
FL
388 727 393 737 DL
FL
393 737 398 745 DL
FL
398 745 403 753 DL
FL
403 753 MT
403 753 407 761 DL
FL
407 761 412 768 DL
FL
412 768 417 775 DL
FL
417 775 422 782 DL
FL
422 782 426 788 DL
FL
426 788 431 793 DL
FL
431 793 436 799 DL
FL
436 799 441 804 DL
FL
441 804 445 809 DL
FL
445 809 450 814 DL
FL
450 814 MT
450 814 455 818 DL
FL
455 818 460 822 DL
FL
460 822 464 826 DL
FL
464 826 469 830 DL
FL
469 830 474 834 DL
FL
474 834 479 837 DL
FL
479 837 483 840 DL
FL
483 840 488 843 DL
FL
488 843 493 847 DL
FL
493 847 498 849 DL
FL
498 849 MT
498 849 502 852 DL
FL
502 852 507 855 DL
FL
507 855 512 857 DL
FL
512 857 517 860 DL
FL
517 860 522 863 DL
FL
522 863 528 865 DL
FL
528 865 534 868 DL
FL
534 868 540 870 DL
FL
540 870 546 873 DL
FL
546 873 553 876 DL
FL
553 876 MT
553 876 561 879 DL
FL
561 879 568 882 DL
FL
568 882 577 885 DL
FL
577 885 585 888 DL
FL
585 888 594 891 DL
FL
594 891 603 894 DL
FL
603 894 612 897 DL
FL
612 897 622 900 DL
FL
622 900 631 903 DL
FL
631 903 640 906 DL
FL
640 906 MT
640 906 650 909 DL
FL
650 909 660 911 DL
FL
660 911 669 914 DL
FL
669 914 680 916 DL
FL
680 916 690 919 DL
FL
690 919 701 922 DL
FL
701 922 712 924 DL
FL
712 924 725 927 DL
FL
725 927 738 929 DL
FL
738 929 751 932 DL
FL
751 932 MT
751 932 766 935 DL
FL
766 935 782 938 DL
FL
782 938 801 941 DL
FL
801 941 821 944 DL
FL
821 944 845 948 DL
FL
845 948 871 951 DL
FL
871 951 902 954 DL
FL
902 954 937 957 DL
FL
937 957 976 961 DL
FL
976 961 1021 964 DL
FL
1021 964 MT
1021 964 1071 968 DL
FL
1071 968 1126 971 DL
FL
1126 971 1183 974 DL
FL
1183 974 1243 977 DL
FL
1243 977 1302 980 DL
FL
1302 980 1361 983 DL
FL
1361 983 1418 986 DL
FL
1418 986 1471 988 DL
FL
1471 988 1518 991 DL
FL
1518 991 1560 992 DL
FL
1560 992 MT
1560 992 1594 994 DL
FL
1594 994 1622 995 DL
FL
1622 995 1643 996 DL
FL
1643 996 1660 997 DL
FL
1660 997 1671 997 DL
FL
1671 997 1679 998 DL
FL
1679 998 1683 998 DL
FL
1683 998 1686 998 DL
FL
1686 998 1687 998 DL
FL
GR
1687 1032 MT
1687 1032 1687 128 DL
FL
260 128 MT
260 128 1687 128 DL
FL
260 1032 MT
260 1032 1687 1032 DL
FL
260 1032 MT
260 1032 260 128 DL
FL
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
showpage
restore

%%Trailer
%%Pages: 1

%%EndDocument
FMENDEPSF
307.56 129.09 539.73 166.16 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Figure 10: Probability of the Existence of a Second) 315.6 153.25 T
(Overlap-free Split Dimension) 360.87 141.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
306.65 96.95 540.65 744.95 C
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Page: "9" 9
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 1 0.6 0 0 0 0.4 1]
[ 0 0.2 0.2 0.8 0.2 0 0]
[ 0.5 0 0 0 0.5 1 1]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54.65 770.95 540.65 780.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 96.95 540.65 533.45 R
V
1 10 Q
0 X
-0.91 -0.02 (other partition S) 54.65 526.79 B
1 8 Q
-0.73 -0.02 (2) 117.49 524.29 B
1 10 Q
-0.91 -0.02 ( spans at least half the range of values of the) 121.48 526.79 B
-0.6 -0.02 (split dimension d. Since the MBRs are only partitioned with) 54.65 515.79 B
-0.35 -0.02 (respect to dimension d, S) 54.65 504.79 B
1 8 Q
-0.28 -0.02 (1) 153.6 502.29 B
1 10 Q
-0.35 -0.02 ( and S) 157.58 504.79 B
1 8 Q
-0.28 -0.02 (2) 181.77 502.29 B
1 10 Q
-0.35 -0.02 ( span the full range of val-) 185.75 504.79 B
0.66 -0.02 (ues of all other dimensions, resulting in a total overlap of) 54.65 493.79 B
-0.5 -0.02 (about 50%.) 54.65 482.79 B
0.03 -0.02 (The probability that a split algorithm which arbitrarily) 72.65 466.94 B
0.79 -0.02 (chooses the split axis coincidentally selects the right split) 54.65 455.94 B
-0.87 -0.02 (axis for an overlap-free split is very low in high-dimensional) 54.65 444.94 B
-0.47 -0.02 (space. As our analysis of the R*-) 54.65 433.94 B
-0.47 -0.02 (tree shows, the behavior of) 183.06 433.94 B
-0.16 -0.02 (the topological R*-) 54.65 422.94 B
-0.16 -0.02 (tree split algorithm in high-dimensional) 131.18 422.94 B
-0.02 -0.02 (space is similar to a random choice of the split axis since it) 54.65 411.94 B
-0.38 -0.02 (optimizes different criteria. If the topological split fails, our) 54.65 400.94 B
-0.34 -0.02 (split algorithm tries to perform an overlap-free split. This is) 54.65 389.94 B
-0.8 -0.02 (done by determining the dimension for the overlap-free split) 54.65 378.94 B
0.51 -0.02 (as described above, determining the split value, and parti-) 54.65 367.94 B
-0.98 -0.02 (tioning the MBRs with respect to the split value. If the result-) 54.65 356.94 B
0.95 -0.02 (ing split is unbalanced, the insert algorithm of the X-) 54.65 345.94 B
0.95 -0.02 (tree) 273.74 345.94 B
0.43 -0.02 (initiates the creation/extension of a supernode \050cf. subsec-) 54.65 334.94 B
0.2 -0.02 (tion 3.2\051. Note that for the overlap-minimal split, informa-) 54.65 323.94 B
0.15 -0.02 (tion about the split history has to be stored in the directory) 54.65 312.94 B
-0.1 -0.02 (nodes. The space needed for this purpose, however, is very) 54.65 301.94 B
-0.5 -0.02 (small since the split history may be coded by a few bits.) 54.65 290.94 B
0 12 Q
(4.) 54.65 262.77 T
(Performance Evaluation) 72.65 262.77 T
1 10 Q
-0.5 -0.02 (To show the practical relevance of our method, we per-) 72.65 241.26 B
0.23 -0.02 (formed an extensive experimental evaluation of the X-) 54.65 230.26 B
0.23 -0.02 (tree) 273.74 230.26 B
-0.42 -0.02 (and compared it to the TV-) 54.65 219.26 B
-0.42 -0.02 (tree as well to as the R*-) 160.63 219.26 B
-0.42 -0.02 (tree. All) 256.48 219.26 B
-0.72 -0.02 (experimental results presented in this sections are computed) 54.65 208.26 B
-0.33 -0.02 (on an HP735 workstation with 64 MBytes of main memory) 54.65 197.26 B
-0.91 -0.02 (and several GBytes of secondary storage. All programs have) 54.65 186.26 B
-0.07 -0.02 (been implemented in C++ as templates to support different) 54.65 175.26 B
-0.59 -0.02 (types of data objects. The X-) 54.65 164.26 B
-0.59 -0.02 (tree and R*-) 166.67 164.26 B
-0.59 -0.02 (tree support differ-) 214.69 164.26 B
-0.47 -0.02 (ent types of queries such as point queries and nearest neigh-) 54.65 153.26 B
3.37 -0.02 (bor queries; the implementation of the TV-) 54.65 142.26 B
3.37 -0.02 (tree) 246.21 142.26 B
1 8 Q
2.69 -0.02 (1) 261.12 146.26 B
1 10 Q
3.37 -0.02 ( only) 265.1 142.26 B
-0.21 -0.02 (supports point queries. We use the original implementation) 54.65 131.26 B
54.65 112.95 288.65 127.93 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 112.95 288.65 127.93 R
7 X
0 0 0 1 0 0 0 K
V
63.65 125.91 207.65 125.91 2 L
V
0.5 H
2 Z
0 X
N
-8.35 24.95 603.65 816.95 C
1 8 Q
0 X
0 0 0 1 0 0 0 K
(1.) 54.65 107.62 T
0.07 (W) 72.65 107.62 P
0.07 (e use the original implementation of the TV-) 79.56 107.62 P
0.07 (tree by K. Lin, H. V) 222.91 107.62 P
0.07 (.) 286.65 107.62 P
(Jag) 72.65 99.62 T
(adish, and C. F) 83.27 99.62 T
(aloutsos [LJF) 131.38 99.62 T
(94].) 176.71 99.62 T
1 10 Q
0.09 -0.02 (of the TV-) 306.65 526.79 B
0.09 -0.02 (tree by K. Lin, H. V. Jagadish, and C. Faloutsos) 348.84 526.79 B
-0.02 ([LJF) 306.65 515.3 S
-0.02 (94].) 327.94 515.3 S
-0.94 -0.02 (The test data used for the experiments are real point data) 324.65 497.3 B
2.88 -0.02 (consisting of Fourier points in high-dimensional space) 306.65 485.82 B
-0.07 -0.02 (\050D) 306.65 474.33 B
-0.07 -0.02 (=) 319.64 474.33 B
-0.07 -0.02 (2,) 327.74 474.33 B
-0.07 -0.02 (4,) 337.68 474.33 B
-0.07 -0.02 (8,) 347.62 474.33 B
-0.07 -0.02 (16\051, spatial data \050D) 357.56 474.33 B
-0.07 -0.02 (=) 436.07 474.33 B
-0.07 -0.02 (2,) 444.17 474.33 B
-0.07 -0.02 (4, 8,) 454.11 474.33 B
-0.07 -0.02 (16\051 consisting of) 473.92 474.33 B
0.12 -0.02 (manifolds in high-dimensional space describing regions of) 306.65 462.84 B
-0.6 -0.02 (real CAD-objects, and synthetic data consisting of uniform-) 306.65 451.36 B
0.92 -0.02 (ly distributed points in high-dimensional space \050D) 306.65 439.87 B
0.92 -0.02 (=) 514.22 439.87 B
0.92 -0.02 (2, 3,) 522.32 439.87 B
0.28 -0.02 (4,) 306.65 428.39 B
0.28 -0.02 (6,) 316.59 428.39 B
0.28 -0.02 (8,) 326.53 428.39 B
0.28 -0.02 (10,) 336.47 428.39 B
0.28 -0.02 (12,) 351.39 428.39 B
0.28 -0.02 (14,) 366.31 428.39 B
0.28 -0.02 (16\051. The block size used for our experi-) 381.23 428.39 B
0.18 -0.02 (ments is 4) 306.65 416.9 B
0.18 -0.02 (KByte, and all index structures were allowed to) 349.84 416.9 B
-0.53 -0.02 (use the same amount of cache. For a realistic evaluation, we) 306.65 405.42 B
-0.39 -0.02 (used very large amounts of data in our experiments. The to-) 306.65 393.93 B
-0.92 -0.02 (tal amount of disk space occupied by the created index struc-) 306.65 382.45 B
0.18 -0.02 (tures of TV-) 306.65 370.96 B
0.18 -0.02 (trees, R*-) 356.19 370.96 B
0.18 -0.02 (trees, and X) 395.05 370.96 B
0.18 -0.02 (-) 443.21 370.96 B
0.18 -0.02 (trees is about 10 GByte) 446.52 370.96 B
-0.77 -0.02 (and the CPU time for inserting the data adds up to about four) 306.65 359.48 B
-0.09 -0.02 (weeks of CPU time. As one expects, the insertion times in-) 306.65 347.99 B
0.31 -0.02 (crease with increasing dimension. For all experiments, the) 306.65 336.51 B
0 -0.02 (insertion into the X-tree was much faster than the insertion) 306.65 325.02 B
-0.69 -0.02 (into the TV-tree and the R*-tree \050up to a factor of 10.45 fast-) 306.65 313.54 B
-0.23 -0.02 (er than the R*-tree\051. The X-tree reached a rate of about 170) 306.65 302.05 B
-0.81 -0.02 (insertions per second for a 150 MBytes index containing 16-) 306.65 290.57 B
-0.5 -0.02 (dimensional point data.) 306.65 279.08 B
0.94 -0.02 (First, we evaluated the X-) 324.65 261.08 B
0.94 -0.02 (tree on synthetic databases) 431.46 261.08 B
-0.92 -0.02 (with varying dimensionality. Using the same number of data) 306.65 249.59 B
0.05 -0.02 (items over the different dimensions implies that the size of) 306.65 238.11 B
-0.22 -0.02 (the database is linearly increasing with the dimension. This) 306.65 226.62 B
1.3 -0.02 (however has an important drawback, namely that in low) 306.65 215.14 B
1.4 -0.02 (di) 306.65 203.65 B
1.4 -0.02 (mensions, we would obtain only very small databases,) 314.39 203.65 B
1.01 -0.02 (whereas in high dimensions the databases would become) 306.65 192.17 B
-0.03 -0.02 (very large. It is more realistic to assume that the amount of) 306.65 180.68 B
-0.47 -0.02 (data which is stored in the database is constant. This means,) 306.65 169.2 B
-0.99 -0.02 (however, that the number of data items needs to be varied ac-) 306.65 157.71 B
0.83 -0.02 (cordingly. For the experiment presented in) 306.65 146.23 B
0.84 (Figure 13) 483.79 146.23 P
0.83 -0.02 (, we) 523.24 146.23 B
-0.86 -0.02 (used 100) 306.65 134.74 B
-0.86 -0.02 (MByte databases containing uniformly distributed) 343.94 134.74 B
-0.98 -0.02 (point data. The number of data items varied between 8.3 mil-) 306.65 123.26 B
-0.57 -0.02 (lion for D=2 and 1.5 million for D=16.) 306.65 111.77 B
-0.57 (Figure 13) 459.25 111.77 P
-0.57 -0.02 (, shows the) 497.29 111.77 B
0.3 -0.02 (speed-up of the search time for point queries of the X-) 306.65 100.29 B
0.3 -0.02 (tree) 525.74 100.29 B
54.65 551.45 540.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 551.45 540.65 744.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 386 319 182.87 151.52 313.92 590.22 FMBEGINEPSF
%%BeginDocument: /nfs/malaka/users1/wiss/berchtol/final/real70_10NN.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: Informix Wingz Version 1.1b
%%CreationDate: Fri Feb 23 11:13:30 1996
%%For: Stefan Berchtold (berchtol)
%%BoundingBox: 0 0 386 319
%%Pages: (atend)
%%EndComments


%%BeginProlog
/AC /arc load def
/AN /arcn load def
/AT /arcto load def
/CL /clip load def
/CN /concat load def
/CP /closepath load def
/CR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP CL NP } bind def
/DL { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y2 LT SP } bind def
/DR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP } bind def
/DS { scrfreq scrang scrproc cvx setscreen } bind def
/EC /eoclip load def
/EF /eofill load def
/FL /fill load def
/GS /gsave load def
/GR /grestore load def
/LT /lineto load def
/LW /setlinewidth load def
/MOF { /uid exch def /sw exch def /nfn exch def /bfn exch def /bfd bfn findfont def /nent bfd maxlength 1 add def bfd
/UniqueID known not { /nent nent 1 add def } if /ofd nent dict def bfd { exch dup /FID ne { exch ofd 3 1 roll put } { pop pop } ifelse } forall
ofd /FontName nfn put ofd /PaintType get 0 eq { ofd /PaintType 2 put } if ofd /StrokeWidth sw put ofd /UniqueID uid put nfn ofd definefont pop } bind def
/MT /moveto load def
/NP /newpath load def
/RE { /nfn exch def /bfn exch def /bfd bfn findfont def /nf bfd maxlength dict def bfd { exch dup /FID ne {dup /Encoding eq {exch dup length array copy
nf 3 1 roll put } {exch nf 3 1 roll put} ifelse } {pop pop} ifelse } forall bfn (Symbol) ne { nf /FontName nfn put vect aload pop vect length 2 idiv {nf /Encoding get 3 1 roll put} repeat }
if nfn nf definefont pop } bind def
/RL /rlineto load def
/RM /rmoveto load def
/RO /rotate load def
/SF { /s exch def /f exch def f findfont [s 0 0 s neg 0 0 ] makefont setfont } bind def
/SG /setgray load def
/SH /show load def
/SL /scale load def
/SK /stroke load def
/SP /strokepath load def
/SC /setrgbcolor load def
/SD { /stl exch def /hud exch def /sz exch def /udof exch def /sof exch def /uw exch def /str exch def /len str stringwidth pop def
currentrgbcolor /blue exch def /green exch def /red exch def 0.333 SG GS sof 0 RM str SH hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW sof udof RM len 0
RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def sof yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if
SK GR } if red green blue SC str stringwidth pop /x exch def /xoff sof x add def /yoff sof neg def xoff neg yoff RM str SH
hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW 0 udof RM len 0 RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof
off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if GR str stringwidth pop sof RM } bind def
/CF { /cliptype exch def /pndex exch def /bgb exch def /bgg exch def /bgr exch def /fgb exch def /fgg exch def /fgr exch def GS 4.000 4.000 SL pathbbox 
/ury exch cvi def /urx exch cvi def /lly exch cvi def /llx exch cvi def /yoff lly 8 mod def /xoff llx 8 mod def /iy lly yoff sub def /ix llx xoff sub def /width urx llx sub 1 add xoff add def
 /height ury lly sub 1 add yoff add def /pdata pats pndex get def /imatrix [1 0 0 1 0 0] def /NullProc {} bind def cliptype cvx exec bgr bgg bgb SC FL fgr fgg fgb SC ix iy TR 0 64
height { /yoff exch def 0 64 width { /xoff exch def GS xoff yoff TR 64 64 true imatrix pdata NullProc imagemask GR } for } for GR } bind def
/ST { /stl exch def /hud exch def /sz exch def /udof exch def /uw exch def /str exch def /len str stringwidth pop def hud 1 eq { GS stl 0 eq { uw LW 0 udof RM len 0 RL } if stl
4 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if str SH } bind def
/TR /translate load def
/vect [ 8#260  /Adieresis 8#265  /Aring 8#276  /Ccedilla 8#300  /Eacute 8#311 /Ntilde 8#314  /Odieresis 8#321  /Udieresis 8#322  /aacute 8#323 /agrave  8#324  /acircumflex 8#325  /adieresis 8#326  /atilde
8#327  /aring 8#330  /ccedilla  8#331  /eacute 8#332  /egrave 8#333  /ecircumflex 8#334  /edieresis 8#335  /iacute  8#336  /igrave 8#337  /icircumflex 8#340  /idieresis 8#342  /ntilde 8#344  /oacute
8#345  /ograve 8#346  /ocircumflex 8#347  /odieresis 8#354  /otilde 8#355  /uacute  8#356  /ugrave 8#357  /ucircumflex 8#360  /udieresis 8#362  /Agrave 8#363  /Atilde  8#364  /Otilde 8#366  /ydieresis
8#367  /Ydieresis 8#374  /Acircumflex  8#375  /Ecircumflex 8#376  /Aacute 8#377  /Edieresis 8#177  /Egrave 8#200  /Iacute  8#201  /Icircumflex 8#202  /Idieresis 8#203  /Igrave 8#204  /Oacute 8#205  /Ocircumflex
8#206  /Ograve 8#207  /Uacute 8#210  /Ucircumflex 8#211  /Ugrave 8#365  /dotlessi ]def
/pats [<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFFDDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777>
<AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555>
<5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF>
<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>
<EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777>
<88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888>
<B1B1B1B1B1B1B1B1303030303030303003030303030303031B1B1B1B1B1B1B1BD8D8D8D8D8D8D8D8C0C0C0C0C0C0C0C00C0C0C0C0C0C0C0C8D8D8D8D8D8D8D8D>
<80808080808080801010101010101010020202020202020220202020202020200101010101010101080808080808080840404040404040400404040404040404>
<FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888>
<FFFFFFFFFFFFFFFF808080808080808080808080808080808080808080808080FFFFFFFFFFFFFFFF080808080808080808080808080808080808080808080808>
<80808080808080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080804040404040404040202020202020202000000000000000000202020202020202040404040404040408080808080808080000000000000000>
<82828282828282824444444444444444393939393939393944444444444444448282828282828282010101010101010101010101010101010101010101010101>
<F8F8F8F8F8F8F8F87474747474747474222222222222222247474747474747478F8F8F8F8F8F8F8F171717171717171722222222222222227171717171717171>
<5555555555555555A0A0A0A0A0A0A0A04040404040404040404040404040404055555555555555550A0A0A0A0A0A0A0A04040404040404040404040404040404>
<20202020202020205050505050505050888888888888888888888888888888888888888888888888888888888888888805050505050505050202020202020202>
<BFBFBFBFBFBFBFBF0000000000000000BFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0>
<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080800000000000000000080808080808080800000000000000008080808080808080000000000000000008080808080808080000000000000000>
<88888888888888880000000000000000222222222222222200000000000000008888888888888888000000000000000022222222222222220000000000000000>
<88888888888888882222222222222222888888888888888822222222222222228888888888888888222222222222222288888888888888882222222222222222>
<AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000>
<11111111111111112222222222222222444444444444444488888888888888881111111111111111222222222222222244444444444444448888888888888888>
<FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000>
<01010101010101010202020202020202040404040404040408080808080808081010101010101010202020202020202040404040404040408080808080808080>
<AAAAAAAAAAAAAAAA0000000000000000808080808080808000000000000000008888888888888888000000000000000080808080808080800000000000000000>
<FFFFFFFFFFFFFFFF8080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080>
<08080808080808081C1C1C1C1C1C1C1C2222222222222222C1C1C1C1C1C1C1C18080808080808080010101010101010102020202020202020404040404040404>
<888888888888888814141414141414142222222222222222414141414141414188888888888888880000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<4040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000004040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000>
<03030303030303038484848484848484484848484848484830303030303030300C0C0C0C0C0C0C0C020202020202020201010101010101010101010101010101>
<8080808080808080808080808080808041414141414141413E3E3E3E3E3E3E3E080808080808080808080808080808081414141414141414E3E3E3E3E3E3E3E3>
<101010101010101020202020202020205454545454545454AAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFF020202020202020204040404040404040808080808080808>
<777777777777777789898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F77777777777777779898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8>
<0000000000000000080808080808080814141414141414142A2A2A2A2A2A2A2A55555555555555552A2A2A2A2A2A2A2A14141414141414140808080808080808> ] def
/BEPSF { /IS save def /dcnt countdictstack def /opcnt count 1 sub def userdict begin /showpage {} def 0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit [] 0 setdash newpath } bind def
/EEPSF { count opcnt sub {pop} repeat countdictstack dcnt sub {end} repeat IS restore } bind def
%%EndProlog

%%Page: 1 1
save
currentscreen /scrproc exch cvlit def /scrang exch def /scrfreq exch def
2 setlinecap
0 319 TR
[1 0 0 -1 0 0] CN
0.250 0.250 SL
1.0 LW
GS
0 0 1546 1277 CR
GS
0 0 1546 1277 CR
GS
0 0 1546 1277 CR
/Helvetica /Helvetica-Wingz RE
/Helvetica-Wingz 48.000 SF
/Helvetica-Wingz 56.000 SF
/Helvetica-Wingz 48.000 SF
1.000 1.000 1.000 SC
0 0 1545 1276 DR
FL
0.000 0.000 0.000 SC
8.00 LW
4 4 1541 1272 DR
SP
FL
1.000 1.000 1.000 SC
56 56 1489 1220 DR
FL
448 128 1413 904 DR
FL
/Helvetica-Wingz 56.000 SF
772 1060 1088 1172 DR
FL
0.000 0.000 0.000 SC
800 1144 MT
(dimension) SH
/Helvetica-Wingz 48.000 SF
517 904 MT
1.00 LW
517 904 517 922 DL
FL
448 904 MT
448 904 448 940 DL
FL
434 1012 MT
(2) SH
655 904 MT
655 904 655 922 DL
FL
586 904 MT
0.000 0.000 1.000 SC
586 904 586 128 DL
FL
586 904 MT
0.000 0.000 0.000 SC
586 904 586 940 DL
FL
572 1012 MT
(4) SH
793 904 MT
793 904 793 922 DL
FL
724 904 MT
0.000 0.000 1.000 SC
724 904 724 128 DL
FL
724 904 MT
0.000 0.000 0.000 SC
724 904 724 940 DL
FL
710 1012 MT
(6) SH
931 904 MT
931 904 931 922 DL
FL
862 904 MT
0.000 0.000 1.000 SC
862 904 862 128 DL
FL
862 904 MT
0.000 0.000 0.000 SC
862 904 862 940 DL
FL
848 1012 MT
(8) SH
1068 904 MT
1068 904 1068 922 DL
FL
999 904 MT
0.000 0.000 1.000 SC
999 904 999 128 DL
FL
999 904 MT
0.000 0.000 0.000 SC
999 904 999 940 DL
FL
971 1012 MT
(10) SH
1206 904 MT
1206 904 1206 922 DL
FL
1137 904 MT
0.000 0.000 1.000 SC
1137 904 1137 128 DL
FL
1137 904 MT
0.000 0.000 0.000 SC
1137 904 1137 940 DL
FL
1109 1012 MT
(12) SH
1344 904 MT
1344 904 1344 922 DL
FL
1275 904 MT
0.000 0.000 1.000 SC
1275 904 1275 128 DL
FL
1275 904 MT
0.000 0.000 0.000 SC
1275 904 1275 940 DL
FL
1247 1012 MT
(14) SH
1413 904 MT
1413 904 1413 940 DL
FL
1385 1012 MT
(16) SH
/Helvetica-Wingz 56.000 SF
1.000 1.000 1.000 SC
104 260 216 772 DR
FL
0.000 0.000 0.000 SC
GS
188 744 MT
270 RO
(Speed-Up Factor) SH
GR
/Helvetica-Wingz 48.000 SF
448 873 MT
448 873 430 873 DL
FL
448 842 MT
448 842 430 842 DL
FL
448 811 MT
448 811 430 811 DL
FL
448 780 MT
448 780 430 780 DL
FL
448 904 MT
448 904 412 904 DL
FL
292 928 MT
(0.00) SH
448 718 MT
448 718 430 718 DL
FL
448 687 MT
448 687 430 687 DL
FL
448 656 MT
448 656 430 656 DL
FL
448 625 MT
448 625 430 625 DL
FL
448 749 MT
0.000 0.000 1.000 SC
448 749 1413 749 DL
FL
448 749 MT
0.000 0.000 0.000 SC
448 749 412 749 DL
FL
292 773 MT
(5.00) SH
448 563 MT
448 563 430 563 DL
FL
448 532 MT
448 532 430 532 DL
FL
448 500 MT
448 500 430 500 DL
FL
448 469 MT
448 469 430 469 DL
FL
448 594 MT
0.000 0.000 1.000 SC
448 594 1413 594 DL
FL
448 594 MT
0.000 0.000 0.000 SC
448 594 412 594 DL
FL
264 618 MT
(10.00) SH
448 407 MT
448 407 430 407 DL
FL
448 376 MT
448 376 430 376 DL
FL
448 345 MT
448 345 430 345 DL
FL
448 314 MT
448 314 430 314 DL
FL
448 438 MT
0.000 0.000 1.000 SC
448 438 1413 438 DL
FL
448 438 MT
0.000 0.000 0.000 SC
448 438 412 438 DL
FL
264 462 MT
(15.00) SH
448 252 MT
448 252 430 252 DL
FL
448 221 MT
448 221 430 221 DL
FL
448 190 MT
448 190 430 190 DL
FL
448 159 MT
448 159 430 159 DL
FL
448 283 MT
0.000 0.000 1.000 SC
448 283 1413 283 DL
FL
448 283 MT
0.000 0.000 0.000 SC
448 283 412 283 DL
FL
264 307 MT
(20.00) SH
448 128 MT
448 128 412 128 DL
FL
264 152 MT
(25.00) SH
GS
448 128 1414 905 CR
448 873 MT
8.00 LW
448 873 449 873 DL
FL
449 873 451 873 DL
FL
451 873 453 872 DL
FL
453 872 456 872 DL
FL
456 872 460 872 DL
FL
460 872 465 871 DL
FL
465 871 471 870 DL
FL
471 870 MT
471 870 478 869 DL
FL
478 869 487 867 DL
FL
487 867 498 864 DL
FL
498 864 509 860 DL
FL
509 860 523 853 DL
FL
523 853 537 844 DL
FL
537 844 553 831 DL
FL
553 831 570 815 DL
FL
570 815 589 794 DL
FL
589 794 609 769 DL
FL
609 769 MT
609 769 630 739 DL
FL
630 739 653 705 DL
FL
653 705 678 667 DL
FL
678 667 704 627 DL
FL
704 627 732 586 DL
FL
732 586 763 545 DL
FL
763 545 795 505 DL
FL
795 505 830 467 DL
FL
830 467 867 431 DL
FL
867 431 907 400 DL
FL
907 400 MT
907 400 950 373 DL
FL
950 373 995 350 DL
FL
995 350 1040 332 DL
FL
1040 332 1086 316 DL
FL
1086 316 1131 304 DL
FL
1131 304 1175 295 DL
FL
1175 295 1217 288 DL
FL
1217 288 1256 283 DL
FL
1256 283 1291 279 DL
FL
1291 279 1321 276 DL
FL
1321 276 MT
1321 276 1346 274 DL
FL
1346 274 1366 272 DL
FL
1366 272 1381 271 DL
FL
1381 271 1393 270 DL
FL
1393 270 1401 269 DL
FL
1401 269 1407 268 DL
FL
1407 268 1410 268 DL
FL
1410 268 1412 268 DL
FL
1412 268 1413 268 DL
FL
GR
1413 904 MT
1413 904 1413 128 DL
FL
448 128 MT
448 128 1413 128 DL
FL
448 904 MT
448 904 1413 904 DL
FL
448 904 MT
448 904 448 128 DL
FL
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
showpage
restore

%%Trailer
%%Pages: 1

%%EndDocument
FMENDEPSF
66.37 554.83 528.92 569.32 R
V
0 10 Q
0 X
(Figure 11: Speed-Up of X-) 136.3 562.66 T
(tree over R*-) 248.51 562.66 T
(tree) 304.59 562.66 T
(on Real Point Data \05070 MBytes\051) 323.74 562.66 T
0 0 0 385 318 186.33 153.91 98.19 587.84 FMBEGINEPSF
%%BeginDocument: /nfs/malaka/users1/wiss/berchtol/final/real70_pq.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: Informix Wingz Version 1.1b
%%CreationDate: Fri Feb 23 11:15:33 1996
%%For: Stefan Berchtold (berchtol)
%%BoundingBox: 0 0 385 318
%%Pages: (atend)
%%EndComments


%%BeginProlog
/AC /arc load def
/AN /arcn load def
/AT /arcto load def
/CL /clip load def
/CN /concat load def
/CP /closepath load def
/CR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP CL NP } bind def
/DL { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y2 LT SP } bind def
/DR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP } bind def
/DS { scrfreq scrang scrproc cvx setscreen } bind def
/EC /eoclip load def
/EF /eofill load def
/FL /fill load def
/GS /gsave load def
/GR /grestore load def
/LT /lineto load def
/LW /setlinewidth load def
/MOF { /uid exch def /sw exch def /nfn exch def /bfn exch def /bfd bfn findfont def /nent bfd maxlength 1 add def bfd
/UniqueID known not { /nent nent 1 add def } if /ofd nent dict def bfd { exch dup /FID ne { exch ofd 3 1 roll put } { pop pop } ifelse } forall
ofd /FontName nfn put ofd /PaintType get 0 eq { ofd /PaintType 2 put } if ofd /StrokeWidth sw put ofd /UniqueID uid put nfn ofd definefont pop } bind def
/MT /moveto load def
/NP /newpath load def
/RE { /nfn exch def /bfn exch def /bfd bfn findfont def /nf bfd maxlength dict def bfd { exch dup /FID ne {dup /Encoding eq {exch dup length array copy
nf 3 1 roll put } {exch nf 3 1 roll put} ifelse } {pop pop} ifelse } forall bfn (Symbol) ne { nf /FontName nfn put vect aload pop vect length 2 idiv {nf /Encoding get 3 1 roll put} repeat }
if nfn nf definefont pop } bind def
/RL /rlineto load def
/RM /rmoveto load def
/RO /rotate load def
/SF { /s exch def /f exch def f findfont [s 0 0 s neg 0 0 ] makefont setfont } bind def
/SG /setgray load def
/SH /show load def
/SL /scale load def
/SK /stroke load def
/SP /strokepath load def
/SC /setrgbcolor load def
/SD { /stl exch def /hud exch def /sz exch def /udof exch def /sof exch def /uw exch def /str exch def /len str stringwidth pop def
currentrgbcolor /blue exch def /green exch def /red exch def 0.333 SG GS sof 0 RM str SH hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW sof udof RM len 0
RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def sof yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if
SK GR } if red green blue SC str stringwidth pop /x exch def /xoff sof x add def /yoff sof neg def xoff neg yoff RM str SH
hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW 0 udof RM len 0 RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof
off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if GR str stringwidth pop sof RM } bind def
/CF { /cliptype exch def /pndex exch def /bgb exch def /bgg exch def /bgr exch def /fgb exch def /fgg exch def /fgr exch def GS 4.000 4.000 SL pathbbox 
/ury exch cvi def /urx exch cvi def /lly exch cvi def /llx exch cvi def /yoff lly 8 mod def /xoff llx 8 mod def /iy lly yoff sub def /ix llx xoff sub def /width urx llx sub 1 add xoff add def
 /height ury lly sub 1 add yoff add def /pdata pats pndex get def /imatrix [1 0 0 1 0 0] def /NullProc {} bind def cliptype cvx exec bgr bgg bgb SC FL fgr fgg fgb SC ix iy TR 0 64
height { /yoff exch def 0 64 width { /xoff exch def GS xoff yoff TR 64 64 true imatrix pdata NullProc imagemask GR } for } for GR } bind def
/ST { /stl exch def /hud exch def /sz exch def /udof exch def /uw exch def /str exch def /len str stringwidth pop def hud 1 eq { GS stl 0 eq { uw LW 0 udof RM len 0 RL } if stl
4 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if str SH } bind def
/TR /translate load def
/vect [ 8#260  /Adieresis 8#265  /Aring 8#276  /Ccedilla 8#300  /Eacute 8#311 /Ntilde 8#314  /Odieresis 8#321  /Udieresis 8#322  /aacute 8#323 /agrave  8#324  /acircumflex 8#325  /adieresis 8#326  /atilde
8#327  /aring 8#330  /ccedilla  8#331  /eacute 8#332  /egrave 8#333  /ecircumflex 8#334  /edieresis 8#335  /iacute  8#336  /igrave 8#337  /icircumflex 8#340  /idieresis 8#342  /ntilde 8#344  /oacute
8#345  /ograve 8#346  /ocircumflex 8#347  /odieresis 8#354  /otilde 8#355  /uacute  8#356  /ugrave 8#357  /ucircumflex 8#360  /udieresis 8#362  /Agrave 8#363  /Atilde  8#364  /Otilde 8#366  /ydieresis
8#367  /Ydieresis 8#374  /Acircumflex  8#375  /Ecircumflex 8#376  /Aacute 8#377  /Edieresis 8#177  /Egrave 8#200  /Iacute  8#201  /Icircumflex 8#202  /Idieresis 8#203  /Igrave 8#204  /Oacute 8#205  /Ocircumflex
8#206  /Ograve 8#207  /Uacute 8#210  /Ucircumflex 8#211  /Ugrave 8#365  /dotlessi ]def
/pats [<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFFDDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777>
<AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555>
<5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF>
<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>
<EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777>
<88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888>
<B1B1B1B1B1B1B1B1303030303030303003030303030303031B1B1B1B1B1B1B1BD8D8D8D8D8D8D8D8C0C0C0C0C0C0C0C00C0C0C0C0C0C0C0C8D8D8D8D8D8D8D8D>
<80808080808080801010101010101010020202020202020220202020202020200101010101010101080808080808080840404040404040400404040404040404>
<FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888>
<FFFFFFFFFFFFFFFF808080808080808080808080808080808080808080808080FFFFFFFFFFFFFFFF080808080808080808080808080808080808080808080808>
<80808080808080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080804040404040404040202020202020202000000000000000000202020202020202040404040404040408080808080808080000000000000000>
<82828282828282824444444444444444393939393939393944444444444444448282828282828282010101010101010101010101010101010101010101010101>
<F8F8F8F8F8F8F8F87474747474747474222222222222222247474747474747478F8F8F8F8F8F8F8F171717171717171722222222222222227171717171717171>
<5555555555555555A0A0A0A0A0A0A0A04040404040404040404040404040404055555555555555550A0A0A0A0A0A0A0A04040404040404040404040404040404>
<20202020202020205050505050505050888888888888888888888888888888888888888888888888888888888888888805050505050505050202020202020202>
<BFBFBFBFBFBFBFBF0000000000000000BFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0>
<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080800000000000000000080808080808080800000000000000008080808080808080000000000000000008080808080808080000000000000000>
<88888888888888880000000000000000222222222222222200000000000000008888888888888888000000000000000022222222222222220000000000000000>
<88888888888888882222222222222222888888888888888822222222222222228888888888888888222222222222222288888888888888882222222222222222>
<AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000>
<11111111111111112222222222222222444444444444444488888888888888881111111111111111222222222222222244444444444444448888888888888888>
<FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000>
<01010101010101010202020202020202040404040404040408080808080808081010101010101010202020202020202040404040404040408080808080808080>
<AAAAAAAAAAAAAAAA0000000000000000808080808080808000000000000000008888888888888888000000000000000080808080808080800000000000000000>
<FFFFFFFFFFFFFFFF8080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080>
<08080808080808081C1C1C1C1C1C1C1C2222222222222222C1C1C1C1C1C1C1C18080808080808080010101010101010102020202020202020404040404040404>
<888888888888888814141414141414142222222222222222414141414141414188888888888888880000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<4040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000004040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000>
<03030303030303038484848484848484484848484848484830303030303030300C0C0C0C0C0C0C0C020202020202020201010101010101010101010101010101>
<8080808080808080808080808080808041414141414141413E3E3E3E3E3E3E3E080808080808080808080808080808081414141414141414E3E3E3E3E3E3E3E3>
<101010101010101020202020202020205454545454545454AAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFF020202020202020204040404040404040808080808080808>
<777777777777777789898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F77777777777777779898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8>
<0000000000000000080808080808080814141414141414142A2A2A2A2A2A2A2A55555555555555552A2A2A2A2A2A2A2A14141414141414140808080808080808> ] def
/BEPSF { /IS save def /dcnt countdictstack def /opcnt count 1 sub def userdict begin /showpage {} def 0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit [] 0 setdash newpath } bind def
/EEPSF { count opcnt sub {pop} repeat countdictstack dcnt sub {end} repeat IS restore } bind def
%%EndProlog

%%Page: 1 1
save
currentscreen /scrproc exch cvlit def /scrang exch def /scrfreq exch def
2 setlinecap
0 318 TR
[1 0 0 -1 0 0] CN
0.250 0.250 SL
1.0 LW
GS
0 0 1543 1273 CR
GS
0 0 1543 1273 CR
GS
0 0 1543 1273 CR
/Helvetica /Helvetica-Wingz RE
/Helvetica-Wingz 48.000 SF
/Helvetica-Wingz 56.000 SF
/Helvetica-Wingz 48.000 SF
1.000 1.000 1.000 SC
0 0 1542 1272 DR
FL
0.000 0.000 0.000 SC
8.00 LW
4 4 1538 1268 DR
SP
FL
1.000 1.000 1.000 SC
56 56 1486 1216 DR
FL
476 128 1410 900 DR
FL
/Helvetica-Wingz 56.000 SF
785 1056 1101 1168 DR
FL
0.000 0.000 0.000 SC
813 1140 MT
(dimension) SH
/Helvetica-Wingz 48.000 SF
543 900 MT
1.00 LW
543 900 543 918 DL
FL
476 900 MT
476 900 476 936 DL
FL
462 1008 MT
(2) SH
676 900 MT
676 900 676 918 DL
FL
609 900 MT
0.000 0.000 1.000 SC
609 900 609 128 DL
FL
609 900 MT
0.000 0.000 0.000 SC
609 900 609 936 DL
FL
595 1008 MT
(4) SH
810 900 MT
810 900 810 918 DL
FL
743 900 MT
0.000 0.000 1.000 SC
743 900 743 128 DL
FL
743 900 MT
0.000 0.000 0.000 SC
743 900 743 936 DL
FL
729 1008 MT
(6) SH
943 900 MT
943 900 943 918 DL
FL
876 900 MT
0.000 0.000 1.000 SC
876 900 876 128 DL
FL
876 900 MT
0.000 0.000 0.000 SC
876 900 876 936 DL
FL
862 1008 MT
(8) SH
1076 900 MT
1076 900 1076 918 DL
FL
1010 900 MT
0.000 0.000 1.000 SC
1010 900 1010 128 DL
FL
1010 900 MT
0.000 0.000 0.000 SC
1010 900 1010 936 DL
FL
982 1008 MT
(10) SH
1210 900 MT
1210 900 1210 918 DL
FL
1143 900 MT
0.000 0.000 1.000 SC
1143 900 1143 128 DL
FL
1143 900 MT
0.000 0.000 0.000 SC
1143 900 1143 936 DL
FL
1115 1008 MT
(12) SH
1343 900 MT
1343 900 1343 918 DL
FL
1277 900 MT
0.000 0.000 1.000 SC
1277 900 1277 128 DL
FL
1277 900 MT
0.000 0.000 0.000 SC
1277 900 1277 936 DL
FL
1249 1008 MT
(14) SH
1410 900 MT
1410 900 1410 936 DL
FL
1382 1008 MT
(16) SH
/Helvetica-Wingz 56.000 SF
1.000 1.000 1.000 SC
104 258 216 770 DR
FL
0.000 0.000 0.000 SC
GS
188 742 MT
270 RO
(Speed-Up Factor) SH
GR
/Helvetica-Wingz 48.000 SF
476 869 MT
476 869 458 869 DL
FL
476 838 MT
476 838 458 838 DL
FL
476 807 MT
476 807 458 807 DL
FL
476 776 MT
476 776 458 776 DL
FL
476 900 MT
476 900 440 900 DL
FL
320 924 MT
(0.00) SH
476 715 MT
476 715 458 715 DL
FL
476 684 MT
476 684 458 684 DL
FL
476 653 MT
476 653 458 653 DL
FL
476 622 MT
476 622 458 622 DL
FL
476 746 MT
0.000 0.000 1.000 SC
476 746 1410 746 DL
FL
476 746 MT
0.000 0.000 0.000 SC
476 746 440 746 DL
FL
264 770 MT
(100.00) SH
476 560 MT
476 560 458 560 DL
FL
476 529 MT
476 529 458 529 DL
FL
476 499 MT
476 499 458 499 DL
FL
476 468 MT
476 468 458 468 DL
FL
476 591 MT
0.000 0.000 1.000 SC
476 591 1410 591 DL
FL
476 591 MT
0.000 0.000 0.000 SC
476 591 440 591 DL
FL
264 615 MT
(200.00) SH
476 406 MT
476 406 458 406 DL
FL
476 375 MT
476 375 458 375 DL
FL
476 344 MT
476 344 458 344 DL
FL
476 313 MT
476 313 458 313 DL
FL
476 437 MT
0.000 0.000 1.000 SC
476 437 1410 437 DL
FL
476 437 MT
0.000 0.000 0.000 SC
476 437 440 437 DL
FL
264 461 MT
(300.00) SH
476 252 MT
476 252 458 252 DL
FL
476 221 MT
476 221 458 221 DL
FL
476 190 MT
476 190 458 190 DL
FL
476 159 MT
476 159 458 159 DL
FL
476 282 MT
0.000 0.000 1.000 SC
476 282 1410 282 DL
FL
476 282 MT
0.000 0.000 0.000 SC
476 282 440 282 DL
FL
264 306 MT
(400.00) SH
476 128 MT
476 128 440 128 DL
FL
264 152 MT
(500.00) SH
GS
476 128 1411 901 CR
476 898 MT
8.00 LW
476 898 477 898 DL
FL
477 898 479 897 DL
FL
479 897 481 895 DL
FL
481 895 484 893 DL
FL
484 893 487 891 DL
FL
487 891 492 887 DL
FL
492 887 498 883 DL
FL
498 883 MT
498 883 505 878 DL
FL
505 878 514 872 DL
FL
514 872 524 864 DL
FL
524 864 535 854 DL
FL
535 854 548 842 DL
FL
548 842 562 827 DL
FL
562 827 578 810 DL
FL
578 810 594 789 DL
FL
594 789 612 764 DL
FL
612 764 632 735 DL
FL
632 735 MT
632 735 652 702 DL
FL
652 702 674 666 DL
FL
674 666 698 627 DL
FL
698 627 724 587 DL
FL
724 587 751 545 DL
FL
751 545 780 504 DL
FL
780 504 812 464 DL
FL
812 464 846 425 DL
FL
846 425 882 389 DL
FL
882 389 921 357 DL
FL
921 357 MT
921 357 962 329 DL
FL
962 329 1005 305 DL
FL
1005 305 1049 285 DL
FL
1049 285 1094 269 DL
FL
1094 269 1137 255 DL
FL
1137 255 1180 244 DL
FL
1180 244 1220 235 DL
FL
1220 235 1258 228 DL
FL
1258 228 1292 222 DL
FL
1292 222 1321 218 DL
FL
1321 218 MT
1321 218 1345 215 DL
FL
1345 215 1364 212 DL
FL
1364 212 1379 210 DL
FL
1379 210 1391 208 DL
FL
1391 208 1399 207 DL
FL
1399 207 1404 206 DL
FL
1404 206 1407 206 DL
FL
1407 206 1409 205 DL
FL
1409 205 1410 205 DL
FL
GR
1410 900 MT
1410 900 1410 128 DL
FL
476 128 MT
476 128 1410 128 DL
FL
476 900 MT
476 900 1410 900 DL
FL
476 900 MT
476 900 476 128 DL
FL
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
showpage
restore

%%Trailer
%%Pages: 1

%%EndDocument
FMENDEPSF
1 F
(a. Point Query) 162.33 576.82 T
(b. 10 Nearest-Neighbor Query) 344.55 577.54 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 9
%%Page: "10" 10
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 1 0.6 0 0 0 0.4 1]
[ 0 0.2 0.2 0.8 0.2 0 0]
[ 0.5 0 0 0 0.5 1 1]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54.65 770.95 540.65 780.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 96.95 540.65 515.45 R
V
1 10 Q
0 X
0.1 -0.02 (over the R*-) 54.65 508.79 B
0.1 -0.02 (tree. As expected, the speed-up increases with) 104.59 508.79 B
-0.61 -0.02 (growing dimension, reaching values of about 270 for D=16.) 54.65 497.75 B
0.08 -0.02 (For lower dimensions, the speed-up is still higher than one) 54.65 486.72 B
-0.43 -0.02 (order of magnitude \050e.g., for D=8 the speed-up is about 30\051.) 54.65 475.69 B
-0.48 -0.02 (The high speed-up factors are caused by the fact that, due to) 54.65 464.65 B
-0.84 -0.02 (the high overlap in high dimensions, the R*-tree needs to ac-) 54.65 453.62 B
-0.72 -0.02 (cess most of the directory pages. The total query time turned) 54.65 442.59 B
-0.34 -0.02 (out to be clearly dominated by the I/O-time, i.e. the number) 54.65 431.55 B
-0.5 -0.02 (of page accesses \050see also) 54.65 420.52 B
-0.5 (Figure 12) 157.42 420.52 P
-0.5 -0.02 (\051.) 195.53 420.52 B
-0.29 -0.02 (Since one may argue that synthetic databases with uni-) 72.65 402.52 B
-0.48 -0.02 (formly distributed data are not realistic in high-dimensional) 54.65 391.49 B
0.69 -0.02 (space, we also used real data in our experiments. We had) 54.65 380.45 B
-0.48 -0.02 (access to large Fourier databases of variable dimensionality) 54.65 369.42 B
1.88 -0.02 (containing about 70 Mbyte of Fourier data representing) 54.65 358.39 B
-0.45 -0.02 (shapes of polygons. The results of our experiments \050cf.) 54.65 347.35 B
-0.45 (Fig-) 271.98 347.35 P
0.34 (ure 11) 54.65 336.32 P
0.34 -0.02 (\051 show that the speed-up of the total search time for) 80.26 336.32 B
0.79 -0.02 (point queries is even higher \050about 90 for D=4 and about) 54.65 325.29 B
1.33 -0.02 (320 for D=8\051 than the speed-up of uniformly distributed) 306.65 508.79 B
-0.47 -0.02 (data. This result was surprising but corresponds to the high-) 306.65 497.63 B
1.94 -0.02 (er overlap of real data found in the overlap curves \050cf.) 306.65 486.47 B
2.04 (Figure 2) 306.65 475.31 P
2.02 -0.02 (\051. Additionally to point queries, in applications) 342.29 475.31 B
1.78 -0.02 (with high-dimensional data nearest neighbor queries are) 306.65 464.16 B
2.08 -0.02 (also important. We therefore also compared the perfor-) 306.65 453 B
1.96 -0.02 (mance of nearest neighbor queries searching for the 10) 306.65 441.84 B
-0.29 -0.02 (nearest neighbors. The nearest neighbor algorithm support-) 306.65 430.69 B
0.69 -0.02 (ed in the X-) 306.65 419.53 B
0.69 -0.02 (tree and R*-) 355.96 419.53 B
0.69 -0.02 (tree is the algorithm presented in) 406.52 419.53 B
1.26 -0.02 ([RKV) 306.65 408.37 B
1.26 -0.02 (95]. The results of our comparisons show that the) 333.49 408.37 B
-0.32 -0.02 (speed-up for nearest neighbor queries is still between about) 306.65 397.21 B
-0.35 -0.02 (10 for D=6 and about 20 for D=16. Since the nearest neigh-) 306.65 386.06 B
0.99 -0.02 (bor algorithm requires sorting the nodes according to the) 306.65 374.9 B
-0.06 -0.02 (min-max distance, the CPU-time needed for nearest neigh-) 306.65 363.74 B
2.06 -0.02 (bor queries is much higher. In) 306.65 352.59 B
2.08 (Figure 12) 440.87 352.59 P
2.06 -0.02 (, we therefore) 481.56 352.59 B
0.48 -0.02 (present the number of page accesses and the CPU-) 306.65 341.43 B
0.48 -0.02 (time of) 511.7 341.43 B
1.85 -0.02 (the X-) 306.65 330.27 B
1.85 -0.02 (tree and the R*-) 333.65 330.27 B
1.85 -0.02 (tree for nearest-neighbor queries.) 403.04 330.27 B
1.41 -0.02 (The figure shows that the X-) 306.65 319.11 B
1.41 -0.02 (tree provides a consistently) 427.83 319.11 B
0.03 -0.02 (better performance than the R*-) 306.65 307.96 B
0.03 -0.02 (tree. Note that, in counting) 433.88 307.96 B
-0.09 -0.02 (page accesses, accesses to supernodes of size) 306.65 296.8 B
3 F
-0.09 -0.02 (s) 488.34 296.8 B
1 F
-0.09 -0.02 ( are counted) 492.21 296.8 B
-0.44 -0.02 (as) 306.65 285.64 B
3 F
-0.44 -0.02 (s) 316.98 285.64 B
1 F
-0.44 -0.02 ( page accesses. In most practical cases, however, the su-) 320.85 285.64 B
1.46 -0.02 (pernodes will be cached due to the better main memory) 306.65 274.49 B
-0.13 -0.02 (utilization of the X-tree. For practically relevant buffer siz-) 306.65 263.33 B
-0.46 -0.02 (es \0501 MByte to 10 MBytes\051 there is no significant change of) 306.65 252.17 B
1.25 -0.02 (page accesses. For extreme buffer sizes of more than 10) 306.65 241.01 B
0.29 -0.02 (MBytes or less than 1 MByte, the speed-up may decrease.) 306.65 229.86 B
0.91 -0.02 (The better CPU-times of the X-) 306.65 218.7 B
0.91 -0.02 (tree may be explained by) 436.96 218.7 B
0.44 -0.02 (the fact that due to the overlap the R*-) 306.65 207.54 B
0.44 -0.02 (tree has to search a) 463.21 207.54 B
1.35 -0.02 (large portion of the directory which in addition is larger) 306.65 196.39 B
-0.02 (than the X-) 306.65 185.23 S
-0.02 (tree directory.) 351.42 185.23 S
0.25 (Figure 14) 324.65 167.23 P
0.24 -0.02 ( shows the total search time of point queries) 363.5 167.23 B
0.15 -0.02 (depending on the size of the database \050D=16\051. Note that in) 306.65 156.07 B
-0.93 -0.02 (this figure we use a logarithmic scale of the y-axis, since oth-) 306.65 144.91 B
-0.92 -0.02 (erwise the development of the times for the X-) 306.65 133.76 B
-0.92 -0.02 (tree would not) 485 133.76 B
0.25 -0.02 (be visible \050identical with the x-axis\051.) 306.65 122.6 B
0.25 (Figure 14) 456.5 122.6 P
0.25 -0.02 ( shows that) 495.37 122.6 B
-0.42 -0.02 (the search times of the X-) 306.65 111.44 B
-0.42 -0.02 (tree are consistently about two or-) 407.07 111.44 B
4.59 -0.02 (ders of magnitude faster than those of the R*-) 306.65 100.29 B
4.59 -0.02 (tree) 525.74 100.29 B
54.65 96.95 288.65 515.45 C
55.62 96.95 287.68 321.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 386 320 219.23 170.12 62.44 135.39 FMBEGINEPSF
%%BeginDocument: /nfs/malaka/users1/wiss/berchtol/final/100mb_pq.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: Informix Wingz Version 1.1b
%%CreationDate: Fri Feb 23 11:11:59 1996
%%For: Stefan Berchtold (berchtol)
%%BoundingBox: 0 0 386 320
%%Pages: (atend)
%%EndComments


%%BeginProlog
/AC /arc load def
/AN /arcn load def
/AT /arcto load def
/CL /clip load def
/CN /concat load def
/CP /closepath load def
/CR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP CL NP } bind def
/DL { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y2 LT SP } bind def
/DR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP } bind def
/DS { scrfreq scrang scrproc cvx setscreen } bind def
/EC /eoclip load def
/EF /eofill load def
/FL /fill load def
/GS /gsave load def
/GR /grestore load def
/LT /lineto load def
/LW /setlinewidth load def
/MOF { /uid exch def /sw exch def /nfn exch def /bfn exch def /bfd bfn findfont def /nent bfd maxlength 1 add def bfd
/UniqueID known not { /nent nent 1 add def } if /ofd nent dict def bfd { exch dup /FID ne { exch ofd 3 1 roll put } { pop pop } ifelse } forall
ofd /FontName nfn put ofd /PaintType get 0 eq { ofd /PaintType 2 put } if ofd /StrokeWidth sw put ofd /UniqueID uid put nfn ofd definefont pop } bind def
/MT /moveto load def
/NP /newpath load def
/RE { /nfn exch def /bfn exch def /bfd bfn findfont def /nf bfd maxlength dict def bfd { exch dup /FID ne {dup /Encoding eq {exch dup length array copy
nf 3 1 roll put } {exch nf 3 1 roll put} ifelse } {pop pop} ifelse } forall bfn (Symbol) ne { nf /FontName nfn put vect aload pop vect length 2 idiv {nf /Encoding get 3 1 roll put} repeat }
if nfn nf definefont pop } bind def
/RL /rlineto load def
/RM /rmoveto load def
/RO /rotate load def
/SF { /s exch def /f exch def f findfont [s 0 0 s neg 0 0 ] makefont setfont } bind def
/SG /setgray load def
/SH /show load def
/SL /scale load def
/SK /stroke load def
/SP /strokepath load def
/SC /setrgbcolor load def
/SD { /stl exch def /hud exch def /sz exch def /udof exch def /sof exch def /uw exch def /str exch def /len str stringwidth pop def
currentrgbcolor /blue exch def /green exch def /red exch def 0.333 SG GS sof 0 RM str SH hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW sof udof RM len 0
RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def sof yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if
SK GR } if red green blue SC str stringwidth pop /x exch def /xoff sof x add def /yoff sof neg def xoff neg yoff RM str SH
hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW 0 udof RM len 0 RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof
off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if GR str stringwidth pop sof RM } bind def
/CF { /cliptype exch def /pndex exch def /bgb exch def /bgg exch def /bgr exch def /fgb exch def /fgg exch def /fgr exch def GS 4.000 4.000 SL pathbbox 
/ury exch cvi def /urx exch cvi def /lly exch cvi def /llx exch cvi def /yoff lly 8 mod def /xoff llx 8 mod def /iy lly yoff sub def /ix llx xoff sub def /width urx llx sub 1 add xoff add def
 /height ury lly sub 1 add yoff add def /pdata pats pndex get def /imatrix [1 0 0 1 0 0] def /NullProc {} bind def cliptype cvx exec bgr bgg bgb SC FL fgr fgg fgb SC ix iy TR 0 64
height { /yoff exch def 0 64 width { /xoff exch def GS xoff yoff TR 64 64 true imatrix pdata NullProc imagemask GR } for } for GR } bind def
/ST { /stl exch def /hud exch def /sz exch def /udof exch def /uw exch def /str exch def /len str stringwidth pop def hud 1 eq { GS stl 0 eq { uw LW 0 udof RM len 0 RL } if stl
4 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if str SH } bind def
/TR /translate load def
/vect [ 8#260  /Adieresis 8#265  /Aring 8#276  /Ccedilla 8#300  /Eacute 8#311 /Ntilde 8#314  /Odieresis 8#321  /Udieresis 8#322  /aacute 8#323 /agrave  8#324  /acircumflex 8#325  /adieresis 8#326  /atilde
8#327  /aring 8#330  /ccedilla  8#331  /eacute 8#332  /egrave 8#333  /ecircumflex 8#334  /edieresis 8#335  /iacute  8#336  /igrave 8#337  /icircumflex 8#340  /idieresis 8#342  /ntilde 8#344  /oacute
8#345  /ograve 8#346  /ocircumflex 8#347  /odieresis 8#354  /otilde 8#355  /uacute  8#356  /ugrave 8#357  /ucircumflex 8#360  /udieresis 8#362  /Agrave 8#363  /Atilde  8#364  /Otilde 8#366  /ydieresis
8#367  /Ydieresis 8#374  /Acircumflex  8#375  /Ecircumflex 8#376  /Aacute 8#377  /Edieresis 8#177  /Egrave 8#200  /Iacute  8#201  /Icircumflex 8#202  /Idieresis 8#203  /Igrave 8#204  /Oacute 8#205  /Ocircumflex
8#206  /Ograve 8#207  /Uacute 8#210  /Ucircumflex 8#211  /Ugrave 8#365  /dotlessi ]def
/pats [<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFFDDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777>
<AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555>
<5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF>
<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>
<EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777>
<88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888>
<B1B1B1B1B1B1B1B1303030303030303003030303030303031B1B1B1B1B1B1B1BD8D8D8D8D8D8D8D8C0C0C0C0C0C0C0C00C0C0C0C0C0C0C0C8D8D8D8D8D8D8D8D>
<80808080808080801010101010101010020202020202020220202020202020200101010101010101080808080808080840404040404040400404040404040404>
<FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888>
<FFFFFFFFFFFFFFFF808080808080808080808080808080808080808080808080FFFFFFFFFFFFFFFF080808080808080808080808080808080808080808080808>
<80808080808080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080804040404040404040202020202020202000000000000000000202020202020202040404040404040408080808080808080000000000000000>
<82828282828282824444444444444444393939393939393944444444444444448282828282828282010101010101010101010101010101010101010101010101>
<F8F8F8F8F8F8F8F87474747474747474222222222222222247474747474747478F8F8F8F8F8F8F8F171717171717171722222222222222227171717171717171>
<5555555555555555A0A0A0A0A0A0A0A04040404040404040404040404040404055555555555555550A0A0A0A0A0A0A0A04040404040404040404040404040404>
<20202020202020205050505050505050888888888888888888888888888888888888888888888888888888888888888805050505050505050202020202020202>
<BFBFBFBFBFBFBFBF0000000000000000BFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0>
<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080800000000000000000080808080808080800000000000000008080808080808080000000000000000008080808080808080000000000000000>
<88888888888888880000000000000000222222222222222200000000000000008888888888888888000000000000000022222222222222220000000000000000>
<88888888888888882222222222222222888888888888888822222222222222228888888888888888222222222222222288888888888888882222222222222222>
<AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000>
<11111111111111112222222222222222444444444444444488888888888888881111111111111111222222222222222244444444444444448888888888888888>
<FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000>
<01010101010101010202020202020202040404040404040408080808080808081010101010101010202020202020202040404040404040408080808080808080>
<AAAAAAAAAAAAAAAA0000000000000000808080808080808000000000000000008888888888888888000000000000000080808080808080800000000000000000>
<FFFFFFFFFFFFFFFF8080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080>
<08080808080808081C1C1C1C1C1C1C1C2222222222222222C1C1C1C1C1C1C1C18080808080808080010101010101010102020202020202020404040404040404>
<888888888888888814141414141414142222222222222222414141414141414188888888888888880000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<4040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000004040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000>
<03030303030303038484848484848484484848484848484830303030303030300C0C0C0C0C0C0C0C020202020202020201010101010101010101010101010101>
<8080808080808080808080808080808041414141414141413E3E3E3E3E3E3E3E080808080808080808080808080808081414141414141414E3E3E3E3E3E3E3E3>
<101010101010101020202020202020205454545454545454AAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFF020202020202020204040404040404040808080808080808>
<777777777777777789898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F77777777777777779898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8>
<0000000000000000080808080808080814141414141414142A2A2A2A2A2A2A2A55555555555555552A2A2A2A2A2A2A2A14141414141414140808080808080808> ] def
/BEPSF { /IS save def /dcnt countdictstack def /opcnt count 1 sub def userdict begin /showpage {} def 0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit [] 0 setdash newpath } bind def
/EEPSF { count opcnt sub {pop} repeat countdictstack dcnt sub {end} repeat IS restore } bind def
%%EndProlog

%%Page: 1 1
save
currentscreen /scrproc exch cvlit def /scrang exch def /scrfreq exch def
2 setlinecap
0 320 TR
[1 0 0 -1 0 0] CN
0.250 0.250 SL
1.0 LW
GS
0 0 1546 1283 CR
GS
0 0 1546 1283 CR
GS
0 0 1546 1283 CR
/Helvetica /Helvetica-Wingz RE
/Helvetica-Wingz 48.000 SF
/Helvetica-Wingz 56.000 SF
/Helvetica-Wingz 48.000 SF
1.000 1.000 1.000 SC
0 0 1545 1282 DR
FL
0.000 0.000 0.000 SC
8.00 LW
4 4 1541 1278 DR
SP
FL
1.000 1.000 1.000 SC
56 56 1489 1226 DR
FL
476 128 1413 910 DR
FL
/Helvetica-Wingz 56.000 SF
786 1066 1102 1178 DR
FL
0.000 0.000 0.000 SC
814 1150 MT
(dimension) SH
/Helvetica-Wingz 48.000 SF
543 910 MT
1.00 LW
543 910 543 928 DL
FL
476 910 MT
476 910 476 946 DL
FL
462 1018 MT
(2) SH
677 910 MT
677 910 677 928 DL
FL
610 910 MT
0.000 0.000 1.000 SC
610 910 610 128 DL
FL
610 910 MT
0.000 0.000 0.000 SC
610 910 610 946 DL
FL
596 1018 MT
(4) SH
811 910 MT
811 910 811 928 DL
FL
744 910 MT
0.000 0.000 1.000 SC
744 910 744 128 DL
FL
744 910 MT
0.000 0.000 0.000 SC
744 910 744 946 DL
FL
730 1018 MT
(6) SH
945 910 MT
945 910 945 928 DL
FL
878 910 MT
0.000 0.000 1.000 SC
878 910 878 128 DL
FL
878 910 MT
0.000 0.000 0.000 SC
878 910 878 946 DL
FL
864 1018 MT
(8) SH
1078 910 MT
1078 910 1078 928 DL
FL
1011 910 MT
0.000 0.000 1.000 SC
1011 910 1011 128 DL
FL
1011 910 MT
0.000 0.000 0.000 SC
1011 910 1011 946 DL
FL
983 1018 MT
(10) SH
1212 910 MT
1212 910 1212 928 DL
FL
1145 910 MT
0.000 0.000 1.000 SC
1145 910 1145 128 DL
FL
1145 910 MT
0.000 0.000 0.000 SC
1145 910 1145 946 DL
FL
1117 1018 MT
(12) SH
1346 910 MT
1346 910 1346 928 DL
FL
1279 910 MT
0.000 0.000 1.000 SC
1279 910 1279 128 DL
FL
1279 910 MT
0.000 0.000 0.000 SC
1279 910 1279 946 DL
FL
1251 1018 MT
(14) SH
1413 910 MT
1413 910 1413 946 DL
FL
1385 1018 MT
(16) SH
/Helvetica-Wingz 56.000 SF
1.000 1.000 1.000 SC
104 263 216 775 DR
FL
0.000 0.000 0.000 SC
GS
188 747 MT
270 RO
(Speed-Up Factor) SH
GR
/Helvetica-Wingz 48.000 SF
476 884 MT
476 884 458 884 DL
FL
476 858 MT
476 858 458 858 DL
FL
476 832 MT
476 832 458 832 DL
FL
476 806 MT
476 806 458 806 DL
FL
476 910 MT
476 910 440 910 DL
FL
320 934 MT
(0.00) SH
476 754 MT
476 754 458 754 DL
FL
476 728 MT
476 728 458 728 DL
FL
476 701 MT
476 701 458 701 DL
FL
476 675 MT
476 675 458 675 DL
FL
476 780 MT
0.000 0.000 1.000 SC
476 780 1413 780 DL
FL
476 780 MT
0.000 0.000 0.000 SC
476 780 440 780 DL
FL
292 804 MT
(50.00) SH
476 623 MT
476 623 458 623 DL
FL
476 597 MT
476 597 458 597 DL
FL
476 571 MT
476 571 458 571 DL
FL
476 545 MT
476 545 458 545 DL
FL
476 649 MT
0.000 0.000 1.000 SC
476 649 1413 649 DL
FL
476 649 MT
0.000 0.000 0.000 SC
476 649 440 649 DL
FL
264 673 MT
(100.00) SH
476 493 MT
476 493 458 493 DL
FL
476 467 MT
476 467 458 467 DL
FL
476 441 MT
476 441 458 441 DL
FL
476 415 MT
476 415 458 415 DL
FL
476 519 MT
0.000 0.000 1.000 SC
476 519 1413 519 DL
FL
476 519 MT
0.000 0.000 0.000 SC
476 519 440 519 DL
FL
264 543 MT
(150.00) SH
476 363 MT
476 363 458 363 DL
FL
476 337 MT
476 337 458 337 DL
FL
476 310 MT
476 310 458 310 DL
FL
476 284 MT
476 284 458 284 DL
FL
476 389 MT
0.000 0.000 1.000 SC
476 389 1413 389 DL
FL
476 389 MT
0.000 0.000 0.000 SC
476 389 440 389 DL
FL
264 413 MT
(200.00) SH
476 232 MT
476 232 458 232 DL
FL
476 206 MT
476 206 458 206 DL
FL
476 180 MT
476 180 458 180 DL
FL
476 154 MT
476 154 458 154 DL
FL
476 258 MT
0.000 0.000 1.000 SC
476 258 1413 258 DL
FL
476 258 MT
0.000 0.000 0.000 SC
476 258 440 258 DL
FL
264 282 MT
(250.00) SH
476 128 MT
476 128 440 128 DL
FL
264 152 MT
(300.00) SH
GS
476 128 1414 911 CR
476 907 MT
8.00 LW
476 907 477 907 DL
FL
477 907 479 907 DL
FL
479 907 481 907 DL
FL
481 907 486 907 DL
FL
486 907 491 906 DL
FL
491 906 499 906 DL
FL
499 906 508 905 DL
FL
508 905 521 904 DL
FL
521 904 MT
521 904 535 902 DL
FL
535 902 552 901 DL
FL
552 901 572 899 DL
FL
572 899 593 897 DL
FL
593 897 615 894 DL
FL
615 894 639 891 DL
FL
639 891 665 888 DL
FL
665 888 690 884 DL
FL
690 884 717 879 DL
FL
717 879 744 874 DL
FL
744 874 MT
744 874 770 869 DL
FL
770 869 797 862 DL
FL
797 862 825 854 DL
FL
825 854 852 844 DL
FL
852 844 880 831 DL
FL
880 831 909 816 DL
FL
909 816 939 797 DL
FL
939 797 969 774 DL
FL
969 774 1001 747 DL
FL
1001 747 1034 715 DL
FL
1034 715 MT
1034 715 1068 678 DL
FL
1068 678 1103 638 DL
FL
1103 638 1138 594 DL
FL
1138 594 1172 548 DL
FL
1172 548 1207 502 DL
FL
1207 502 1239 456 DL
FL
1239 456 1270 411 DL
FL
1270 411 1298 370 DL
FL
1298 370 1324 332 DL
FL
1324 332 1346 298 DL
FL
1346 298 MT
1346 298 1364 271 DL
FL
1364 271 1379 249 DL
FL
1379 249 1390 232 DL
FL
1390 232 1398 219 DL
FL
1398 219 1405 210 DL
FL
1405 210 1409 204 DL
FL
1409 204 1411 200 DL
FL
1411 200 1412 199 DL
FL
1412 199 1413 198 DL
FL
GR
1413 910 MT
1413 910 1413 128 DL
FL
476 128 MT
476 128 1413 128 DL
FL
476 910 MT
476 910 1413 910 DL
FL
476 910 MT
476 910 476 128 DL
FL
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
showpage
restore

%%Trailer
%%Pages: 1

%%EndDocument
FMENDEPSF
61.62 102.95 281.19 125.8 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
-0.69 (Figure 13: Speed-Up of X-) 61.62 117.72 P
-0.69 (tree over R*-) 171.07 117.72 P
-0.69 (tree on Point) 225.77 117.72 P
(Queries \050100 MBytes of Synthetic Point Data\051) 74.19 105.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 96.95 288.65 515.45 C
-8.35 24.95 603.65 816.95 C
54.65 524.45 540.65 740.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 524.45 540.65 740.45 R
7 X
0 0 0 1 0 0 0 K
V
63.8 536.23 531.5 547.3 R
V
0 10 Q
0 X
(Figure 12: Number of Page Accesses versus CPU-Time on Real Point Data \05070 MBytes\051) 111.99 540.63 T
1 F
(a. Page Accesses) 154.24 555.44 T
0 0 0 512 380 206.49 160.56 308.55 568.11 FMBEGINEPSF
%%BeginDocument: /nfs/malaka/users1/wiss/berchtol/final/real70_10NN_cpu.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: Informix Wingz Version 1.1b
%%CreationDate: Fri Feb 23 11:25:36 1996
%%For: Stefan Berchtold (berchtol)
%%BoundingBox: 0 0 512 380
%%Pages: (atend)
%%EndComments


%%BeginProlog
/AC /arc load def
/AN /arcn load def
/AT /arcto load def
/CL /clip load def
/CN /concat load def
/CP /closepath load def
/CR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP CL NP } bind def
/DL { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y2 LT SP } bind def
/DR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP } bind def
/DS { scrfreq scrang scrproc cvx setscreen } bind def
/EC /eoclip load def
/EF /eofill load def
/FL /fill load def
/GS /gsave load def
/GR /grestore load def
/LT /lineto load def
/LW /setlinewidth load def
/MOF { /uid exch def /sw exch def /nfn exch def /bfn exch def /bfd bfn findfont def /nent bfd maxlength 1 add def bfd
/UniqueID known not { /nent nent 1 add def } if /ofd nent dict def bfd { exch dup /FID ne { exch ofd 3 1 roll put } { pop pop } ifelse } forall
ofd /FontName nfn put ofd /PaintType get 0 eq { ofd /PaintType 2 put } if ofd /StrokeWidth sw put ofd /UniqueID uid put nfn ofd definefont pop } bind def
/MT /moveto load def
/NP /newpath load def
/RE { /nfn exch def /bfn exch def /bfd bfn findfont def /nf bfd maxlength dict def bfd { exch dup /FID ne {dup /Encoding eq {exch dup length array copy
nf 3 1 roll put } {exch nf 3 1 roll put} ifelse } {pop pop} ifelse } forall bfn (Symbol) ne { nf /FontName nfn put vect aload pop vect length 2 idiv {nf /Encoding get 3 1 roll put} repeat }
if nfn nf definefont pop } bind def
/RL /rlineto load def
/RM /rmoveto load def
/RO /rotate load def
/SF { /s exch def /f exch def f findfont [s 0 0 s neg 0 0 ] makefont setfont } bind def
/SG /setgray load def
/SH /show load def
/SL /scale load def
/SK /stroke load def
/SP /strokepath load def
/SC /setrgbcolor load def
/SD { /stl exch def /hud exch def /sz exch def /udof exch def /sof exch def /uw exch def /str exch def /len str stringwidth pop def
currentrgbcolor /blue exch def /green exch def /red exch def 0.333 SG GS sof 0 RM str SH hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW sof udof RM len 0
RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def sof yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if
SK GR } if red green blue SC str stringwidth pop /x exch def /xoff sof x add def /yoff sof neg def xoff neg yoff RM str SH
hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW 0 udof RM len 0 RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof
off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if GR str stringwidth pop sof RM } bind def
/CF { /cliptype exch def /pndex exch def /bgb exch def /bgg exch def /bgr exch def /fgb exch def /fgg exch def /fgr exch def GS 4.000 4.000 SL pathbbox 
/ury exch cvi def /urx exch cvi def /lly exch cvi def /llx exch cvi def /yoff lly 8 mod def /xoff llx 8 mod def /iy lly yoff sub def /ix llx xoff sub def /width urx llx sub 1 add xoff add def
 /height ury lly sub 1 add yoff add def /pdata pats pndex get def /imatrix [1 0 0 1 0 0] def /NullProc {} bind def cliptype cvx exec bgr bgg bgb SC FL fgr fgg fgb SC ix iy TR 0 64
height { /yoff exch def 0 64 width { /xoff exch def GS xoff yoff TR 64 64 true imatrix pdata NullProc imagemask GR } for } for GR } bind def
/ST { /stl exch def /hud exch def /sz exch def /udof exch def /uw exch def /str exch def /len str stringwidth pop def hud 1 eq { GS stl 0 eq { uw LW 0 udof RM len 0 RL } if stl
4 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if str SH } bind def
/TR /translate load def
/vect [ 8#260  /Adieresis 8#265  /Aring 8#276  /Ccedilla 8#300  /Eacute 8#311 /Ntilde 8#314  /Odieresis 8#321  /Udieresis 8#322  /aacute 8#323 /agrave  8#324  /acircumflex 8#325  /adieresis 8#326  /atilde
8#327  /aring 8#330  /ccedilla  8#331  /eacute 8#332  /egrave 8#333  /ecircumflex 8#334  /edieresis 8#335  /iacute  8#336  /igrave 8#337  /icircumflex 8#340  /idieresis 8#342  /ntilde 8#344  /oacute
8#345  /ograve 8#346  /ocircumflex 8#347  /odieresis 8#354  /otilde 8#355  /uacute  8#356  /ugrave 8#357  /ucircumflex 8#360  /udieresis 8#362  /Agrave 8#363  /Atilde  8#364  /Otilde 8#366  /ydieresis
8#367  /Ydieresis 8#374  /Acircumflex  8#375  /Ecircumflex 8#376  /Aacute 8#377  /Edieresis 8#177  /Egrave 8#200  /Iacute  8#201  /Icircumflex 8#202  /Idieresis 8#203  /Igrave 8#204  /Oacute 8#205  /Ocircumflex
8#206  /Ograve 8#207  /Uacute 8#210  /Ucircumflex 8#211  /Ugrave 8#365  /dotlessi ]def
/pats [<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFFDDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777>
<AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555>
<5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF>
<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>
<EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777>
<88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888>
<B1B1B1B1B1B1B1B1303030303030303003030303030303031B1B1B1B1B1B1B1BD8D8D8D8D8D8D8D8C0C0C0C0C0C0C0C00C0C0C0C0C0C0C0C8D8D8D8D8D8D8D8D>
<80808080808080801010101010101010020202020202020220202020202020200101010101010101080808080808080840404040404040400404040404040404>
<FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888>
<FFFFFFFFFFFFFFFF808080808080808080808080808080808080808080808080FFFFFFFFFFFFFFFF080808080808080808080808080808080808080808080808>
<80808080808080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080804040404040404040202020202020202000000000000000000202020202020202040404040404040408080808080808080000000000000000>
<82828282828282824444444444444444393939393939393944444444444444448282828282828282010101010101010101010101010101010101010101010101>
<F8F8F8F8F8F8F8F87474747474747474222222222222222247474747474747478F8F8F8F8F8F8F8F171717171717171722222222222222227171717171717171>
<5555555555555555A0A0A0A0A0A0A0A04040404040404040404040404040404055555555555555550A0A0A0A0A0A0A0A04040404040404040404040404040404>
<20202020202020205050505050505050888888888888888888888888888888888888888888888888888888888888888805050505050505050202020202020202>
<BFBFBFBFBFBFBFBF0000000000000000BFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0>
<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080800000000000000000080808080808080800000000000000008080808080808080000000000000000008080808080808080000000000000000>
<88888888888888880000000000000000222222222222222200000000000000008888888888888888000000000000000022222222222222220000000000000000>
<88888888888888882222222222222222888888888888888822222222222222228888888888888888222222222222222288888888888888882222222222222222>
<AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000>
<11111111111111112222222222222222444444444444444488888888888888881111111111111111222222222222222244444444444444448888888888888888>
<FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000>
<01010101010101010202020202020202040404040404040408080808080808081010101010101010202020202020202040404040404040408080808080808080>
<AAAAAAAAAAAAAAAA0000000000000000808080808080808000000000000000008888888888888888000000000000000080808080808080800000000000000000>
<FFFFFFFFFFFFFFFF8080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080>
<08080808080808081C1C1C1C1C1C1C1C2222222222222222C1C1C1C1C1C1C1C18080808080808080010101010101010102020202020202020404040404040404>
<888888888888888814141414141414142222222222222222414141414141414188888888888888880000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<4040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000004040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000>
<03030303030303038484848484848484484848484848484830303030303030300C0C0C0C0C0C0C0C020202020202020201010101010101010101010101010101>
<8080808080808080808080808080808041414141414141413E3E3E3E3E3E3E3E080808080808080808080808080808081414141414141414E3E3E3E3E3E3E3E3>
<101010101010101020202020202020205454545454545454AAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFF020202020202020204040404040404040808080808080808>
<777777777777777789898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F77777777777777779898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8>
<0000000000000000080808080808080814141414141414142A2A2A2A2A2A2A2A55555555555555552A2A2A2A2A2A2A2A14141414141414140808080808080808> ] def
/BEPSF { /IS save def /dcnt countdictstack def /opcnt count 1 sub def userdict begin /showpage {} def 0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit [] 0 setdash newpath } bind def
/EEPSF { count opcnt sub {pop} repeat countdictstack dcnt sub {end} repeat IS restore } bind def
%%EndProlog

%%Page: 1 1
save
currentscreen /scrproc exch cvlit def /scrang exch def /scrfreq exch def
2 setlinecap
0 380 TR
[1 0 0 -1 0 0] CN
0.250 0.250 SL
1.0 LW
GS
0 0 2050 1520 CR
GS
0 0 2050 1520 CR
GS
0 0 2050 1520 CR
/Helvetica /Helvetica-Wingz RE
/Helvetica-Wingz 48.000 SF
/Helvetica-Wingz 56.000 SF
/Helvetica-Wingz 48.000 SF
1.000 1.000 1.000 SC
0 0 2049 1519 DR
FL
0.000 0.000 0.000 SC
8.00 LW
4 4 2045 1515 DR
SP
FL
1.000 1.000 1.000 SC
1611 626 1993 893 DR
FL
0.000 0.000 0.000 SC
1.00 LW
1611 626 1993 893 DR
SP
FL
/Helvetica-Wingz 56.000 SF
1744 731 MT
(R*-tree) SH
1664 703 MT
8.00 LW
1664 703 1712 703 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
0.000 0.000 0.000 SC
1744 844 MT
(X-tree) SH
1664 816 MT
1664 816 1712 816 DL
FL
1.000 1.000 1.000 SC
56 56 1563 1463 DR
FL
448 128 1487 1147 DR
FL
809 1303 1125 1415 DR
FL
0.000 0.000 0.000 SC
837 1387 MT
(dimension) SH
/Helvetica-Wingz 48.000 SF
522 1147 MT
1.00 LW
522 1147 522 1165 DL
FL
448 1147 MT
448 1147 448 1183 DL
FL
434 1255 MT
(2) SH
671 1147 MT
671 1147 671 1165 DL
FL
596 1147 MT
0.000 0.000 1.000 SC
596 1147 596 128 DL
FL
596 1147 MT
0.000 0.000 0.000 SC
596 1147 596 1183 DL
FL
582 1255 MT
(4) SH
819 1147 MT
819 1147 819 1165 DL
FL
745 1147 MT
0.000 0.000 1.000 SC
745 1147 745 128 DL
FL
745 1147 MT
0.000 0.000 0.000 SC
745 1147 745 1183 DL
FL
731 1255 MT
(6) SH
968 1147 MT
968 1147 968 1165 DL
FL
893 1147 MT
0.000 0.000 1.000 SC
893 1147 893 128 DL
FL
893 1147 MT
0.000 0.000 0.000 SC
893 1147 893 1183 DL
FL
879 1255 MT
(8) SH
1116 1147 MT
1116 1147 1116 1165 DL
FL
1042 1147 MT
0.000 0.000 1.000 SC
1042 1147 1042 128 DL
FL
1042 1147 MT
0.000 0.000 0.000 SC
1042 1147 1042 1183 DL
FL
1014 1255 MT
(10) SH
1264 1147 MT
1264 1147 1264 1165 DL
FL
1190 1147 MT
0.000 0.000 1.000 SC
1190 1147 1190 128 DL
FL
1190 1147 MT
0.000 0.000 0.000 SC
1190 1147 1190 1183 DL
FL
1162 1255 MT
(12) SH
1413 1147 MT
1413 1147 1413 1165 DL
FL
1339 1147 MT
0.000 0.000 1.000 SC
1339 1147 1339 128 DL
FL
1339 1147 MT
0.000 0.000 0.000 SC
1339 1147 1339 1183 DL
FL
1311 1255 MT
(14) SH
1487 1147 MT
1487 1147 1487 1183 DL
FL
1459 1255 MT
(16) SH
/Helvetica-Wingz 56.000 SF
1.000 1.000 1.000 SC
104 476 216 800 DR
FL
0.000 0.000 0.000 SC
GS
188 772 MT
270 RO
(CPU \050sec\051) SH
GR
/Helvetica-Wingz 48.000 SF
448 1122 MT
448 1122 430 1122 DL
FL
448 1096 MT
448 1096 430 1096 DL
FL
448 1071 MT
448 1071 430 1071 DL
FL
448 1045 MT
448 1045 430 1045 DL
FL
448 1147 MT
448 1147 412 1147 DL
FL
292 1171 MT
(0.00) SH
448 994 MT
448 994 430 994 DL
FL
448 969 MT
448 969 430 969 DL
FL
448 943 MT
448 943 430 943 DL
FL
448 918 MT
448 918 430 918 DL
FL
448 1020 MT
0.000 0.000 1.000 SC
448 1020 1487 1020 DL
FL
448 1020 MT
0.000 0.000 0.000 SC
448 1020 412 1020 DL
FL
292 1044 MT
(5.00) SH
448 867 MT
448 867 430 867 DL
FL
448 841 MT
448 841 430 841 DL
FL
448 816 MT
448 816 430 816 DL
FL
448 790 MT
448 790 430 790 DL
FL
448 892 MT
0.000 0.000 1.000 SC
448 892 1487 892 DL
FL
448 892 MT
0.000 0.000 0.000 SC
448 892 412 892 DL
FL
264 916 MT
(10.00) SH
448 739 MT
448 739 430 739 DL
FL
448 714 MT
448 714 430 714 DL
FL
448 688 MT
448 688 430 688 DL
FL
448 663 MT
448 663 430 663 DL
FL
448 765 MT
0.000 0.000 1.000 SC
448 765 1487 765 DL
FL
448 765 MT
0.000 0.000 0.000 SC
448 765 412 765 DL
FL
264 789 MT
(15.00) SH
448 612 MT
448 612 430 612 DL
FL
448 587 MT
448 587 430 587 DL
FL
448 561 MT
448 561 430 561 DL
FL
448 536 MT
448 536 430 536 DL
FL
448 637 MT
0.000 0.000 1.000 SC
448 637 1487 637 DL
FL
448 637 MT
0.000 0.000 0.000 SC
448 637 412 637 DL
FL
264 661 MT
(20.00) SH
448 485 MT
448 485 430 485 DL
FL
448 459 MT
448 459 430 459 DL
FL
448 434 MT
448 434 430 434 DL
FL
448 408 MT
448 408 430 408 DL
FL
448 510 MT
0.000 0.000 1.000 SC
448 510 1487 510 DL
FL
448 510 MT
0.000 0.000 0.000 SC
448 510 412 510 DL
FL
264 534 MT
(25.00) SH
448 357 MT
448 357 430 357 DL
FL
448 332 MT
448 332 430 332 DL
FL
448 306 MT
448 306 430 306 DL
FL
448 281 MT
448 281 430 281 DL
FL
448 383 MT
0.000 0.000 1.000 SC
448 383 1487 383 DL
FL
448 383 MT
0.000 0.000 0.000 SC
448 383 412 383 DL
FL
264 407 MT
(30.00) SH
448 230 MT
448 230 430 230 DL
FL
448 204 MT
448 204 430 204 DL
FL
448 179 MT
448 179 430 179 DL
FL
448 153 MT
448 153 430 153 DL
FL
448 255 MT
0.000 0.000 1.000 SC
448 255 1487 255 DL
FL
448 255 MT
0.000 0.000 0.000 SC
448 255 412 255 DL
FL
264 279 MT
(35.00) SH
448 128 MT
448 128 412 128 DL
FL
264 152 MT
(40.00) SH
GS
448 128 1488 1148 CR
448 1147 MT
8.00 LW
448 1147 449 1147 DL
FL
449 1147 451 1147 DL
FL
451 1147 453 1146 DL
FL
453 1146 456 1146 DL
FL
456 1146 461 1145 DL
FL
461 1145 466 1144 DL
FL
466 1144 473 1143 DL
FL
473 1143 MT
473 1143 481 1141 DL
FL
481 1141 490 1140 DL
FL
490 1140 502 1138 DL
FL
502 1138 514 1136 DL
FL
514 1136 528 1133 DL
FL
528 1133 544 1130 DL
FL
544 1130 561 1127 DL
FL
561 1127 579 1123 DL
FL
579 1123 600 1119 DL
FL
600 1119 621 1114 DL
FL
621 1114 MT
621 1114 644 1109 DL
FL
644 1109 669 1103 DL
FL
669 1103 695 1096 DL
FL
695 1096 724 1088 DL
FL
724 1088 754 1078 DL
FL
754 1078 787 1067 DL
FL
787 1067 822 1053 DL
FL
822 1053 859 1037 DL
FL
859 1037 900 1018 DL
FL
900 1018 943 997 DL
FL
943 997 MT
943 997 988 972 DL
FL
988 972 1036 945 DL
FL
1036 945 1086 917 DL
FL
1086 917 1135 887 DL
FL
1135 887 1184 857 DL
FL
1184 857 1231 827 DL
FL
1231 827 1276 798 DL
FL
1276 798 1318 771 DL
FL
1318 771 1355 747 DL
FL
1355 747 1388 726 DL
FL
1388 726 MT
1388 726 1415 708 DL
FL
1415 708 1436 694 DL
FL
1436 694 1453 683 DL
FL
1453 683 1466 675 DL
FL
1466 675 1475 669 DL
FL
1475 669 1481 665 DL
FL
1481 665 1484 663 DL
FL
1484 663 1486 661 DL
FL
1486 661 1487 661 DL
FL
448 1147 MT
448 1147 449 1147 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
449 1147 451 1147 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
451 1147 453 1146 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
453 1146 456 1146 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
456 1146 461 1145 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
461 1145 466 1145 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
466 1145 473 1144 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
473 1144 MT
473 1144 481 1142 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
481 1142 490 1141 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
490 1141 502 1138 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
502 1138 514 1134 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
514 1134 528 1129 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
528 1129 544 1122 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
544 1122 561 1112 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
561 1112 579 1100 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
579 1100 600 1086 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
600 1086 621 1068 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
621 1068 MT
621 1068 644 1046 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
644 1046 669 1022 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
669 1022 695 994 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
695 994 724 963 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
724 963 754 929 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
754 929 787 892 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
787 892 822 853 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
822 853 859 812 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
859 812 900 768 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
900 768 943 722 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
943 722 MT
943 722 988 674 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
988 674 1036 624 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1036 624 1086 575 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1086 575 1135 525 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1135 525 1184 477 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1184 477 1231 431 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1231 431 1276 387 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1276 387 1318 347 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1318 347 1355 311 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1355 311 1388 279 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1388 279 MT
1388 279 1415 254 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1415 254 1436 233 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1436 233 1453 217 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1453 217 1466 205 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1466 205 1475 196 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1475 196 1481 190 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1481 190 1484 187 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1484 187 1486 185 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1486 185 1487 184 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
GR
1487 1147 MT
1487 1147 1487 128 DL
FL
448 128 MT
448 128 1487 128 DL
FL
448 1147 MT
448 1147 1487 1147 DL
FL
448 1147 MT
448 1147 448 128 DL
FL
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
showpage
restore

%%Trailer
%%Pages: 1

%%EndDocument
FMENDEPSF
0 0 0 510 380 206.5 160.53 85 568.14 FMBEGINEPSF
%%BeginDocument: /nfs/malaka/users1/wiss/berchtol/final/real70_10NN_page.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: Informix Wingz Version 1.1b
%%CreationDate: Fri Feb 23 11:20:27 1996
%%For: Stefan Berchtold (berchtol)
%%BoundingBox: 0 0 510 380
%%Pages: (atend)
%%EndComments


%%BeginProlog
/AC /arc load def
/AN /arcn load def
/AT /arcto load def
/CL /clip load def
/CN /concat load def
/CP /closepath load def
/CR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP CL NP } bind def
/DL { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y2 LT SP } bind def
/DR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP } bind def
/DS { scrfreq scrang scrproc cvx setscreen } bind def
/EC /eoclip load def
/EF /eofill load def
/FL /fill load def
/GS /gsave load def
/GR /grestore load def
/LT /lineto load def
/LW /setlinewidth load def
/MOF { /uid exch def /sw exch def /nfn exch def /bfn exch def /bfd bfn findfont def /nent bfd maxlength 1 add def bfd
/UniqueID known not { /nent nent 1 add def } if /ofd nent dict def bfd { exch dup /FID ne { exch ofd 3 1 roll put } { pop pop } ifelse } forall
ofd /FontName nfn put ofd /PaintType get 0 eq { ofd /PaintType 2 put } if ofd /StrokeWidth sw put ofd /UniqueID uid put nfn ofd definefont pop } bind def
/MT /moveto load def
/NP /newpath load def
/RE { /nfn exch def /bfn exch def /bfd bfn findfont def /nf bfd maxlength dict def bfd { exch dup /FID ne {dup /Encoding eq {exch dup length array copy
nf 3 1 roll put } {exch nf 3 1 roll put} ifelse } {pop pop} ifelse } forall bfn (Symbol) ne { nf /FontName nfn put vect aload pop vect length 2 idiv {nf /Encoding get 3 1 roll put} repeat }
if nfn nf definefont pop } bind def
/RL /rlineto load def
/RM /rmoveto load def
/RO /rotate load def
/SF { /s exch def /f exch def f findfont [s 0 0 s neg 0 0 ] makefont setfont } bind def
/SG /setgray load def
/SH /show load def
/SL /scale load def
/SK /stroke load def
/SP /strokepath load def
/SC /setrgbcolor load def
/SD { /stl exch def /hud exch def /sz exch def /udof exch def /sof exch def /uw exch def /str exch def /len str stringwidth pop def
currentrgbcolor /blue exch def /green exch def /red exch def 0.333 SG GS sof 0 RM str SH hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW sof udof RM len 0
RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def sof yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if
SK GR } if red green blue SC str stringwidth pop /x exch def /xoff sof x add def /yoff sof neg def xoff neg yoff RM str SH
hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW 0 udof RM len 0 RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof
off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if GR str stringwidth pop sof RM } bind def
/CF { /cliptype exch def /pndex exch def /bgb exch def /bgg exch def /bgr exch def /fgb exch def /fgg exch def /fgr exch def GS 4.000 4.000 SL pathbbox 
/ury exch cvi def /urx exch cvi def /lly exch cvi def /llx exch cvi def /yoff lly 8 mod def /xoff llx 8 mod def /iy lly yoff sub def /ix llx xoff sub def /width urx llx sub 1 add xoff add def
 /height ury lly sub 1 add yoff add def /pdata pats pndex get def /imatrix [1 0 0 1 0 0] def /NullProc {} bind def cliptype cvx exec bgr bgg bgb SC FL fgr fgg fgb SC ix iy TR 0 64
height { /yoff exch def 0 64 width { /xoff exch def GS xoff yoff TR 64 64 true imatrix pdata NullProc imagemask GR } for } for GR } bind def
/ST { /stl exch def /hud exch def /sz exch def /udof exch def /uw exch def /str exch def /len str stringwidth pop def hud 1 eq { GS stl 0 eq { uw LW 0 udof RM len 0 RL } if stl
4 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if str SH } bind def
/TR /translate load def
/vect [ 8#260  /Adieresis 8#265  /Aring 8#276  /Ccedilla 8#300  /Eacute 8#311 /Ntilde 8#314  /Odieresis 8#321  /Udieresis 8#322  /aacute 8#323 /agrave  8#324  /acircumflex 8#325  /adieresis 8#326  /atilde
8#327  /aring 8#330  /ccedilla  8#331  /eacute 8#332  /egrave 8#333  /ecircumflex 8#334  /edieresis 8#335  /iacute  8#336  /igrave 8#337  /icircumflex 8#340  /idieresis 8#342  /ntilde 8#344  /oacute
8#345  /ograve 8#346  /ocircumflex 8#347  /odieresis 8#354  /otilde 8#355  /uacute  8#356  /ugrave 8#357  /ucircumflex 8#360  /udieresis 8#362  /Agrave 8#363  /Atilde  8#364  /Otilde 8#366  /ydieresis
8#367  /Ydieresis 8#374  /Acircumflex  8#375  /Ecircumflex 8#376  /Aacute 8#377  /Edieresis 8#177  /Egrave 8#200  /Iacute  8#201  /Icircumflex 8#202  /Idieresis 8#203  /Igrave 8#204  /Oacute 8#205  /Ocircumflex
8#206  /Ograve 8#207  /Uacute 8#210  /Ucircumflex 8#211  /Ugrave 8#365  /dotlessi ]def
/pats [<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFFDDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777>
<AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555>
<5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF>
<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>
<EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777>
<88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888>
<B1B1B1B1B1B1B1B1303030303030303003030303030303031B1B1B1B1B1B1B1BD8D8D8D8D8D8D8D8C0C0C0C0C0C0C0C00C0C0C0C0C0C0C0C8D8D8D8D8D8D8D8D>
<80808080808080801010101010101010020202020202020220202020202020200101010101010101080808080808080840404040404040400404040404040404>
<FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888>
<FFFFFFFFFFFFFFFF808080808080808080808080808080808080808080808080FFFFFFFFFFFFFFFF080808080808080808080808080808080808080808080808>
<80808080808080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080804040404040404040202020202020202000000000000000000202020202020202040404040404040408080808080808080000000000000000>
<82828282828282824444444444444444393939393939393944444444444444448282828282828282010101010101010101010101010101010101010101010101>
<F8F8F8F8F8F8F8F87474747474747474222222222222222247474747474747478F8F8F8F8F8F8F8F171717171717171722222222222222227171717171717171>
<5555555555555555A0A0A0A0A0A0A0A04040404040404040404040404040404055555555555555550A0A0A0A0A0A0A0A04040404040404040404040404040404>
<20202020202020205050505050505050888888888888888888888888888888888888888888888888888888888888888805050505050505050202020202020202>
<BFBFBFBFBFBFBFBF0000000000000000BFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0>
<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080800000000000000000080808080808080800000000000000008080808080808080000000000000000008080808080808080000000000000000>
<88888888888888880000000000000000222222222222222200000000000000008888888888888888000000000000000022222222222222220000000000000000>
<88888888888888882222222222222222888888888888888822222222222222228888888888888888222222222222222288888888888888882222222222222222>
<AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000>
<11111111111111112222222222222222444444444444444488888888888888881111111111111111222222222222222244444444444444448888888888888888>
<FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000>
<01010101010101010202020202020202040404040404040408080808080808081010101010101010202020202020202040404040404040408080808080808080>
<AAAAAAAAAAAAAAAA0000000000000000808080808080808000000000000000008888888888888888000000000000000080808080808080800000000000000000>
<FFFFFFFFFFFFFFFF8080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080>
<08080808080808081C1C1C1C1C1C1C1C2222222222222222C1C1C1C1C1C1C1C18080808080808080010101010101010102020202020202020404040404040404>
<888888888888888814141414141414142222222222222222414141414141414188888888888888880000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<4040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000004040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000>
<03030303030303038484848484848484484848484848484830303030303030300C0C0C0C0C0C0C0C020202020202020201010101010101010101010101010101>
<8080808080808080808080808080808041414141414141413E3E3E3E3E3E3E3E080808080808080808080808080808081414141414141414E3E3E3E3E3E3E3E3>
<101010101010101020202020202020205454545454545454AAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFF020202020202020204040404040404040808080808080808>
<777777777777777789898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F77777777777777779898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8>
<0000000000000000080808080808080814141414141414142A2A2A2A2A2A2A2A55555555555555552A2A2A2A2A2A2A2A14141414141414140808080808080808> ] def
/BEPSF { /IS save def /dcnt countdictstack def /opcnt count 1 sub def userdict begin /showpage {} def 0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit [] 0 setdash newpath } bind def
/EEPSF { count opcnt sub {pop} repeat countdictstack dcnt sub {end} repeat IS restore } bind def
%%EndProlog

%%Page: 1 1
save
currentscreen /scrproc exch cvlit def /scrang exch def /scrfreq exch def
2 setlinecap
0 380 TR
[1 0 0 -1 0 0] CN
0.250 0.250 SL
1.0 LW
GS
0 0 2041 1521 CR
GS
0 0 2041 1521 CR
GS
0 0 2041 1521 CR
/Helvetica /Helvetica-Wingz RE
/Helvetica-Wingz 48.000 SF
/Helvetica-Wingz 56.000 SF
/Helvetica-Wingz 48.000 SF
1.000 1.000 1.000 SC
0 0 2040 1520 DR
FL
0.000 0.000 0.000 SC
8.00 LW
4 4 2036 1516 DR
SP
FL
1.000 1.000 1.000 SC
1602 627 1984 893 DR
FL
0.000 0.000 0.000 SC
1.00 LW
1602 627 1984 893 DR
SP
FL
/Helvetica-Wingz 56.000 SF
1735 732 MT
(R*-tree) SH
1655 704 MT
8.00 LW
1655 704 1703 704 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
0.000 0.000 0.000 SC
1735 844 MT
(X-tree) SH
1655 816 MT
1655 816 1703 816 DL
FL
1.000 1.000 1.000 SC
56 56 1554 1464 DR
FL
464 128 1478 1148 DR
FL
813 1304 1129 1416 DR
FL
0.000 0.000 0.000 SC
841 1388 MT
(dimension) SH
/Helvetica-Wingz 48.000 SF
536 1148 MT
1.00 LW
536 1148 536 1166 DL
FL
464 1148 MT
464 1148 464 1184 DL
FL
450 1256 MT
(2) SH
681 1148 MT
681 1148 681 1166 DL
FL
609 1148 MT
0.000 0.000 1.000 SC
609 1148 609 128 DL
FL
609 1148 MT
0.000 0.000 0.000 SC
609 1148 609 1184 DL
FL
595 1256 MT
(4) SH
826 1148 MT
826 1148 826 1166 DL
FL
754 1148 MT
0.000 0.000 1.000 SC
754 1148 754 128 DL
FL
754 1148 MT
0.000 0.000 0.000 SC
754 1148 754 1184 DL
FL
740 1256 MT
(6) SH
971 1148 MT
971 1148 971 1166 DL
FL
899 1148 MT
0.000 0.000 1.000 SC
899 1148 899 128 DL
FL
899 1148 MT
0.000 0.000 0.000 SC
899 1148 899 1184 DL
FL
885 1256 MT
(8) SH
1116 1148 MT
1116 1148 1116 1166 DL
FL
1043 1148 MT
0.000 0.000 1.000 SC
1043 1148 1043 128 DL
FL
1043 1148 MT
0.000 0.000 0.000 SC
1043 1148 1043 1184 DL
FL
1015 1256 MT
(10) SH
1261 1148 MT
1261 1148 1261 1166 DL
FL
1188 1148 MT
0.000 0.000 1.000 SC
1188 1148 1188 128 DL
FL
1188 1148 MT
0.000 0.000 0.000 SC
1188 1148 1188 1184 DL
FL
1160 1256 MT
(12) SH
1406 1148 MT
1406 1148 1406 1166 DL
FL
1333 1148 MT
0.000 0.000 1.000 SC
1333 1148 1333 128 DL
FL
1333 1148 MT
0.000 0.000 0.000 SC
1333 1148 1333 1184 DL
FL
1305 1256 MT
(14) SH
1478 1148 MT
1478 1148 1478 1184 DL
FL
1450 1256 MT
(16) SH
/Helvetica-Wingz 56.000 SF
1.000 1.000 1.000 SC
104 410 216 866 DR
FL
0.000 0.000 0.000 SC
GS
188 838 MT
270 RO
(page accesses) SH
GR
/Helvetica-Wingz 48.000 SF
464 1075 MT
464 1075 446 1075 DL
FL
464 1148 MT
464 1148 428 1148 DL
FL
376 1172 MT
(0) SH
464 929 MT
464 929 446 929 DL
FL
464 1002 MT
0.000 0.000 1.000 SC
464 1002 1478 1002 DL
FL
464 1002 MT
0.000 0.000 0.000 SC
464 1002 428 1002 DL
FL
292 1026 MT
(2000) SH
464 784 MT
464 784 446 784 DL
FL
464 857 MT
0.000 0.000 1.000 SC
464 857 1478 857 DL
FL
464 857 MT
0.000 0.000 0.000 SC
464 857 428 857 DL
FL
292 881 MT
(4000) SH
464 638 MT
464 638 446 638 DL
FL
464 711 MT
0.000 0.000 1.000 SC
464 711 1478 711 DL
FL
464 711 MT
0.000 0.000 0.000 SC
464 711 428 711 DL
FL
292 735 MT
(6000) SH
464 492 MT
464 492 446 492 DL
FL
464 565 MT
0.000 0.000 1.000 SC
464 565 1478 565 DL
FL
464 565 MT
0.000 0.000 0.000 SC
464 565 428 565 DL
FL
292 589 MT
(8000) SH
464 347 MT
464 347 446 347 DL
FL
464 419 MT
0.000 0.000 1.000 SC
464 419 1478 419 DL
FL
464 419 MT
0.000 0.000 0.000 SC
464 419 428 419 DL
FL
264 443 MT
(10000) SH
464 201 MT
464 201 446 201 DL
FL
464 274 MT
0.000 0.000 1.000 SC
464 274 1478 274 DL
FL
464 274 MT
0.000 0.000 0.000 SC
464 274 428 274 DL
FL
264 298 MT
(12000) SH
464 128 MT
464 128 428 128 DL
FL
264 152 MT
(14000) SH
GS
464 128 1479 1149 CR
464 1148 MT
8.00 LW
464 1148 465 1148 DL
FL
465 1148 467 1148 DL
FL
467 1148 469 1148 DL
FL
469 1148 472 1148 DL
FL
472 1148 476 1148 DL
FL
476 1148 481 1148 DL
FL
481 1148 488 1148 DL
FL
488 1148 MT
488 1148 496 1148 DL
FL
496 1148 505 1148 DL
FL
505 1148 516 1148 DL
FL
516 1148 529 1148 DL
FL
529 1148 542 1148 DL
FL
542 1148 558 1148 DL
FL
558 1148 574 1148 DL
FL
574 1148 592 1147 DL
FL
592 1147 612 1147 DL
FL
612 1147 633 1147 DL
FL
633 1147 MT
633 1147 655 1147 DL
FL
655 1147 679 1147 DL
FL
679 1147 705 1146 DL
FL
705 1146 733 1145 DL
FL
733 1145 763 1144 DL
FL
763 1144 795 1142 DL
FL
795 1142 829 1139 DL
FL
829 1139 865 1135 DL
FL
865 1135 905 1130 DL
FL
905 1130 947 1124 DL
FL
947 1124 MT
947 1124 992 1117 DL
FL
992 1117 1038 1109 DL
FL
1038 1109 1086 1100 DL
FL
1086 1100 1135 1091 DL
FL
1135 1091 1182 1081 DL
FL
1182 1081 1228 1072 DL
FL
1228 1072 1272 1063 DL
FL
1272 1063 1313 1054 DL
FL
1313 1054 1350 1046 DL
FL
1350 1046 1381 1039 DL
FL
1381 1039 MT
1381 1039 1408 1033 DL
FL
1408 1033 1428 1029 DL
FL
1428 1029 1445 1025 DL
FL
1445 1025 1457 1022 DL
FL
1457 1022 1466 1020 DL
FL
1466 1020 1472 1019 DL
FL
1472 1019 1475 1018 DL
FL
1475 1018 1477 1018 DL
FL
1477 1018 1478 1018 DL
FL
464 1148 MT
464 1148 465 1148 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
465 1148 467 1148 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
467 1148 469 1148 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
469 1148 472 1147 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
472 1147 476 1147 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
476 1147 481 1147 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
481 1147 488 1146 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
488 1146 MT
488 1146 496 1146 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
496 1146 505 1145 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
505 1145 516 1144 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
516 1144 529 1142 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
529 1142 542 1139 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
542 1139 558 1135 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
558 1135 574 1130 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
574 1130 592 1123 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
592 1123 612 1115 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
612 1115 633 1105 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
633 1105 MT
633 1105 655 1093 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
655 1093 679 1078 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
679 1078 705 1061 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
705 1061 733 1041 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
733 1041 763 1019 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
763 1019 795 993 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
795 993 829 963 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
829 963 865 930 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
865 930 905 892 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
905 892 947 851 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
947 851 MT
947 851 992 805 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
992 805 1038 756 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1038 756 1086 705 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1086 705 1135 653 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1135 653 1182 600 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1182 600 1228 549 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1228 549 1272 500 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1272 500 1313 454 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1313 454 1350 413 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1350 413 1381 377 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1381 377 MT
1381 377 1408 347 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1408 347 1428 323 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1428 323 1445 305 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1445 305 1457 291 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1457 291 1466 281 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1466 281 1472 274 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1472 274 1475 270 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1475 270 1477 268 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1477 268 1478 267 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
GR
1478 1148 MT
1478 1148 1478 128 DL
FL
464 128 MT
464 128 1478 128 DL
FL
464 1148 MT
464 1148 1478 1148 DL
FL
464 1148 MT
464 1148 464 128 DL
FL
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
showpage
restore

%%Trailer
%%Pages: 1

%%EndDocument
FMENDEPSF
(b. CPU-Time) 384.86 556.17 T
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 10
%%Page: "11" 11
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 1 0.6 0 0 0 0.4 1]
[ 0 0.2 0.2 0.8 0.2 0 0]
[ 0.5 0 0 0 0.5 1 1]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54.65 770.95 540.65 780.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 96.95 540.65 744.95 R
V
1 10 Q
0 X
0.45 -0.02 (\050for) 54.65 522.29 B
0.45 -0.02 (D=16\051. The speed-up slightly increases with the data-) 72.04 522.29 B
-0.89 -0.02 (base size from about 100 for 20) 54.65 511.11 B
-0.89 -0.02 (MBytes to about 270 for 100) 177.81 511.11 B
1.87 -0.02 (MBytes. Also, as expected, the total search time of the) 54.65 499.93 B
0.3 -0.02 (X) 54.65 488.75 B
0.3 -0.02 (-) 61.85 488.75 B
0.3 -0.02 (tree grows logarithmically with the database size which) 65.16 488.75 B
-0.36 -0.02 (means that the X-) 54.65 477.57 B
-0.36 -0.02 (tree scales well to very large database siz-) 124.05 477.57 B
-0.5 -0.02 (es.) 54.65 466.39 B
-0.47 -0.02 (We also performed a comparison of the X-) 72.65 448.39 B
-0.47 -0.02 (tree with the) 239.87 448.39 B
1.09 -0.02 (TV-) 54.65 437.21 B
1.09 -0.02 (tree and the R*-) 71.25 437.21 B
1.09 -0.02 (tree. With the implementation of the) 138.36 437.21 B
-0.23 -0.02 (TV-) 54.65 426.04 B
-0.23 -0.02 (tree made available to us by the authors of the TV-) 71.25 426.04 B
-0.23 -0.02 (tree,) 271.26 426.04 B
-0.24 -0.02 (we only managed to insert up to 25.000 data items which is) 54.65 414.86 B
0.96 -0.02 (slightly higher than the number of data items used in the) 54.65 403.68 B
2.4 -0.02 (original paper [LJF) 54.65 392.5 B
2.4 -0.02 (94]. For the comparisons, we were) 138.75 392.5 B
-0.05 -0.02 (therefore not able to use our large databases. The results of) 54.65 381.32 B
-0.92 -0.02 (our comparisons are presented in) 54.65 370.14 B
-0.93 (Figure 16) 184.08 370.14 P
-0.92 -0.02 (. The speed-up of) 221.76 370.14 B
0.05 -0.02 (the X-) 54.65 358.96 B
0.05 -0.02 (tree over the TV-) 79.85 358.96 B
0.05 -0.02 (tree ranges between 4 and 12, even) 148.8 358.96 B
-0.83 -0.02 (for the rather small databases. It is interesting to note that the) 54.65 347.79 B
-0.68 -0.02 (performance of the R*-) 306.65 522.29 B
-0.68 -0.02 (tree is better than the performance of) 397.75 522.29 B
-0.5 -0.02 (the TV-) 306.65 511.22 B
-0.5 -0.02 (tree for D smaller than 16.) 337.39 511.22 B
0.6 -0.02 (In addition to using point data, we also examined the) 324.65 493.22 B
-0.62 -0.02 (performance of the X-) 306.65 482.15 B
-0.62 -0.02 (tree for extended data objects in high-) 393.51 482.15 B
2.79 -0.02 (dimensional space. The results of our experiments are) 306.65 471.09 B
-0.18 -0.02 (shown in) 306.65 460.02 B
-0.18 (Figure 15) 344.99 460.02 P
-0.18 -0.02 (. Since the extended spatial data objects) 383.42 460.02 B
0.22 -0.02 (induce some overlap in the X-) 306.65 448.95 B
0.22 -0.02 (tree as well, the speed-up of) 427.96 448.95 B
-0.65 -0.02 (the X-) 306.65 437.89 B
-0.65 -0.02 (tree over the R*-) 331.14 437.89 B
-0.65 -0.02 (tree is lower than for point data. Still,) 396.33 437.89 B
-0.5 -0.02 (we achieve a speed-up factor of about 8 for D=16.) 306.65 426.82 B
0 12 Q
(5.) 306.65 396.49 T
(Conclusions) 324.65 396.49 T
1 10 Q
0.66 -0.02 (In this paper, we propose a new indexing method for) 324.65 372.82 B
-0.68 -0.02 (high-dimensional data. We investigate the effects that occur) 306.65 361.75 B
-0.32 -0.02 (in high dimensions and show that R-) 306.65 350.69 B
-0.32 -0.02 (tree-based index struc-) 450.67 350.69 B
1.88 -0.02 (tures do not behave well for indexing high-dimensional) 306.65 339.62 B
2.16 -0.02 (spaces. We introduce formal definitions of overlap and) 306.65 328.55 B
0.58 -0.02 (show the correlation between overlap in the directory and) 306.65 317.49 B
1.85 -0.02 (poor query performance. We then propose a new index) 306.65 306.42 B
-0.42 -0.02 (structure, the X-) 306.65 295.35 B
-0.42 -0.02 (tree, which uses - in addition to the concept) 370.74 295.35 B
0.33 -0.02 (of supernodes - a new split algorithm minimizing overlap.) 306.65 284.29 B
-0.66 -0.02 (Supernodes are directory nodes which) 306.65 273.22 B
-0.65 -0.05 (are extended over the) 457.85 273.22 B
-0.86 -0.05 (usual block size in order to avoid a degeneration of the index.) 306.65 262.15 B
0.99 -0.02 (We carry out an extensive performance evaluation of the) 306.65 251.09 B
1.34 -0.02 (X-) 306.65 240.02 B
1.34 -0.02 (tree and compare the X-) 317.16 240.02 B
1.34 -0.02 (tree with the TV-) 418.71 240.02 B
1.34 -0.02 (tree and the) 491.55 240.02 B
0.54 -0.02 (R*-) 306.65 228.95 B
0.54 -0.02 (tree using up to 100 MBytes of point and spatial data.) 321.59 228.95 B
2.59 -0.02 (The experiments show that the X-) 306.65 217.89 B
2.59 -0.02 (tree outperforms the) 454.77 217.89 B
-0.92 -0.02 (TV-) 306.65 206.82 B
-0.92 -0.02 (tree and R*-) 323.25 206.82 B
-0.92 -0.02 (tree up to orders of magnitude for point que-) 370.6 206.82 B
-0.25 -0.02 (ries and nearest neighbor queries on both synthetic and real) 306.65 195.75 B
-0.5 -0.02 (data.) 306.65 184.68 B
-0.54 -0.02 (Since for very high dimensionality the supernodes may) 324.65 166.68 B
-0.71 -0.02 (become rather large, we currently work on a parallel version) 306.65 155.62 B
0.69 -0.02 (of the X-) 306.65 144.55 B
0.69 -0.02 (tree which is expected to provide a good perfor-) 343.94 144.55 B
-0.09 -0.02 (mance even for larger data sets and the more time consum-) 306.65 133.49 B
2.34 -0.02 (ing nearest neighbor queries. We also develop a novel) 306.65 122.42 B
-0.89 -0.02 (nearest neighbor algorithm for high-dimensional data which) 306.65 111.35 B
-0.5 -0.02 (is adapted to the X-) 306.65 100.29 B
-0.5 -0.02 (tree.) 382.58 100.29 B
54.65 96.95 288.65 744.95 C
57.71 96.95 285.59 344.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 338 322 221.63 191.6 61.95 134.42 FMBEGINEPSF
%%BeginDocument: /nfs/malaka/users1/wiss/berchtol/final/spatial_search.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: Informix Wingz Version 1.1b
%%CreationDate: Fri Feb 23 11:29:43 1996
%%For: Stefan Berchtold (berchtol)
%%BoundingBox: 0 0 338 322
%%Pages: (atend)
%%EndComments


%%BeginProlog
/AC /arc load def
/AN /arcn load def
/AT /arcto load def
/CL /clip load def
/CN /concat load def
/CP /closepath load def
/CR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP CL NP } bind def
/DL { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y2 LT SP } bind def
/DR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP } bind def
/DS { scrfreq scrang scrproc cvx setscreen } bind def
/EC /eoclip load def
/EF /eofill load def
/FL /fill load def
/GS /gsave load def
/GR /grestore load def
/LT /lineto load def
/LW /setlinewidth load def
/MOF { /uid exch def /sw exch def /nfn exch def /bfn exch def /bfd bfn findfont def /nent bfd maxlength 1 add def bfd
/UniqueID known not { /nent nent 1 add def } if /ofd nent dict def bfd { exch dup /FID ne { exch ofd 3 1 roll put } { pop pop } ifelse } forall
ofd /FontName nfn put ofd /PaintType get 0 eq { ofd /PaintType 2 put } if ofd /StrokeWidth sw put ofd /UniqueID uid put nfn ofd definefont pop } bind def
/MT /moveto load def
/NP /newpath load def
/RE { /nfn exch def /bfn exch def /bfd bfn findfont def /nf bfd maxlength dict def bfd { exch dup /FID ne {dup /Encoding eq {exch dup length array copy
nf 3 1 roll put } {exch nf 3 1 roll put} ifelse } {pop pop} ifelse } forall bfn (Symbol) ne { nf /FontName nfn put vect aload pop vect length 2 idiv {nf /Encoding get 3 1 roll put} repeat }
if nfn nf definefont pop } bind def
/RL /rlineto load def
/RM /rmoveto load def
/RO /rotate load def
/SF { /s exch def /f exch def f findfont [s 0 0 s neg 0 0 ] makefont setfont } bind def
/SG /setgray load def
/SH /show load def
/SL /scale load def
/SK /stroke load def
/SP /strokepath load def
/SC /setrgbcolor load def
/SD { /stl exch def /hud exch def /sz exch def /udof exch def /sof exch def /uw exch def /str exch def /len str stringwidth pop def
currentrgbcolor /blue exch def /green exch def /red exch def 0.333 SG GS sof 0 RM str SH hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW sof udof RM len 0
RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def sof yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if
SK GR } if red green blue SC str stringwidth pop /x exch def /xoff sof x add def /yoff sof neg def xoff neg yoff RM str SH
hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW 0 udof RM len 0 RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof
off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if GR str stringwidth pop sof RM } bind def
/CF { /cliptype exch def /pndex exch def /bgb exch def /bgg exch def /bgr exch def /fgb exch def /fgg exch def /fgr exch def GS 4.000 4.000 SL pathbbox 
/ury exch cvi def /urx exch cvi def /lly exch cvi def /llx exch cvi def /yoff lly 8 mod def /xoff llx 8 mod def /iy lly yoff sub def /ix llx xoff sub def /width urx llx sub 1 add xoff add def
 /height ury lly sub 1 add yoff add def /pdata pats pndex get def /imatrix [1 0 0 1 0 0] def /NullProc {} bind def cliptype cvx exec bgr bgg bgb SC FL fgr fgg fgb SC ix iy TR 0 64
height { /yoff exch def 0 64 width { /xoff exch def GS xoff yoff TR 64 64 true imatrix pdata NullProc imagemask GR } for } for GR } bind def
/ST { /stl exch def /hud exch def /sz exch def /udof exch def /uw exch def /str exch def /len str stringwidth pop def hud 1 eq { GS stl 0 eq { uw LW 0 udof RM len 0 RL } if stl
4 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if str SH } bind def
/TR /translate load def
/vect [ 8#260  /Adieresis 8#265  /Aring 8#276  /Ccedilla 8#300  /Eacute 8#311 /Ntilde 8#314  /Odieresis 8#321  /Udieresis 8#322  /aacute 8#323 /agrave  8#324  /acircumflex 8#325  /adieresis 8#326  /atilde
8#327  /aring 8#330  /ccedilla  8#331  /eacute 8#332  /egrave 8#333  /ecircumflex 8#334  /edieresis 8#335  /iacute  8#336  /igrave 8#337  /icircumflex 8#340  /idieresis 8#342  /ntilde 8#344  /oacute
8#345  /ograve 8#346  /ocircumflex 8#347  /odieresis 8#354  /otilde 8#355  /uacute  8#356  /ugrave 8#357  /ucircumflex 8#360  /udieresis 8#362  /Agrave 8#363  /Atilde  8#364  /Otilde 8#366  /ydieresis
8#367  /Ydieresis 8#374  /Acircumflex  8#375  /Ecircumflex 8#376  /Aacute 8#377  /Edieresis 8#177  /Egrave 8#200  /Iacute  8#201  /Icircumflex 8#202  /Idieresis 8#203  /Igrave 8#204  /Oacute 8#205  /Ocircumflex
8#206  /Ograve 8#207  /Uacute 8#210  /Ucircumflex 8#211  /Ugrave 8#365  /dotlessi ]def
/pats [<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFFDDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777>
<AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555>
<5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF>
<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>
<EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777>
<88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888>
<B1B1B1B1B1B1B1B1303030303030303003030303030303031B1B1B1B1B1B1B1BD8D8D8D8D8D8D8D8C0C0C0C0C0C0C0C00C0C0C0C0C0C0C0C8D8D8D8D8D8D8D8D>
<80808080808080801010101010101010020202020202020220202020202020200101010101010101080808080808080840404040404040400404040404040404>
<FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888>
<FFFFFFFFFFFFFFFF808080808080808080808080808080808080808080808080FFFFFFFFFFFFFFFF080808080808080808080808080808080808080808080808>
<80808080808080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080804040404040404040202020202020202000000000000000000202020202020202040404040404040408080808080808080000000000000000>
<82828282828282824444444444444444393939393939393944444444444444448282828282828282010101010101010101010101010101010101010101010101>
<F8F8F8F8F8F8F8F87474747474747474222222222222222247474747474747478F8F8F8F8F8F8F8F171717171717171722222222222222227171717171717171>
<5555555555555555A0A0A0A0A0A0A0A04040404040404040404040404040404055555555555555550A0A0A0A0A0A0A0A04040404040404040404040404040404>
<20202020202020205050505050505050888888888888888888888888888888888888888888888888888888888888888805050505050505050202020202020202>
<BFBFBFBFBFBFBFBF0000000000000000BFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0>
<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080800000000000000000080808080808080800000000000000008080808080808080000000000000000008080808080808080000000000000000>
<88888888888888880000000000000000222222222222222200000000000000008888888888888888000000000000000022222222222222220000000000000000>
<88888888888888882222222222222222888888888888888822222222222222228888888888888888222222222222222288888888888888882222222222222222>
<AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000>
<11111111111111112222222222222222444444444444444488888888888888881111111111111111222222222222222244444444444444448888888888888888>
<FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000>
<01010101010101010202020202020202040404040404040408080808080808081010101010101010202020202020202040404040404040408080808080808080>
<AAAAAAAAAAAAAAAA0000000000000000808080808080808000000000000000008888888888888888000000000000000080808080808080800000000000000000>
<FFFFFFFFFFFFFFFF8080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080>
<08080808080808081C1C1C1C1C1C1C1C2222222222222222C1C1C1C1C1C1C1C18080808080808080010101010101010102020202020202020404040404040404>
<888888888888888814141414141414142222222222222222414141414141414188888888888888880000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<4040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000004040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000>
<03030303030303038484848484848484484848484848484830303030303030300C0C0C0C0C0C0C0C020202020202020201010101010101010101010101010101>
<8080808080808080808080808080808041414141414141413E3E3E3E3E3E3E3E080808080808080808080808080808081414141414141414E3E3E3E3E3E3E3E3>
<101010101010101020202020202020205454545454545454AAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFF020202020202020204040404040404040808080808080808>
<777777777777777789898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F77777777777777779898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8>
<0000000000000000080808080808080814141414141414142A2A2A2A2A2A2A2A55555555555555552A2A2A2A2A2A2A2A14141414141414140808080808080808> ] def
/BEPSF { /IS save def /dcnt countdictstack def /opcnt count 1 sub def userdict begin /showpage {} def 0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit [] 0 setdash newpath } bind def
/EEPSF { count opcnt sub {pop} repeat countdictstack dcnt sub {end} repeat IS restore } bind def
%%EndProlog

%%Page: 1 1
save
currentscreen /scrproc exch cvlit def /scrang exch def /scrfreq exch def
2 setlinecap
0 322 TR
[1 0 0 -1 0 0] CN
0.250 0.250 SL
1.0 LW
GS
0 0 1355 1289 CR
GS
0 0 1355 1289 CR
GS
0 0 1355 1289 CR
/Helvetica /Helvetica-Wingz RE
/Helvetica-Wingz 48.000 SF
/Helvetica-Wingz 56.000 SF
/Helvetica-Wingz 48.000 SF
1.000 1.000 1.000 SC
0 0 1354 1288 DR
FL
0.000 0.000 0.000 SC
8.00 LW
4 4 1350 1284 DR
SP
FL
1.000 1.000 1.000 SC
56 56 1298 1232 DR
FL
420 128 1222 916 DR
FL
/Helvetica-Wingz 56.000 SF
663 1072 979 1184 DR
FL
0.000 0.000 0.000 SC
691 1156 MT
(dimension) SH
/Helvetica-Wingz 48.000 SF
477 916 MT
1.00 LW
477 916 477 934 DL
FL
420 916 MT
420 916 420 952 DL
FL
406 1024 MT
(2) SH
592 916 MT
592 916 592 934 DL
FL
535 916 MT
0.000 0.000 1.000 SC
535 916 535 128 DL
FL
535 916 MT
0.000 0.000 0.000 SC
535 916 535 952 DL
FL
521 1024 MT
(4) SH
706 916 MT
706 916 706 934 DL
FL
649 916 MT
0.000 0.000 1.000 SC
649 916 649 128 DL
FL
649 916 MT
0.000 0.000 0.000 SC
649 916 649 952 DL
FL
635 1024 MT
(6) SH
821 916 MT
821 916 821 934 DL
FL
764 916 MT
0.000 0.000 1.000 SC
764 916 764 128 DL
FL
764 916 MT
0.000 0.000 0.000 SC
764 916 764 952 DL
FL
750 1024 MT
(8) SH
936 916 MT
936 916 936 934 DL
FL
878 916 MT
0.000 0.000 1.000 SC
878 916 878 128 DL
FL
878 916 MT
0.000 0.000 0.000 SC
878 916 878 952 DL
FL
850 1024 MT
(10) SH
1050 916 MT
1050 916 1050 934 DL
FL
993 916 MT
0.000 0.000 1.000 SC
993 916 993 128 DL
FL
993 916 MT
0.000 0.000 0.000 SC
993 916 993 952 DL
FL
965 1024 MT
(12) SH
1165 916 MT
1165 916 1165 934 DL
FL
1107 916 MT
0.000 0.000 1.000 SC
1107 916 1107 128 DL
FL
1107 916 MT
0.000 0.000 0.000 SC
1107 916 1107 952 DL
FL
1079 1024 MT
(14) SH
1222 916 MT
1222 916 1222 952 DL
FL
1194 1024 MT
(16) SH
/Helvetica-Wingz 56.000 SF
1.000 1.000 1.000 SC
104 266 216 778 DR
FL
0.000 0.000 0.000 SC
GS
188 750 MT
270 RO
(Speed-Up Factor) SH
GR
/Helvetica-Wingz 48.000 SF
420 867 MT
420 867 402 867 DL
FL
420 916 MT
420 916 384 916 DL
FL
264 940 MT
(0.00) SH
420 768 MT
420 768 402 768 DL
FL
420 817 MT
0.000 0.000 1.000 SC
420 817 1222 817 DL
FL
420 817 MT
0.000 0.000 0.000 SC
420 817 384 817 DL
FL
264 841 MT
(1.00) SH
420 670 MT
420 670 402 670 DL
FL
420 719 MT
0.000 0.000 1.000 SC
420 719 1222 719 DL
FL
420 719 MT
0.000 0.000 0.000 SC
420 719 384 719 DL
FL
264 743 MT
(2.00) SH
420 571 MT
420 571 402 571 DL
FL
420 620 MT
0.000 0.000 1.000 SC
420 620 1222 620 DL
FL
420 620 MT
0.000 0.000 0.000 SC
420 620 384 620 DL
FL
264 644 MT
(3.00) SH
420 473 MT
420 473 402 473 DL
FL
420 522 MT
0.000 0.000 1.000 SC
420 522 1222 522 DL
FL
420 522 MT
0.000 0.000 0.000 SC
420 522 384 522 DL
FL
264 546 MT
(4.00) SH
420 374 MT
420 374 402 374 DL
FL
420 423 MT
0.000 0.000 1.000 SC
420 423 1222 423 DL
FL
420 423 MT
0.000 0.000 0.000 SC
420 423 384 423 DL
FL
264 447 MT
(5.00) SH
420 276 MT
420 276 402 276 DL
FL
420 325 MT
0.000 0.000 1.000 SC
420 325 1222 325 DL
FL
420 325 MT
0.000 0.000 0.000 SC
420 325 384 325 DL
FL
264 349 MT
(6.00) SH
420 177 MT
420 177 402 177 DL
FL
420 226 MT
0.000 0.000 1.000 SC
420 226 1222 226 DL
FL
420 226 MT
0.000 0.000 0.000 SC
420 226 384 226 DL
FL
264 250 MT
(7.00) SH
420 128 MT
420 128 384 128 DL
FL
264 152 MT
(8.00) SH
GS
420 128 1223 917 CR
420 817 MT
1.000 0.000 0.000 SC
8.00 LW
420 817 421 817 DL
FL
421 817 422 817 DL
FL
422 817 424 817 DL
FL
424 817 426 817 DL
FL
426 817 430 817 DL
FL
430 817 434 816 DL
FL
434 816 439 816 DL
FL
439 816 MT
439 816 445 815 DL
FL
445 815 453 815 DL
FL
453 815 461 814 DL
FL
461 814 471 813 DL
FL
471 813 482 812 DL
FL
482 812 494 812 DL
FL
494 812 507 811 DL
FL
507 811 522 810 DL
FL
522 810 537 809 DL
FL
537 809 554 808 DL
FL
554 808 MT
554 808 571 807 DL
FL
571 807 590 805 DL
FL
590 805 611 802 DL
FL
611 802 633 797 DL
FL
633 797 656 790 DL
FL
656 790 681 779 DL
FL
681 779 709 765 DL
FL
709 765 738 747 DL
FL
738 747 769 723 DL
FL
769 723 802 694 DL
FL
802 694 MT
802 694 837 659 DL
FL
837 659 874 619 DL
FL
874 619 912 575 DL
FL
912 575 950 529 DL
FL
950 529 988 481 DL
FL
988 481 1025 434 DL
FL
1025 434 1059 388 DL
FL
1059 388 1091 344 DL
FL
1091 344 1120 304 DL
FL
1120 304 1146 270 DL
FL
1146 270 MT
1146 270 1166 241 DL
FL
1166 241 1183 218 DL
FL
1183 218 1196 200 DL
FL
1196 200 1205 187 DL
FL
1205 187 1212 177 DL
FL
1212 177 1217 171 DL
FL
1217 171 1220 167 DL
FL
1220 167 1221 165 DL
FL
1221 165 1222 164 DL
FL
GR
1222 916 MT
1222 916 1222 128 DL
FL
420 128 MT
420 128 1222 128 DL
FL
420 916 MT
420 916 1222 916 DL
FL
420 916 MT
420 916 420 128 DL
FL
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
showpage
restore

%%Trailer
%%Pages: 1

%%EndDocument
FMENDEPSF
71.44 102.97 265.36 127.79 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
-0.82 (Figure 15: Speed-Up of X-) 71.44 115.75 P
-0.82 (tree over R*-) 180.36 115.75 P
-0.82 (tree) 234.8 115.75 P
-0.82 (on) 253.13 115.75 P
(Real Extended Spatial Data) 109.37 103.75 T
54.65 96.95 288.65 744.95 C
-8.35 24.95 603.65 816.95 C
54.65 96.95 288.65 744.95 C
54.65 528.95 288.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 598 431 225.44 162.96 59.73 580.07 FMBEGINEPSF
%%BeginDocument: /nfs/malaka/users1/wiss/berchtol/final/db_size_pq.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: Informix Wingz Version 1.1b
%%CreationDate: Fri Feb 23 11:26:33 1996
%%For: Stefan Berchtold (berchtol)
%%BoundingBox: 0 0 598 431
%%Pages: (atend)
%%EndComments


%%BeginProlog
/AC /arc load def
/AN /arcn load def
/AT /arcto load def
/CL /clip load def
/CN /concat load def
/CP /closepath load def
/CR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP CL NP } bind def
/DL { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y2 LT SP } bind def
/DR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP } bind def
/DS { scrfreq scrang scrproc cvx setscreen } bind def
/EC /eoclip load def
/EF /eofill load def
/FL /fill load def
/GS /gsave load def
/GR /grestore load def
/LT /lineto load def
/LW /setlinewidth load def
/MOF { /uid exch def /sw exch def /nfn exch def /bfn exch def /bfd bfn findfont def /nent bfd maxlength 1 add def bfd
/UniqueID known not { /nent nent 1 add def } if /ofd nent dict def bfd { exch dup /FID ne { exch ofd 3 1 roll put } { pop pop } ifelse } forall
ofd /FontName nfn put ofd /PaintType get 0 eq { ofd /PaintType 2 put } if ofd /StrokeWidth sw put ofd /UniqueID uid put nfn ofd definefont pop } bind def
/MT /moveto load def
/NP /newpath load def
/RE { /nfn exch def /bfn exch def /bfd bfn findfont def /nf bfd maxlength dict def bfd { exch dup /FID ne {dup /Encoding eq {exch dup length array copy
nf 3 1 roll put } {exch nf 3 1 roll put} ifelse } {pop pop} ifelse } forall bfn (Symbol) ne { nf /FontName nfn put vect aload pop vect length 2 idiv {nf /Encoding get 3 1 roll put} repeat }
if nfn nf definefont pop } bind def
/RL /rlineto load def
/RM /rmoveto load def
/RO /rotate load def
/SF { /s exch def /f exch def f findfont [s 0 0 s neg 0 0 ] makefont setfont } bind def
/SG /setgray load def
/SH /show load def
/SL /scale load def
/SK /stroke load def
/SP /strokepath load def
/SC /setrgbcolor load def
/SD { /stl exch def /hud exch def /sz exch def /udof exch def /sof exch def /uw exch def /str exch def /len str stringwidth pop def
currentrgbcolor /blue exch def /green exch def /red exch def 0.333 SG GS sof 0 RM str SH hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW sof udof RM len 0
RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def sof yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if
SK GR } if red green blue SC str stringwidth pop /x exch def /xoff sof x add def /yoff sof neg def xoff neg yoff RM str SH
hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW 0 udof RM len 0 RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof
off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if GR str stringwidth pop sof RM } bind def
/CF { /cliptype exch def /pndex exch def /bgb exch def /bgg exch def /bgr exch def /fgb exch def /fgg exch def /fgr exch def GS 4.000 4.000 SL pathbbox 
/ury exch cvi def /urx exch cvi def /lly exch cvi def /llx exch cvi def /yoff lly 8 mod def /xoff llx 8 mod def /iy lly yoff sub def /ix llx xoff sub def /width urx llx sub 1 add xoff add def
 /height ury lly sub 1 add yoff add def /pdata pats pndex get def /imatrix [1 0 0 1 0 0] def /NullProc {} bind def cliptype cvx exec bgr bgg bgb SC FL fgr fgg fgb SC ix iy TR 0 64
height { /yoff exch def 0 64 width { /xoff exch def GS xoff yoff TR 64 64 true imatrix pdata NullProc imagemask GR } for } for GR } bind def
/ST { /stl exch def /hud exch def /sz exch def /udof exch def /uw exch def /str exch def /len str stringwidth pop def hud 1 eq { GS stl 0 eq { uw LW 0 udof RM len 0 RL } if stl
4 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if str SH } bind def
/TR /translate load def
/vect [ 8#260  /Adieresis 8#265  /Aring 8#276  /Ccedilla 8#300  /Eacute 8#311 /Ntilde 8#314  /Odieresis 8#321  /Udieresis 8#322  /aacute 8#323 /agrave  8#324  /acircumflex 8#325  /adieresis 8#326  /atilde
8#327  /aring 8#330  /ccedilla  8#331  /eacute 8#332  /egrave 8#333  /ecircumflex 8#334  /edieresis 8#335  /iacute  8#336  /igrave 8#337  /icircumflex 8#340  /idieresis 8#342  /ntilde 8#344  /oacute
8#345  /ograve 8#346  /ocircumflex 8#347  /odieresis 8#354  /otilde 8#355  /uacute  8#356  /ugrave 8#357  /ucircumflex 8#360  /udieresis 8#362  /Agrave 8#363  /Atilde  8#364  /Otilde 8#366  /ydieresis
8#367  /Ydieresis 8#374  /Acircumflex  8#375  /Ecircumflex 8#376  /Aacute 8#377  /Edieresis 8#177  /Egrave 8#200  /Iacute  8#201  /Icircumflex 8#202  /Idieresis 8#203  /Igrave 8#204  /Oacute 8#205  /Ocircumflex
8#206  /Ograve 8#207  /Uacute 8#210  /Ucircumflex 8#211  /Ugrave 8#365  /dotlessi ]def
/pats [<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFFDDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777>
<AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555>
<5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF>
<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>
<EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777>
<88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888>
<B1B1B1B1B1B1B1B1303030303030303003030303030303031B1B1B1B1B1B1B1BD8D8D8D8D8D8D8D8C0C0C0C0C0C0C0C00C0C0C0C0C0C0C0C8D8D8D8D8D8D8D8D>
<80808080808080801010101010101010020202020202020220202020202020200101010101010101080808080808080840404040404040400404040404040404>
<FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888>
<FFFFFFFFFFFFFFFF808080808080808080808080808080808080808080808080FFFFFFFFFFFFFFFF080808080808080808080808080808080808080808080808>
<80808080808080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080804040404040404040202020202020202000000000000000000202020202020202040404040404040408080808080808080000000000000000>
<82828282828282824444444444444444393939393939393944444444444444448282828282828282010101010101010101010101010101010101010101010101>
<F8F8F8F8F8F8F8F87474747474747474222222222222222247474747474747478F8F8F8F8F8F8F8F171717171717171722222222222222227171717171717171>
<5555555555555555A0A0A0A0A0A0A0A04040404040404040404040404040404055555555555555550A0A0A0A0A0A0A0A04040404040404040404040404040404>
<20202020202020205050505050505050888888888888888888888888888888888888888888888888888888888888888805050505050505050202020202020202>
<BFBFBFBFBFBFBFBF0000000000000000BFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0>
<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080800000000000000000080808080808080800000000000000008080808080808080000000000000000008080808080808080000000000000000>
<88888888888888880000000000000000222222222222222200000000000000008888888888888888000000000000000022222222222222220000000000000000>
<88888888888888882222222222222222888888888888888822222222222222228888888888888888222222222222222288888888888888882222222222222222>
<AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000>
<11111111111111112222222222222222444444444444444488888888888888881111111111111111222222222222222244444444444444448888888888888888>
<FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000>
<01010101010101010202020202020202040404040404040408080808080808081010101010101010202020202020202040404040404040408080808080808080>
<AAAAAAAAAAAAAAAA0000000000000000808080808080808000000000000000008888888888888888000000000000000080808080808080800000000000000000>
<FFFFFFFFFFFFFFFF8080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080>
<08080808080808081C1C1C1C1C1C1C1C2222222222222222C1C1C1C1C1C1C1C18080808080808080010101010101010102020202020202020404040404040404>
<888888888888888814141414141414142222222222222222414141414141414188888888888888880000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<4040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000004040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000>
<03030303030303038484848484848484484848484848484830303030303030300C0C0C0C0C0C0C0C020202020202020201010101010101010101010101010101>
<8080808080808080808080808080808041414141414141413E3E3E3E3E3E3E3E080808080808080808080808080808081414141414141414E3E3E3E3E3E3E3E3>
<101010101010101020202020202020205454545454545454AAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFF020202020202020204040404040404040808080808080808>
<777777777777777789898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F77777777777777779898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8>
<0000000000000000080808080808080814141414141414142A2A2A2A2A2A2A2A55555555555555552A2A2A2A2A2A2A2A14141414141414140808080808080808> ] def
/BEPSF { /IS save def /dcnt countdictstack def /opcnt count 1 sub def userdict begin /showpage {} def 0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit [] 0 setdash newpath } bind def
/EEPSF { count opcnt sub {pop} repeat countdictstack dcnt sub {end} repeat IS restore } bind def
%%EndProlog

%%Page: 1 1
save
currentscreen /scrproc exch cvlit def /scrang exch def /scrfreq exch def
2 setlinecap
0 431 TR
[1 0 0 -1 0 0] CN
0.250 0.250 SL
1.0 LW
GS
0 0 2395 1725 CR
GS
0 0 2395 1725 CR
GS
0 0 2395 1725 CR
/Helvetica /Helvetica-Wingz RE
/Helvetica-Wingz 48.000 SF
/Helvetica-Wingz 56.000 SF
/Helvetica-Wingz 48.000 SF
1.000 1.000 1.000 SC
0 0 2394 1724 DR
FL
0.000 0.000 0.000 SC
8.00 LW
4 4 2390 1720 DR
SP
FL
1.000 1.000 1.000 SC
1956 729 2338 995 DR
FL
0.000 0.000 0.000 SC
1.00 LW
1956 729 2338 995 DR
SP
FL
/Helvetica-Wingz 56.000 SF
2089 834 MT
(R*-tree) SH
2009 806 MT
0.498 0.498 0.498 SC
8.00 LW
2009 806 2057 806 DL
FL
0.000 0.000 0.000 SC
2089 946 MT
(X-tree) SH
2009 918 MT
2009 918 2057 918 DL
FL
1.000 1.000 1.000 SC
56 56 1908 1668 DR
FL
476 128 1784 1352 DR
FL
778 1508 1482 1620 DR
FL
0.000 0.000 0.000 SC
806 1592 MT
(Amount of Data \050MBytes\051) SH
/Helvetica-Wingz 48.000 SF
528 1352 MT
1.00 LW
528 1352 528 1370 DL
FL
581 1352 MT
581 1352 581 1370 DL
FL
633 1352 MT
633 1352 633 1370 DL
FL
685 1352 MT
685 1352 685 1370 DL
FL
476 1352 MT
476 1352 476 1388 DL
FL
428 1460 MT
(0.00) SH
790 1352 MT
790 1352 790 1370 DL
FL
842 1352 MT
842 1352 842 1370 DL
FL
895 1352 MT
895 1352 895 1370 DL
FL
947 1352 MT
947 1352 947 1370 DL
FL
738 1352 MT
0.000 0.000 1.000 SC
738 1352 738 128 DL
FL
738 1352 MT
0.000 0.000 0.000 SC
738 1352 738 1388 DL
FL
676 1460 MT
(20.00) SH
1052 1352 MT
1052 1352 1052 1370 DL
FL
1104 1352 MT
1104 1352 1104 1370 DL
FL
1156 1352 MT
1156 1352 1156 1370 DL
FL
1208 1352 MT
1208 1352 1208 1370 DL
FL
999 1352 MT
0.000 0.000 1.000 SC
999 1352 999 128 DL
FL
999 1352 MT
0.000 0.000 0.000 SC
999 1352 999 1388 DL
FL
937 1460 MT
(40.00) SH
1313 1352 MT
1313 1352 1313 1370 DL
FL
1365 1352 MT
1365 1352 1365 1370 DL
FL
1418 1352 MT
1418 1352 1418 1370 DL
FL
1470 1352 MT
1470 1352 1470 1370 DL
FL
1261 1352 MT
0.000 0.000 1.000 SC
1261 1352 1261 128 DL
FL
1261 1352 MT
0.000 0.000 0.000 SC
1261 1352 1261 1388 DL
FL
1199 1460 MT
(60.00) SH
1575 1352 MT
1575 1352 1575 1370 DL
FL
1627 1352 MT
1627 1352 1627 1370 DL
FL
1679 1352 MT
1679 1352 1679 1370 DL
FL
1732 1352 MT
1732 1352 1732 1370 DL
FL
1522 1352 MT
0.000 0.000 1.000 SC
1522 1352 1522 128 DL
FL
1522 1352 MT
0.000 0.000 0.000 SC
1522 1352 1522 1388 DL
FL
1460 1460 MT
(80.00) SH
1784 1352 MT
1784 1352 1784 1388 DL
FL
1708 1460 MT
(100.00) SH
/Helvetica-Wingz 56.000 SF
1.000 1.000 1.000 SC
104 428 216 1052 DR
FL
0.000 0.000 0.000 SC
GS
188 1024 MT
270 RO
(log\050search time\051 \050sec\051) SH
GR
/Helvetica-Wingz 48.000 SF
476 1278 MT
476 1278 458 1278 DL
FL
476 1235 MT
476 1235 458 1235 DL
FL
476 1205 MT
476 1205 458 1205 DL
FL
476 1181 MT
476 1181 458 1181 DL
FL
476 1162 MT
476 1162 458 1162 DL
FL
476 1145 MT
476 1145 458 1145 DL
FL
476 1131 MT
476 1131 458 1131 DL
FL
476 1118 MT
476 1118 458 1118 DL
FL
476 1352 MT
476 1352 440 1352 DL
FL
320 1376 MT
(0.00) SH
476 1034 MT
476 1034 458 1034 DL
FL
476 990 MT
476 990 458 990 DL
FL
476 960 MT
476 960 458 960 DL
FL
476 936 MT
476 936 458 936 DL
FL
476 917 MT
476 917 458 917 DL
FL
476 900 MT
476 900 458 900 DL
FL
476 886 MT
476 886 458 886 DL
FL
476 874 MT
476 874 458 874 DL
FL
476 1107 MT
0.000 0.000 1.000 SC
476 1107 1784 1107 DL
FL
476 1107 MT
0.000 0.000 0.000 SC
476 1107 440 1107 DL
FL
320 1131 MT
(0.01) SH
476 789 MT
476 789 458 789 DL
FL
476 746 MT
476 746 458 746 DL
FL
476 715 MT
476 715 458 715 DL
FL
476 691 MT
476 691 458 691 DL
FL
476 672 MT
476 672 458 672 DL
FL
476 656 MT
476 656 458 656 DL
FL
476 641 MT
476 641 458 641 DL
FL
476 629 MT
476 629 458 629 DL
FL
476 862 MT
0.000 0.000 1.000 SC
476 862 1784 862 DL
FL
476 862 MT
0.000 0.000 0.000 SC
476 862 440 862 DL
FL
320 886 MT
(0.10) SH
476 544 MT
476 544 458 544 DL
FL
476 501 MT
476 501 458 501 DL
FL
476 470 MT
476 470 458 470 DL
FL
476 446 MT
476 446 458 446 DL
FL
476 427 MT
476 427 458 427 DL
FL
476 411 MT
476 411 458 411 DL
FL
476 397 MT
476 397 458 397 DL
FL
476 384 MT
476 384 458 384 DL
FL
476 618 MT
0.000 0.000 1.000 SC
476 618 1784 618 DL
FL
476 618 MT
0.000 0.000 0.000 SC
476 618 440 618 DL
FL
320 642 MT
(1.00) SH
476 299 MT
476 299 458 299 DL
FL
476 256 MT
476 256 458 256 DL
FL
476 225 MT
476 225 458 225 DL
FL
476 202 MT
476 202 458 202 DL
FL
476 182 MT
476 182 458 182 DL
FL
476 166 MT
476 166 458 166 DL
FL
476 152 MT
476 152 458 152 DL
FL
476 139 MT
476 139 458 139 DL
FL
476 373 MT
0.000 0.000 1.000 SC
476 373 1784 373 DL
FL
476 373 MT
0.000 0.000 0.000 SC
476 373 440 373 DL
FL
292 397 MT
(10.00) SH
476 128 MT
476 128 440 128 DL
FL
264 152 MT
(100.00) SH
GS
476 128 1785 1353 CR
476 1352 MT
8.00 LW
476 1352 476 1350 DL
FL
476 1350 476 1348 DL
FL
476 1348 476 1345 DL
FL
476 1345 476 1339 DL
FL
476 1339 477 1331 DL
FL
477 1331 477 1321 DL
FL
477 1321 477 1308 DL
FL
477 1308 478 1292 DL
FL
478 1292 MT
478 1292 479 1272 DL
FL
479 1272 480 1249 DL
FL
480 1249 481 1224 DL
FL
481 1224 482 1197 DL
FL
482 1197 484 1170 DL
FL
484 1170 486 1143 DL
FL
486 1143 488 1116 DL
FL
488 1116 491 1090 DL
FL
491 1090 494 1067 DL
FL
494 1067 498 1046 DL
FL
498 1046 MT
498 1046 502 1029 DL
FL
502 1029 506 1015 DL
FL
506 1015 511 1003 DL
FL
511 1003 517 994 DL
FL
517 994 522 988 DL
FL
522 988 528 983 DL
FL
528 983 534 979 DL
FL
534 979 540 977 DL
FL
540 977 546 976 DL
FL
546 976 552 975 DL
FL
552 975 MT
552 975 558 974 DL
FL
558 974 564 974 DL
FL
564 974 571 974 DL
FL
571 974 580 973 DL
FL
580 973 590 973 DL
FL
590 973 603 972 DL
FL
603 972 618 971 DL
FL
618 971 636 970 DL
FL
636 970 659 969 DL
FL
659 969 685 966 DL
FL
685 966 MT
685 966 716 964 DL
FL
716 964 752 961 DL
FL
752 961 791 957 DL
FL
791 957 834 954 DL
FL
834 954 881 950 DL
FL
881 950 930 945 DL
FL
930 945 983 941 DL
FL
983 941 1037 937 DL
FL
1037 937 1094 932 DL
FL
1094 932 1152 928 DL
FL
1152 928 MT
1152 928 1211 924 DL
FL
1211 924 1271 920 DL
FL
1271 920 1331 917 DL
FL
1331 917 1389 913 DL
FL
1389 913 1446 910 DL
FL
1446 910 1500 907 DL
FL
1500 907 1551 905 DL
FL
1551 905 1597 902 DL
FL
1597 902 1639 900 DL
FL
1639 900 1675 898 DL
FL
1675 898 MT
1675 898 1704 897 DL
FL
1704 897 1728 896 DL
FL
1728 896 1747 895 DL
FL
1747 895 1760 894 DL
FL
1760 894 1770 894 DL
FL
1770 894 1777 893 DL
FL
1777 893 1781 893 DL
FL
1781 893 1783 893 DL
FL
1783 893 1784 893 DL
FL
476 1352 MT
0.498 0.498 0.498 SC
476 1352 476 1351 DL
FL
476 1351 476 1349 DL
FL
476 1349 476 1345 DL
FL
476 1345 476 1339 DL
FL
476 1339 476 1329 DL
FL
476 1329 477 1316 DL
FL
477 1316 477 1298 DL
FL
477 1298 477 1275 DL
FL
477 1275 478 1246 DL
FL
478 1246 MT
478 1246 479 1211 DL
FL
479 1211 480 1171 DL
FL
480 1171 481 1127 DL
FL
481 1127 482 1079 DL
FL
482 1079 484 1030 DL
FL
484 1030 486 981 DL
FL
486 981 488 932 DL
FL
488 932 491 884 DL
FL
491 884 494 839 DL
FL
494 839 498 798 DL
FL
498 798 MT
498 798 502 762 DL
FL
502 762 506 730 DL
FL
506 730 511 703 DL
FL
511 703 517 679 DL
FL
517 679 522 658 DL
FL
522 658 528 639 DL
FL
528 639 534 623 DL
FL
534 623 540 609 DL
FL
540 609 546 596 DL
FL
546 596 552 584 DL
FL
552 584 MT
552 584 558 572 DL
FL
558 572 564 561 DL
FL
564 561 571 549 DL
FL
571 549 580 538 DL
FL
580 538 590 527 DL
FL
590 527 603 516 DL
FL
603 516 618 504 DL
FL
618 504 636 493 DL
FL
636 493 659 481 DL
FL
659 481 685 469 DL
FL
685 469 MT
685 469 716 457 DL
FL
716 457 752 445 DL
FL
752 445 791 432 DL
FL
791 432 834 420 DL
FL
834 420 881 408 DL
FL
881 408 930 395 DL
FL
930 395 983 384 DL
FL
983 384 1037 372 DL
FL
1037 372 1094 362 DL
FL
1094 362 1152 352 DL
FL
1152 352 MT
1152 352 1211 343 DL
FL
1211 343 1271 334 DL
FL
1271 334 1331 327 DL
FL
1331 327 1389 320 DL
FL
1389 320 1446 314 DL
FL
1446 314 1500 309 DL
FL
1500 309 1551 304 DL
FL
1551 304 1597 300 DL
FL
1597 300 1639 296 DL
FL
1639 296 1675 294 DL
FL
1675 294 MT
1675 294 1704 291 DL
FL
1704 291 1728 289 DL
FL
1728 289 1747 288 DL
FL
1747 288 1760 287 DL
FL
1760 287 1770 286 DL
FL
1770 286 1777 285 DL
FL
1777 285 1781 285 DL
FL
1781 285 1783 285 DL
FL
1783 285 1784 285 DL
FL
GR
1784 1352 MT
1784 1352 1784 128 DL
FL
476 128 MT
476 128 1784 128 DL
FL
476 1352 MT
476 1352 1784 1352 DL
FL
476 1352 MT
476 1352 476 128 DL
FL
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
showpage
restore

%%Trailer
%%Pages: 1

%%EndDocument
FMENDEPSF
54.11 544.73 277.61 578.95 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Figure 14: Total Search Time of Point Queries for) 59.21 561.41 T
(Varying Database Size \050Synthetic Point Data\051) 68.79 549.41 T
54.65 96.95 288.65 744.95 C
-8.35 24.95 603.65 816.95 C
306.65 96.95 540.65 744.95 C
308.48 528.95 538.81 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 656 437 223.59 159.65 313.05 582.84 FMBEGINEPSF
%%BeginDocument: /nfs/malaka/users1/wiss/berchtol/final/10000_pq.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Creator: Informix Wingz Version 1.1b
%%CreationDate: Fri Feb 23 11:28:36 1996
%%For: Stefan Berchtold (berchtol)
%%BoundingBox: 0 0 656 437
%%Pages: (atend)
%%EndComments


%%BeginProlog
/AC /arc load def
/AN /arcn load def
/AT /arcto load def
/CL /clip load def
/CN /concat load def
/CP /closepath load def
/CR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP CL NP } bind def
/DL { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y2 LT SP } bind def
/DR { /y2 exch def /x2 exch def /y1 exch def /x1 exch def NP x1 y1 MT x2 y1 LT x2 y2 LT x1 y2 LT CP } bind def
/DS { scrfreq scrang scrproc cvx setscreen } bind def
/EC /eoclip load def
/EF /eofill load def
/FL /fill load def
/GS /gsave load def
/GR /grestore load def
/LT /lineto load def
/LW /setlinewidth load def
/MOF { /uid exch def /sw exch def /nfn exch def /bfn exch def /bfd bfn findfont def /nent bfd maxlength 1 add def bfd
/UniqueID known not { /nent nent 1 add def } if /ofd nent dict def bfd { exch dup /FID ne { exch ofd 3 1 roll put } { pop pop } ifelse } forall
ofd /FontName nfn put ofd /PaintType get 0 eq { ofd /PaintType 2 put } if ofd /StrokeWidth sw put ofd /UniqueID uid put nfn ofd definefont pop } bind def
/MT /moveto load def
/NP /newpath load def
/RE { /nfn exch def /bfn exch def /bfd bfn findfont def /nf bfd maxlength dict def bfd { exch dup /FID ne {dup /Encoding eq {exch dup length array copy
nf 3 1 roll put } {exch nf 3 1 roll put} ifelse } {pop pop} ifelse } forall bfn (Symbol) ne { nf /FontName nfn put vect aload pop vect length 2 idiv {nf /Encoding get 3 1 roll put} repeat }
if nfn nf definefont pop } bind def
/RL /rlineto load def
/RM /rmoveto load def
/RO /rotate load def
/SF { /s exch def /f exch def f findfont [s 0 0 s neg 0 0 ] makefont setfont } bind def
/SG /setgray load def
/SH /show load def
/SL /scale load def
/SK /stroke load def
/SP /strokepath load def
/SC /setrgbcolor load def
/SD { /stl exch def /hud exch def /sz exch def /udof exch def /sof exch def /uw exch def /str exch def /len str stringwidth pop def
currentrgbcolor /blue exch def /green exch def /red exch def 0.333 SG GS sof 0 RM str SH hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW sof udof RM len 0
RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def sof yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if
SK GR } if red green blue SC str stringwidth pop /x exch def /xoff sof x add def /yoff sof neg def xoff neg yoff RM str SH
hud 1 eq { GS str stringwidth pop neg 0 RM stl 2 eq { uw LW 0 udof RM len 0 RL } if stl 6 eq { sz 72 div LW /off uw 2 div def /yoff udof
off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if GR str stringwidth pop sof RM } bind def
/CF { /cliptype exch def /pndex exch def /bgb exch def /bgg exch def /bgr exch def /fgb exch def /fgg exch def /fgr exch def GS 4.000 4.000 SL pathbbox 
/ury exch cvi def /urx exch cvi def /lly exch cvi def /llx exch cvi def /yoff lly 8 mod def /xoff llx 8 mod def /iy lly yoff sub def /ix llx xoff sub def /width urx llx sub 1 add xoff add def
 /height ury lly sub 1 add yoff add def /pdata pats pndex get def /imatrix [1 0 0 1 0 0] def /NullProc {} bind def cliptype cvx exec bgr bgg bgb SC FL fgr fgg fgb SC ix iy TR 0 64
height { /yoff exch def 0 64 width { /xoff exch def GS xoff yoff TR 64 64 true imatrix pdata NullProc imagemask GR } for } for GR } bind def
/ST { /stl exch def /hud exch def /sz exch def /udof exch def /uw exch def /str exch def /len str stringwidth pop def hud 1 eq { GS stl 0 eq { uw LW 0 udof RM len 0 RL } if stl
4 eq { sz 72 div LW /off uw 2 div def /yoff udof off sub def 0 yoff RM len 0 RL GS SK GR len neg uw RM len 0 RL } if SK GR } if str SH } bind def
/TR /translate load def
/vect [ 8#260  /Adieresis 8#265  /Aring 8#276  /Ccedilla 8#300  /Eacute 8#311 /Ntilde 8#314  /Odieresis 8#321  /Udieresis 8#322  /aacute 8#323 /agrave  8#324  /acircumflex 8#325  /adieresis 8#326  /atilde
8#327  /aring 8#330  /ccedilla  8#331  /eacute 8#332  /egrave 8#333  /ecircumflex 8#334  /edieresis 8#335  /iacute  8#336  /igrave 8#337  /icircumflex 8#340  /idieresis 8#342  /ntilde 8#344  /oacute
8#345  /ograve 8#346  /ocircumflex 8#347  /odieresis 8#354  /otilde 8#355  /uacute  8#356  /ugrave 8#357  /ucircumflex 8#360  /udieresis 8#362  /Agrave 8#363  /Atilde  8#364  /Otilde 8#366  /ydieresis
8#367  /Ydieresis 8#374  /Acircumflex  8#375  /Ecircumflex 8#376  /Aacute 8#377  /Edieresis 8#177  /Egrave 8#200  /Iacute  8#201  /Icircumflex 8#202  /Idieresis 8#203  /Igrave 8#204  /Oacute 8#205  /Ocircumflex
8#206  /Ograve 8#207  /Uacute 8#210  /Ucircumflex 8#211  /Ugrave 8#365  /dotlessi ]def
/pats [<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFFDDDDDDDDDDDDDDDDFFFFFFFFFFFFFFFF7777777777777777FFFFFFFFFFFFFFFF>
<DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777DDDDDDDDDDDDDDDD7777777777777777>
<AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555AAAAAAAAAAAAAAAA5555555555555555>
<5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF5555555555555555FFFFFFFFFFFFFFFF>
<AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>
<EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777EEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDBBBBBBBBBBBBBBBB7777777777777777>
<88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888>
<B1B1B1B1B1B1B1B1303030303030303003030303030303031B1B1B1B1B1B1B1BD8D8D8D8D8D8D8D8C0C0C0C0C0C0C0C00C0C0C0C0C0C0C0C8D8D8D8D8D8D8D8D>
<80808080808080801010101010101010020202020202020220202020202020200101010101010101080808080808080840404040404040400404040404040404>
<FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888FFFFFFFFFFFFFFFF888888888888888888888888888888888888888888888888>
<FFFFFFFFFFFFFFFF808080808080808080808080808080808080808080808080FFFFFFFFFFFFFFFF080808080808080808080808080808080808080808080808>
<80808080808080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080804040404040404040202020202020202000000000000000000202020202020202040404040404040408080808080808080000000000000000>
<82828282828282824444444444444444393939393939393944444444444444448282828282828282010101010101010101010101010101010101010101010101>
<F8F8F8F8F8F8F8F87474747474747474222222222222222247474747474747478F8F8F8F8F8F8F8F171717171717171722222222222222227171717171717171>
<5555555555555555A0A0A0A0A0A0A0A04040404040404040404040404040404055555555555555550A0A0A0A0A0A0A0A04040404040404040404040404040404>
<20202020202020205050505050505050888888888888888888888888888888888888888888888888888888888888888805050505050505050202020202020202>
<BFBFBFBFBFBFBFBF0000000000000000BFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0>
<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>
<80808080808080800000000000000000080808080808080800000000000000008080808080808080000000000000000008080808080808080000000000000000>
<88888888888888880000000000000000222222222222222200000000000000008888888888888888000000000000000022222222222222220000000000000000>
<88888888888888882222222222222222888888888888888822222222222222228888888888888888222222222222222288888888888888882222222222222222>
<AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000>
<11111111111111112222222222222222444444444444444488888888888888881111111111111111222222222222222244444444444444448888888888888888>
<FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000>
<01010101010101010202020202020202040404040404040408080808080808081010101010101010202020202020202040404040404040408080808080808080>
<AAAAAAAAAAAAAAAA0000000000000000808080808080808000000000000000008888888888888888000000000000000080808080808080800000000000000000>
<FFFFFFFFFFFFFFFF8080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080>
<08080808080808081C1C1C1C1C1C1C1C2222222222222222C1C1C1C1C1C1C1C18080808080808080010101010101010102020202020202020404040404040404>
<888888888888888814141414141414142222222222222222414141414141414188888888888888880000000000000000AAAAAAAAAAAAAAAA0000000000000000>
<4040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000004040404040404040A0A0A0A0A0A0A0A00000000000000000000000000000000>
<03030303030303038484848484848484484848484848484830303030303030300C0C0C0C0C0C0C0C020202020202020201010101010101010101010101010101>
<8080808080808080808080808080808041414141414141413E3E3E3E3E3E3E3E080808080808080808080808080808081414141414141414E3E3E3E3E3E3E3E3>
<101010101010101020202020202020205454545454545454AAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFF020202020202020204040404040404040808080808080808>
<777777777777777789898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F77777777777777779898989898989898F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8>
<0000000000000000080808080808080814141414141414142A2A2A2A2A2A2A2A55555555555555552A2A2A2A2A2A2A2A14141414141414140808080808080808> ] def
/BEPSF { /IS save def /dcnt countdictstack def /opcnt count 1 sub def userdict begin /showpage {} def 0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit [] 0 setdash newpath } bind def
/EEPSF { count opcnt sub {pop} repeat countdictstack dcnt sub {end} repeat IS restore } bind def
%%EndProlog

%%Page: 1 1
save
currentscreen /scrproc exch cvlit def /scrang exch def /scrfreq exch def
2 setlinecap
0 437 TR
[1 0 0 -1 0 0] CN
0.250 0.250 SL
1.0 LW
GS
0 0 2624 1749 CR
GS
0 0 2624 1749 CR
GS
0 0 2624 1749 CR
/Helvetica /Helvetica-Wingz RE
/Helvetica-Wingz 48.000 SF
/Helvetica-Wingz 56.000 SF
/Helvetica-Wingz 48.000 SF
1.000 1.000 1.000 SC
0 0 2623 1748 DR
FL
0.000 0.000 0.000 SC
8.00 LW
4 4 2619 1744 DR
SP
FL
1.000 1.000 1.000 SC
2169 685 2567 1063 DR
FL
0.000 0.000 0.000 SC
1.00 LW
2169 685 2567 1063 DR
SP
FL
/Helvetica-Wingz 56.000 SF
2302 790 MT
(TV-tree) SH
2222 762 MT
8.00 LW
2222 762 2270 762 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
0.000 0.000 0.000 SC
2302 902 MT
(R*-tree) SH
2222 874 MT
2222 874 2270 874 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
0.000 0.000 0.000 SC
2302 1014 MT
(X-tree) SH
2222 986 MT
2222 986 2270 986 DL
FL
1.000 1.000 1.000 SC
56 56 2121 1692 DR
FL
448 128 2045 1376 DR
FL
1088 1532 1404 1644 DR
FL
0.000 0.000 0.000 SC
1116 1616 MT
(dimension) SH
/Helvetica-Wingz 48.000 SF
562 1376 MT
1.00 LW
562 1376 562 1394 DL
FL
448 1376 MT
448 1376 448 1412 DL
FL
434 1484 MT
(4) SH
790 1376 MT
790 1376 790 1394 DL
FL
676 1376 MT
0.000 0.000 1.000 SC
676 1376 676 128 DL
FL
676 1376 MT
0.000 0.000 0.000 SC
676 1376 676 1412 DL
FL
662 1484 MT
(8) SH
1018 1376 MT
1018 1376 1018 1394 DL
FL
904 1376 MT
0.000 0.000 1.000 SC
904 1376 904 128 DL
FL
904 1376 MT
0.000 0.000 0.000 SC
904 1376 904 1412 DL
FL
876 1484 MT
(12) SH
1247 1376 MT
1247 1376 1247 1394 DL
FL
1132 1376 MT
0.000 0.000 1.000 SC
1132 1376 1132 128 DL
FL
1132 1376 MT
0.000 0.000 0.000 SC
1132 1376 1132 1412 DL
FL
1104 1484 MT
(16) SH
1475 1376 MT
1475 1376 1475 1394 DL
FL
1361 1376 MT
0.000 0.000 1.000 SC
1361 1376 1361 128 DL
FL
1361 1376 MT
0.000 0.000 0.000 SC
1361 1376 1361 1412 DL
FL
1333 1484 MT
(20) SH
1703 1376 MT
1703 1376 1703 1394 DL
FL
1589 1376 MT
0.000 0.000 1.000 SC
1589 1376 1589 128 DL
FL
1589 1376 MT
0.000 0.000 0.000 SC
1589 1376 1589 1412 DL
FL
1561 1484 MT
(24) SH
1931 1376 MT
1931 1376 1931 1394 DL
FL
1817 1376 MT
0.000 0.000 1.000 SC
1817 1376 1817 128 DL
FL
1817 1376 MT
0.000 0.000 0.000 SC
1817 1376 1817 1412 DL
FL
1789 1484 MT
(28) SH
2045 1376 MT
2045 1376 2045 1412 DL
FL
2017 1484 MT
(32) SH
/Helvetica-Wingz 56.000 SF
1.000 1.000 1.000 SC
104 524 216 980 DR
FL
0.000 0.000 0.000 SC
GS
188 952 MT
270 RO
(page accesses) SH
GR
/Helvetica-Wingz 48.000 SF
448 1337 MT
448 1337 430 1337 DL
FL
448 1298 MT
448 1298 430 1298 DL
FL
448 1259 MT
448 1259 430 1259 DL
FL
448 1376 MT
448 1376 412 1376 DL
FL
292 1400 MT
(0.00) SH
448 1181 MT
448 1181 430 1181 DL
FL
448 1142 MT
448 1142 430 1142 DL
FL
448 1103 MT
448 1103 430 1103 DL
FL
448 1220 MT
0.000 0.000 1.000 SC
448 1220 2045 1220 DL
FL
448 1220 MT
0.000 0.000 0.000 SC
448 1220 412 1220 DL
FL
292 1244 MT
(4.00) SH
448 1025 MT
448 1025 430 1025 DL
FL
448 986 MT
448 986 430 986 DL
FL
448 947 MT
448 947 430 947 DL
FL
448 1064 MT
0.000 0.000 1.000 SC
448 1064 2045 1064 DL
FL
448 1064 MT
0.000 0.000 0.000 SC
448 1064 412 1064 DL
FL
292 1088 MT
(8.00) SH
448 869 MT
448 869 430 869 DL
FL
448 830 MT
448 830 430 830 DL
FL
448 791 MT
448 791 430 791 DL
FL
448 908 MT
0.000 0.000 1.000 SC
448 908 2045 908 DL
FL
448 908 MT
0.000 0.000 0.000 SC
448 908 412 908 DL
FL
264 932 MT
(12.00) SH
448 713 MT
448 713 430 713 DL
FL
448 674 MT
448 674 430 674 DL
FL
448 635 MT
448 635 430 635 DL
FL
448 752 MT
0.000 0.000 1.000 SC
448 752 2045 752 DL
FL
448 752 MT
0.000 0.000 0.000 SC
448 752 412 752 DL
FL
264 776 MT
(16.00) SH
448 557 MT
448 557 430 557 DL
FL
448 518 MT
448 518 430 518 DL
FL
448 479 MT
448 479 430 479 DL
FL
448 596 MT
0.000 0.000 1.000 SC
448 596 2045 596 DL
FL
448 596 MT
0.000 0.000 0.000 SC
448 596 412 596 DL
FL
264 620 MT
(20.00) SH
448 401 MT
448 401 430 401 DL
FL
448 362 MT
448 362 430 362 DL
FL
448 323 MT
448 323 430 323 DL
FL
448 440 MT
0.000 0.000 1.000 SC
448 440 2045 440 DL
FL
448 440 MT
0.000 0.000 0.000 SC
448 440 412 440 DL
FL
264 464 MT
(24.00) SH
448 245 MT
448 245 430 245 DL
FL
448 206 MT
448 206 430 206 DL
FL
448 167 MT
448 167 430 167 DL
FL
448 284 MT
0.000 0.000 1.000 SC
448 284 2045 284 DL
FL
448 284 MT
0.000 0.000 0.000 SC
448 284 412 284 DL
FL
264 308 MT
(28.00) SH
448 128 MT
448 128 412 128 DL
FL
264 152 MT
(32.00) SH
GS
448 128 2046 1377 CR
448 1337 MT
8.00 LW
448 1337 449 1337 DL
FL
449 1337 450 1337 DL
FL
450 1337 453 1337 DL
FL
453 1337 456 1337 DL
FL
456 1337 461 1337 DL
FL
461 1337 467 1337 DL
FL
467 1337 476 1337 DL
FL
476 1337 486 1337 DL
FL
486 1337 MT
486 1337 498 1337 DL
FL
498 1337 513 1337 DL
FL
513 1337 529 1337 DL
FL
529 1337 547 1337 DL
FL
547 1337 567 1337 DL
FL
567 1337 587 1337 DL
FL
587 1337 609 1337 DL
FL
609 1337 631 1337 DL
FL
631 1337 653 1337 DL
FL
653 1337 676 1337 DL
FL
676 1337 MT
676 1337 699 1337 DL
FL
699 1337 722 1337 DL
FL
722 1337 744 1337 DL
FL
744 1337 767 1337 DL
FL
767 1337 790 1337 DL
FL
790 1337 813 1337 DL
FL
813 1337 836 1337 DL
FL
836 1337 859 1337 DL
FL
859 1337 881 1337 DL
FL
881 1337 904 1336 DL
FL
904 1336 MT
904 1336 927 1336 DL
FL
927 1336 951 1336 DL
FL
951 1336 976 1335 DL
FL
976 1335 1003 1334 DL
FL
1003 1334 1032 1333 DL
FL
1032 1333 1066 1331 DL
FL
1066 1331 1103 1329 DL
FL
1103 1329 1145 1326 DL
FL
1145 1326 1193 1323 DL
FL
1193 1323 1246 1318 DL
FL
1246 1318 MT
1246 1318 1307 1313 DL
FL
1307 1313 1372 1307 DL
FL
1372 1307 1441 1300 DL
FL
1441 1300 1512 1293 DL
FL
1512 1293 1584 1286 DL
FL
1584 1286 1654 1279 DL
FL
1654 1279 1722 1273 DL
FL
1722 1273 1785 1266 DL
FL
1785 1266 1843 1260 DL
FL
1843 1260 1893 1255 DL
FL
1893 1255 MT
1893 1255 1934 1251 DL
FL
1934 1251 1967 1247 DL
FL
1967 1247 1993 1245 DL
FL
1993 1245 2012 1243 DL
FL
2012 1243 2026 1241 DL
FL
2026 1241 2035 1240 DL
FL
2035 1240 2041 1240 DL
FL
2041 1240 2044 1240 DL
FL
2044 1240 2045 1240 DL
FL
448 1337 MT
448 1337 449 1337 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
449 1337 450 1337 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
450 1337 453 1337 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
453 1337 456 1337 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
456 1337 461 1336 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
461 1336 467 1336 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
467 1336 476 1336 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
476 1336 486 1335 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
486 1335 MT
486 1335 498 1334 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
498 1334 513 1333 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
513 1333 529 1333 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
529 1333 547 1332 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
547 1332 567 1331 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
567 1331 587 1330 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
587 1330 609 1329 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
609 1329 631 1329 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
631 1329 653 1328 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
653 1328 676 1328 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
676 1328 MT
676 1328 699 1327 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
699 1327 722 1327 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
722 1327 744 1325 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
744 1325 767 1322 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
767 1322 790 1318 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
790 1318 813 1310 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
813 1310 836 1300 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
836 1300 859 1286 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
859 1286 881 1268 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
881 1268 904 1245 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
904 1245 MT
904 1245 927 1217 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
927 1217 951 1185 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
951 1185 976 1148 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
976 1148 1003 1108 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
1003 1108 1032 1064 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
1032 1064 1066 1018 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
1066 1018 1103 969 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
1103 969 1145 919 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
1145 919 1193 867 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
1193 867 1246 815 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
1246 815 MT
1246 815 1307 763 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
1307 763 1372 711 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
1372 711 1441 659 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
1441 659 1512 610 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
1512 610 1584 562 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
1584 562 1654 517 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
1654 517 1722 475 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
1722 475 1785 437 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
1785 437 1843 403 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
1843 403 1893 373 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
1893 373 MT
1893 373 1934 349 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
1934 349 1967 330 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
1967 330 1993 315 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
1993 315 2012 303 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
2012 303 2026 295 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
2026 295 2035 290 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
2035 290 2041 287 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
2041 287 2044 285 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
2044 285 2045 284 DL
0.000 0.000 0.000 1.000 1.000 1.000 6 (CL) CF
448 1068 MT
448 1068 449 1067 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
449 1067 450 1066 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
450 1066 453 1064 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
453 1064 456 1062 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
456 1062 461 1059 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
461 1059 467 1054 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
467 1054 476 1048 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
476 1048 486 1041 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
486 1041 MT
486 1041 498 1032 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
498 1032 513 1021 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
513 1021 529 1010 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
529 1010 547 999 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
547 999 567 987 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
567 987 587 975 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
587 975 609 964 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
609 964 631 954 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
631 954 653 946 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
653 946 676 939 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
676 939 MT
676 939 699 934 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
699 934 722 930 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
722 930 744 928 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
744 928 767 928 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
767 928 790 928 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
790 928 813 929 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
813 929 836 931 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
836 931 859 932 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
859 932 881 933 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
881 933 904 934 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
904 934 MT
904 934 927 934 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
927 934 951 933 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
951 933 976 932 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
976 932 1003 930 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1003 930 1032 928 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1032 928 1066 925 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1066 925 1103 922 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1103 922 1145 919 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1145 919 1193 916 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1193 916 1246 913 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1246 913 MT
1246 913 1307 909 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1307 909 1372 906 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1372 906 1441 903 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1441 903 1512 900 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1512 900 1584 897 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1584 897 1654 894 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1654 894 1722 892 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1722 892 1785 890 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1785 890 1843 888 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1843 888 1893 886 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1893 886 MT
1893 886 1934 884 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1934 884 1967 883 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1967 883 1993 882 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
1993 882 2012 882 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
2012 882 2026 881 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
2026 881 2035 881 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
2035 881 2041 881 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
2041 881 2044 881 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
2044 881 2045 881 DL
0.000 0.000 0.000 1.000 1.000 1.000 8 (CL) CF
GR
2045 1376 MT
2045 1376 2045 128 DL
FL
448 128 MT
448 128 2045 128 DL
FL
448 1376 MT
448 1376 2045 1376 DL
FL
448 1376 MT
448 1376 448 128 DL
FL
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
GR
/Helvetica-Wingz 48.000 SF
showpage
restore

%%Trailer
%%Pages: 1

%%EndDocument
FMENDEPSF
321.98 542.45 533.48 566.68 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Figure 16: Comparison of X-) 327.75 560.01 T
(tree, TV-) 451.07 560.01 T
(tree, and) 489.94 560.01 T
(R*-) 372.33 548.01 T
(tree on Synthetic Data) 387.88 548.01 T
306.65 96.95 540.65 744.95 C
-8.35 24.95 603.65 816.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 11
%%Page: "12" 12
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
[ 1 0.6 0 0 0 0.4 1]
[ 0 0.2 0.2 0.8 0.2 0 0]
[ 0.5 0 0 0 0.5 1 1]
 10 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54.65 770.95 540.65 780.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54.65 96.95 540.65 744.95 R
V
0 11.6 Q
0 X
(Acknowledgment) 54.65 737.22 T
1 10 Q
-0.39 -0.02 (We are thankful to K. Lin, C. Faloutsos, and H. V. Jag-) 72.65 717.33 B
0.3 -0.02 (adish for making the implementation of the TV-) 54.65 706.33 B
0.3 -0.02 (tree avail-) 248.31 706.33 B
-0.5 -0.02 (able to us.) 54.65 695.33 B
0 14 Q
(References) 54.65 666.3 T
1 9 Q
-0.22 ([AFS 93]) 54.65 646.27 P
1.61 (Agra) 110.36 646.27 P
1.61 (w) 128.22 646.27 P
1.61 (al R., F) 134.63 646.27 P
1.61 (aloutsos C., Sw) 164.21 646.27 P
1.61 (ami A.:) 223.35 646.27 P
3 F
1.61 (\324Ef) 255.82 646.27 P
1.61 (\336cient) 266.65 646.27 P
0.8 (Similarity Sear) 110.38 635.27 P
0.8 (c) 165.1 635.27 P
0.8 (h in Sequence Databases\325,) 168.96 635.27 P
1 F
0.8 ( Proc.) 266.85 635.27 P
-0.87 (4th Int. Conf. on F) 110.38 624.27 P
-0.87 (oundations of Data Or) 173.75 624.27 P
-0.87 (g) 251.2 624.27 P
-0.87 (anization) 255.65 624.27 P
-0.08 (and Algorithms, Ev) 110.38 613.27 P
-0.08 (anston, ILL, 1993, in: Lecture) 180.74 613.27 P
1.22 (Notes in Computer Science, V) 110.38 602.27 P
1.22 (ol. 730, Springer) 223.82 602.27 P
1.22 (,) 286.4 602.27 P
-0.22 (1993, pp. 69-84.) 110.38 591.27 P
([A) 54.65 576.91 T
(GMM) 63.78 576.91 T
(90]) 88.53 576.91 T
0.53 (Altschul S. F) 110.36 576.91 P
0.53 (., Gish W) 157.96 576.91 P
0.53 (., Miller W) 192.68 576.91 P
0.53 (., Myers E. W) 232.9 576.91 P
0.53 (.,) 284.15 576.91 P
-0.22 (Lipman D. J.) 110.38 565.91 P
1.49 (:) 156.92 565.91 P
3 F
1.49 (\324A Basic Local Alignment Sear) 163.17 565.91 P
1.49 (c) 280.29 565.91 P
1.49 (h) 284.15 565.91 P
1.98 (T) 110.38 554.91 P
1.98 (ool\325,) 114.55 554.91 P
1 F
1.98 ( Journal of Molecular Biology) 131.3 554.91 P
1.98 (, V) 247.61 554.91 P
1.98 (ol. 215,) 259.42 554.91 P
-0.22 (No.) 110.38 543.91 P
-0.22 (3, 1990, pp. 403-410.) 125.87 543.91 P
([BKSS) 54.65 529.55 T
(90]) 82.4 529.55 T
-0.44 (Beckmann N., Krie) 110.36 529.55 P
-0.44 (gel H.-P) 179.32 529.55 P
-0.44 (., Schneider R., See) 207.88 529.55 P
-0.44 (ger) 277.15 529.55 P
0.42 (B.:) 110.38 518.55 P
3 F
0.42 (\324The R*-) 123.81 518.55 P
0.42 (tr) 155.97 518.55 P
0.42 (ee: An Ef) 161.64 518.55 P
0.42 (\336cient and Rob) 195.82 518.55 P
0.42 (ust Access) 250.98 518.55 P
1.23 (Method for P) 110.38 507.55 P
1.23 (oints and Rectangles\325,) 160.11 507.55 P
1 F
1.23 (Proc. A) 246.28 507.55 P
1.23 (CM) 274.64 507.55 P
2.34 (SIGMOD Int. Conf. on Management of Data,) 110.38 496.55 P
-0.22 (Atlantic City) 110.38 485.55 P
-0.22 (, NJ, 1990, pp.) 156.32 485.55 P
-0.22 (322-) 210.65 485.55 P
-0.22 (331.) 227.14 485.55 P
([DE) 54.65 471.19 T
(82]) 71.89 471.19 T
0.83 (Dunn G., Ev) 110.36 471.19 P
0.83 (eritt B.:) 157.39 471.19 P
3 F
0.83 (\324An Intr) 188.81 471.19 P
0.83 (oduction to Mathe-) 217.99 471.19 P
0.37 (matical T) 110.38 460.19 P
0.37 (axonomy\325,) 144.17 460.19 P
1 F
0.37 (Cambridge Uni) 184.53 460.19 P
0.37 (v) 240.42 460.19 P
0.37 (ersity Press,) 244.78 460.19 P
-0.22 (Cambridge, MA, 1982.) 110.38 449.19 P
-0.22 ([F) 54.65 434.83 P
-0.22 (al 94]) 62.51 434.83 P
-0.19 (F) 110.36 434.83 P
-0.19 (aloutsos C., Barber R., Flickner M., Hafner J., et) 115.23 434.83 P
1.84 (al.:) 110.38 423.83 P
3 F
1.84 (\324Ef) 125.72 423.83 P
1.84 (\336cient and Ef) 136.55 423.83 P
1.84 (fective Querying by Ima) 188.08 423.83 P
1.84 (g) 280.24 423.83 P
1.84 (e) 284.65 423.83 P
0.66 (Content\325,) 110.38 412.83 P
1 F
0.66 ( Journal of Intelligent Information Sys-) 144.13 412.83 P
-0.22 (tems, 1994, V) 110.38 401.83 P
-0.22 (ol. 3, pp. 231-262.) 159.26 401.83 P
([FL) 54.65 387.47 T
(95]) 70.4 387.47 T
0.3 (F) 110.36 387.47 P
0.3 (aloutsos C., Lin K.:) 115.23 387.47 P
3 F
0.3 ( \324F) 186.63 387.47 P
0.3 (astmap: A fast Algorithm) 197 387.47 P
1.74 (for Inde) 110.38 376.47 P
1.74 (xing) 140.68 376.47 P
1.74 (, Data-Mining and V) 156.09 376.47 P
1.74 (isualization of) 235.64 376.47 P
-0.8 (T) 110.38 365.47 P
-0.8 (r) 114.89 365.47 P
-0.8 (aditional and Multimedia Datasets\325,) 118.25 365.47 P
1 F
-0.8 ( Proc. A) 246.86 365.47 P
-0.8 (CM) 274.64 365.47 P
-0.24 (SIGMOD Int. Conf. on Management of Data, San) 110.38 354.47 P
-0.22 (Jose, CA, 1995, pp.) 110.38 343.47 P
-0.22 (163-) 182.7 343.47 P
-0.22 (174.) 199.2 343.47 P
([Gut) 54.65 329.11 T
(84]) 73.39 329.11 T
-0.1 (Guttman A.:) 110.36 329.11 P
3 F
-0.1 (\324R-) 157.42 329.11 P
-0.1 (tr) 168.91 329.11 P
-0.1 (ees: A Dynamic Inde) 174.58 329.11 P
-0.1 (x Structur) 249.33 329.11 P
-0.1 (e) 284.65 329.11 P
0.14 (for Spatial Sear) 110.38 318.11 P
0.14 (c) 167.33 318.11 P
0.14 (hing\325,) 171.2 318.11 P
1 F
0.14 (Proc. A) 194.84 318.11 P
0.14 (CM SIGMOD Int.) 222.11 318.11 P
-0.74 (Conf. on Management of Data, Boston, MA, 1984,) 110.38 307.11 P
(pp.) 110.38 296.11 T
(47-) 123.88 296.11 T
(57.) 135.87 296.11 T
([GN) 54.65 281.75 T
(91]) 72.89 281.75 T
2.36 (G\237nther O., Noltemeier H.:) 110.36 281.75 P
3 F
2.36 (\324Spatial Database) 221.04 281.75 P
-1.01 (Indices F) 110.38 270.75 P
-1.01 (or Lar) 142.16 270.75 P
-1.01 (g) 164.07 270.75 P
-1.01 (e Extended Objects\325,) 168.48 270.75 P
1 F
-1.01 (Proc. 7 th Int.) 242.43 270.75 P
-0.22 (Conf. on Data Engineering, 1991, pp.) 110.38 259.75 P
-0.22 (520-) 246.74 259.75 P
-0.22 (527.) 263.23 259.75 P
([Har) 54.65 245.39 T
(67]) 73.39 245.39 T
-0.48 (Harman H. H.:) 110.36 245.39 P
3 F
-0.48 (\324Modern F) 164.65 245.39 P
-0.48 (actor Analysis\325,) 202.74 245.39 P
1 F
-0.48 (Uni) 261.02 245.39 P
-0.48 (v) 274.29 245.39 P
-0.48 (er-) 278.66 245.39 P
-0.22 (sity of Chicago Press, 1967.) 110.38 234.39 P
-0.22 ([Jag 91]) 54.65 220.03 P
-0.31 (Jag) 110.36 220.03 P
-0.31 (adish H. V) 122.31 220.03 P
-0.31 (.:) 159.29 220.03 P
3 F
-0.31 (\324A Retrie) 165.98 220.03 P
-0.31 (val T) 198.28 220.03 P
-0.31 (ec) 215.4 220.03 P
-0.31 (hnique for Similar) 223.26 220.03 P
-0.51 (Shapes\325,) 110.38 209.03 P
1 F
-0.51 ( Proc. A) 141.12 209.03 P
-0.51 (CM SIGMOD Int. Conf. on Man-) 169.48 209.03 P
-0.22 (agement of Data, 1991, pp.) 110.38 198.03 P
-0.22 (208-217.) 209.46 198.03 P
-0.22 ([K) 54.65 183.67 P
-0.22 (uk 92]) 64.01 183.67 P
1.72 (K) 110.36 183.67 P
1.72 (ukich K.:) 116.72 183.67 P
3 F
1.72 (\324T) 155.9 183.67 P
1.72 (ec) 163.07 183.67 P
1.72 (hniques for A) 170.93 183.67 P
1.72 (utomatically Cor-) 222.68 183.67 P
-0.18 (r) 110.38 172.67 P
-0.18 (ecting W) 113.54 172.67 P
-0.18 (or) 144.28 172.67 P
-0.18 (ds in T) 151.94 172.67 P
-0.18 (e) 175.26 172.67 P
-0.18 (xt\325,) 179.07 172.67 P
1 F
-0.18 ( A) 190.82 172.67 P
-0.18 (CM Computing Surv) 199.02 172.67 P
-0.18 (e) 274.54 172.67 P
-0.18 (ys,) 278.4 172.67 P
-0.22 (V) 110.38 161.67 P
-0.22 (ol.) 115.71 161.67 P
-0.22 (24, No. 4, 1992, pp. 377-440.) 127.21 161.67 P
([KW) 54.65 147.31 T
(78]) 74.89 147.31 T
0.61 (Kruskal J. B., W) 110.36 147.31 P
0.61 (ish M.:) 171.82 147.31 P
3 F
0.61 ( \324Multidimensional Scal-) 197.93 147.31 P
-0.22 (ing\325,) 110.38 136.31 P
1 F
-0.22 ( SA) 127.12 136.31 P
-0.22 (GE publications, Be) 140.29 136.31 P
-0.22 (v) 212.36 136.31 P
-0.22 (erly Hills, 1978.) 216.73 136.31 P
([LJF) 54.65 121.95 T
(94]) 73.9 121.95 T
-0.5 (Lin K., Jag) 110.36 121.95 P
-0.5 (adish H. V) 149.3 121.95 P
-0.5 (., F) 185.88 121.95 P
-0.5 (aloutsos C.:) 196.99 121.95 P
3 F
-0.5 (\324The TV) 240.74 121.95 P
-0.5 (-tr) 268.99 121.95 P
-0.5 (ee:) 277.66 121.95 P
0.66 (An Inde) 110.38 110.95 P
0.66 (x Structur) 139.1 110.95 P
0.66 (e for High-Dimensional Data\325,) 175.17 110.95 P
1 F
-0.22 (VLDB Journal, V) 110.38 99.95 P
-0.22 (ol. 3, 1995, pp. 517-542.) 173.01 99.95 P
-0.22 ([MG 93]) 306.65 738.95 P
-0.26 (Mehrotra R., Gary J. E.:) 362.36 738.95 P
3 F
-0.26 (\324F) 450.32 738.95 P
-0.26 (eatur) 458.14 738.95 P
-0.26 (e-Based Retrie) 476.81 738.95 P
-0.26 (val) 529.65 738.95 P
0.91 (of Similar Shapes\325,) 362.38 727.95 P
1 F
0.91 ( Proc. 9th Int. Conf. on Data) 432.95 727.95 P
-0.33 (Engineering, V) 362.38 716.95 P
-0.33 (ienna, Austria, 1993, pp. 108-115.) 416.49 716.95 P
([MG) 306.65 703.95 T
(95]) 326.39 703.95 T
2.15 (Mehrotra R., Gary J. E.:) 362.36 703.95 P
3 F
2.15 (\324F) 462.37 703.95 P
2.15 (eatur) 470.19 703.95 P
2.15 (e-Inde) 488.85 703.95 P
2.15 (x-Based) 511.66 703.95 P
-0.32 (Similar Shape r) 362.38 692.95 P
-0.32 (etrie) 417.9 692.95 P
-0.32 (val\325,) 434.26 692.95 P
1 F
-0.32 ( Proc. of the 3rd W) 450.5 692.95 P
-0.32 (orking) 517.15 692.95 P
5.86 (Conf. on V) 362.38 681.95 P
5.86 (isual Database Systems, 1995,) 413.81 681.95 P
(pp.) 362.38 670.95 T
(46-) 375.88 670.95 T
(65.) 387.87 670.95 T
-0.22 ([MN) 306.65 657.95 P
-0.22 (95]) 326.39 657.95 P
3.63 (Murase H., Nayar S. K:) 362.36 657.95 P
3 F
3.63 (\324Thr) 467.99 657.95 P
3.63 (ee-Dimensional) 483.66 657.95 P
0.34 (Object Reco) 362.38 646.95 P
0.34 (gnition fr) 406.87 646.95 P
0.34 (om Appear) 440.57 646.95 P
0.34 (ance-P) 480.52 646.95 P
0.34 (ar) 505.29 646.95 P
0.34 (ametric) 513.15 646.95 P
0.68 (Eig) 362.38 635.95 P
0.68 (enspace Method\325,) 374.79 635.95 P
1 F
0.68 ( Systems and Computers in) 439.44 635.95 P
-0.22 (Japan, V) 362.38 624.95 P
-0.22 (ol. 26, No. 8, 1995, pp. 45-54.) 392.48 624.95 P
([NHS) 306.65 611.95 T
(84]) 329.89 611.95 T
0 (Nie) 362.36 611.95 P
0 (v) 375.13 611.95 P
0 (er) 379.5 611.95 P
0 (gelt J., Hinterber) 386.33 611.95 P
0 (ger H., Se) 446.65 611.95 P
0 (vcik K. C.:) 482.41 611.95 P
3 F
0 (\324The) 524.15 611.95 P
-0.28 (Grid F) 362.38 600.95 P
-0.28 (ile: An Adaptable) 386.44 600.95 P
-0.28 (, Symmetric Multik) 449.28 600.95 P
-0.28 (e) 516.86 600.95 P
-0.28 (y F) 520.59 600.95 P
-0.28 (ile) 531.65 600.95 P
2.36 (Structur) 362.38 589.95 P
2.36 (e\325,) 391.55 589.95 P
1 F
2.36 ( A) 400.79 589.95 P
2.36 (CM T) 411.54 589.95 P
2.36 (rans. on Database Systems,) 435.33 589.95 P
-0.22 (V) 362.38 578.95 P
-0.22 (ol.) 367.71 578.95 P
-0.22 (9, No. 1, 1984, pp.) 379.21 578.95 P
-0.22 (38-) 447.81 578.95 P
-0.22 (71.) 459.81 578.95 P
-0.22 ([RKV 95]) 306.65 565.95 P
0.41 (Roussopoulos N., K) 362.36 565.95 P
0.41 (elle) 435.47 565.95 P
0.41 (y S., V) 448.33 565.95 P
0.41 (incent F) 473.62 565.95 P
0.41 (.:) 502.57 565.95 P
3 F
0.41 (\324Near) 509.98 565.95 P
0.41 (est) 530.65 565.95 P
2.08 (Neighbor Queries\325) 362.38 554.95 P
1 F
2.08 (, Proc. A) 432.2 554.95 P
2.08 (CM) 467.99 554.95 P
2.08 (SIGMOD Int.) 488.57 554.95 P
1.93 (Conf. on Management of Data, San Jose, CA,) 362.38 543.95 P
-0.22 (1995, pp.) 362.38 532.95 P
-0.22 (71-) 398.15 532.95 P
-0.22 (79.) 410.15 532.95 P
-0.22 ([Rob 81]) 306.65 519.95 P
0.08 (Robinson J. T) 362.36 519.95 P
0.08 (.:) 412.1 519.95 P
3 F
0.08 (\324The K-D-B-tr) 419.18 519.95 P
0.08 (ee: A Sear) 470.66 519.95 P
0.08 (c) 507.97 519.95 P
0.08 (h Struc-) 511.83 519.95 P
6.88 (tur) 362.38 508.95 P
6.88 (e for Lar) 372.55 508.95 P
6.88 (g) 417.98 508.95 P
6.88 (e Multidimensional Dynamic) 422.39 508.95 P
-0.77 (Inde) 362.38 497.95 P
-0.77 (xes\325,) 378.19 497.95 P
1 F
-0.77 ( Proc. A) 394.93 497.95 P
-0.77 (CM SIGMOD Int. Conf. on Man-) 422.77 497.95 P
-0.22 (agement of Data, 1981, pp. 10-18.) 362.38 486.95 P
([SBK) 306.65 473.95 T
(92]) 329.4 473.95 T
-0.48 (Shoichet B. K., Bodian D. L., K) 362.36 473.95 P
-0.48 (untz I. D.:) 474.85 473.95 P
3 F
-0.48 (\324Molec-) 512.16 473.95 P
-0.95 (ular Doc) 362.38 462.95 P
-0.95 (king Using Shape Descriptor) 393.49 462.95 P
-0.95 (s\325,) 495.3 462.95 P
1 F
-0.95 (Journal of) 505.35 462.95 P
1 (Computational Chemistry) 362.38 451.95 P
1 (, V) 456.05 451.95 P
1 (ol. 13, No. 3, 1992,) 466.89 451.95 P
-0.22 (pp. 380-397.) 362.38 440.95 P
([SH) 306.65 427.95 T
(94]) 323.4 427.95 T
-0.71 (Sha) 362.36 427.95 P
-0.71 (wne) 375.73 427.95 P
-0.71 (y H., Hafner J.:) 390.59 427.95 P
3 F
-0.71 (\324Ef) 445.46 427.95 P
-0.71 (\336cient Color Histo) 456.3 427.95 P
-0.71 (gr) 521.78 427.95 P
-0.71 (am) 529.65 427.95 P
0.7 (Inde) 362.38 416.95 P
0.7 (xing\325,) 378.19 416.95 P
1 F
0.7 (Proc. Int. Conf. on Image Processing,) 401.89 416.95 P
-0.22 (1994, pp. 66-70.) 362.38 405.95 P
([SK) 306.65 392.95 T
(90]) 323.4 392.95 T
-0.68 (See) 362.36 392.95 P
-0.68 (ger B., Krie) 375.22 392.95 P
-0.68 (gel H.-P) 416.22 392.95 P
-0.68 (.:) 444.54 392.95 P
3 F
-0.68 (\324The Buddy T) 450.87 392.95 P
-0.68 (r) 498.01 392.95 P
-0.68 (ee: An Ef) 501.18 392.95 P
-0.68 (\336-) 533.15 392.95 P
0.1 (cient and Rob) 362.38 381.95 P
0.1 (ust Access Method for Spatial Data) 412.39 381.95 P
-0.63 (Base Systems\325,) 362.38 370.95 P
1 F
-0.63 (Proc. 16th Int. Conf. on V) 416.86 370.95 P
-0.63 (ery Lar) 506.71 370.95 P
-0.63 (ge) 532.15 370.95 P
9.82 (Data Bases, Brisbane, Australia, 1990,) 362.38 359.95 P
(pp.) 362.38 348.95 T
(590-) 375.88 348.95 T
(601.) 392.37 348.95 T
([SRF) 306.65 335.95 T
(87]) 327.91 335.95 T
2.05 (Sellis T) 362.36 335.95 P
2.05 (., Roussopoulos N., F) 391.51 335.95 P
2.05 (aloutsos C.:) 475.29 335.95 P
3 F
2.05 (\324The) 524.15 335.95 P
-0.36 (R) 362.38 324.95 P
3 7.2 Q
-0.29 (+) 367.88 328.55 P
3 9 Q
-0.36 (-) 372.73 324.95 P
-0.36 (T) 375.73 324.95 P
-0.36 (r) 380.24 324.95 P
-0.36 (ee: A Dynamic Inde) 383.41 324.95 P
-0.36 (x for Multi-Dimensional) 453.87 324.95 P
-0.82 (Objects\325,) 362.38 313.95 P
1 F
-0.82 (Proc. 13th Int. Conf. on V) 396.55 313.95 P
-0.82 (ery Lar) 485.47 313.95 P
-0.82 (ge Data-) 510.73 313.95 P
-0.22 (bases, Brighton, England, 1987, pp) 362.38 302.95 P
-0.22 (507-) 490.22 302.95 P
-0.22 (518.) 506.72 302.95 P
([WJ) 306.65 289.95 T
(96]) 323.89 289.95 T
0.82 (White, D., Jain R.:) 362.36 289.95 P
3 F
0.82 (\324Similarity Inde) 435.13 289.95 P
0.82 (xing with the) 492.51 289.95 P
0.09 (SS-tr) 362.38 278.95 P
0.09 (ee\325,) 380.04 278.95 P
1 F
0.09 (Proc. 12th) 395.62 278.95 P
0.09 ( Int. Conf. on Data Engineer-) 434.96 278.95 P
-0.22 (ing, Ne) 362.38 267.95 P
-0.22 (w Orleans, LA, 1996.) 388.42 267.95 P
([WW) 306.65 254.95 T
(80]) 328.89 254.95 T
0.47 (W) 362.36 254.95 P
0.47 (allace T) 370.14 254.95 P
0.47 (., W) 398.68 254.95 P
0.47 (intz P) 414.03 254.95 P
0.47 (.:) 434.26 254.95 P
3 F
0.47 (\324An Ef) 441.73 254.95 P
0.47 (\336cient Thr) 465.28 254.95 P
0.47 (ee-Dimen-) 502.67 254.95 P
-0.29 (sional Air) 362.38 243.95 P
-0.29 (cr) 397.51 243.95 P
-0.29 (aft Reco) 404.88 243.95 P
-0.29 (gnition Algorithm Using Nor-) 434.24 243.95 P
-0.48 (malized F) 362.38 232.95 P
-0.48 (ourier Descriptor) 396.7 232.95 P
-0.48 (s\325,) 459.87 232.95 P
1 F
-0.48 ( Computer Graphics) 468.62 232.95 P
-0.22 (and Image Processing, V) 362.38 221.95 P
-0.22 (ol. 13, 1980, pp. 99-126.) 450.52 221.95 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 12
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 12
%%DocumentFonts: Times-Bold
%%+ Times-Roman
%%+ Times-BoldItalic
%%+ Times-Italic
%%+ Symbol
%%+ Courier
%%+ ZapfDingbats
%%EOF
